{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/iocn.png","path":"images/iocn.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/gmint.js","path":"js/gmint.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/gitalk.min.js","path":"js/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1542190025369},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1542190025374},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1542190025403},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1542190025443},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1542190025367},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1542190025420},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1542190025441},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1542190025458},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1542190025459},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1542190025448},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1542190025462},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1542190025453},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1542190025450},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1542190025681},{"_id":"source/about/index.md","hash":"ccab6c80c7d5e8ba8f79d5d4cd9a3449140466f5","modified":1542343690913},{"_id":"source/tags/index.md","hash":"bf179a53509dcd4c617d77da3c0a8b5caeaf97ce","modified":1542190372077},{"_id":"source/categories/index.md","hash":"587e0c53e889ae74c5fd1bba303bbf12e3a8197f","modified":1542190447119},{"_id":"themes/next/_config.yml","hash":"4dc2b3adb600fed8c96fe2ea32487b24f0dc8d4c","modified":1542772563573},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1542190025477},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1542190025475},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1542190025478},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1542190025487},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1542190025484},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1542190025482},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1542190025492},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1542190025491},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1542190025488},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1542190025467},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1542190025495},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1542190025498},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1542190025494},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1542190025500},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1542190025503},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1542190025507},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1542190025501},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1542190025675},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1542190025511},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1542190025671},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1542190025670},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1542190025674},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1542190025677},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1542190025684},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1542190025686},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1542190025678},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1542190026161},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1542190026162},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1542190026163},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1542190025680},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542190025883},{"_id":"source/_posts/DB/DB锁.md","hash":"9df5ca90cd570f4cf273a62431762b78dae0d786","modified":1542771451670},{"_id":"source/_posts/DB/docker_create_db.md","hash":"8cd212eddbbf2125597a375c83cdf336d7a781f3","modified":1542771460000},{"_id":"source/_posts/DB/redis-jedis.md","hash":"b1da37cc56e6d4e59e521d37beb6bf1a3f473222","modified":1542771468102},{"_id":"source/_posts/docker/Docker入门.md","hash":"45547061b356e9246d9cce4f3d1c48c4a90b0b4c","modified":1542336577802},{"_id":"source/_posts/DB/PL_SQL.md","hash":"2823e1e831cb08db6a36907aef6f98104cc62fa8","modified":1542771464439},{"_id":"source/_posts/docker/Docker Swarm.md","hash":"f2645a05bf4a65e665471e01a19199cbbc1075fd","modified":1542338775335},{"_id":"source/_posts/docker/Docker安装.md","hash":"1787694fd23c939c46599a5af798589a1e7455f2","modified":1542335299618},{"_id":"source/_posts/docker/docker serveice.md","hash":"22dae55a8356ede4be0b112ec15c743927ebf21a","modified":1542336574197},{"_id":"source/_posts/docker/makeDockerfile.md","hash":"283afb40fdfb20319fd3c8755ef011bc7e71e7c9","modified":1542361866624},{"_id":"source/_posts/docker/docker stack.md","hash":"a9825829542e1ae7872f22511a7166444c142c8e","modified":1542338865778},{"_id":"source/_posts/docker/docker简述.md","hash":"7e4d0995da062f1272fba0bf51a18b5d894065f2","modified":1542338473985},{"_id":"source/_posts/java/design-pattern.md","hash":"426ea6894dae5eb888d88ed59690095ae663f25c","modified":1542607675536},{"_id":"source/_posts/java/exception.md","hash":"41ea1f022637d3899ea76c2cd8d768107e29e85b","modified":1542607871583},{"_id":"source/_posts/docker/上传image.md","hash":"8390b25df2a2eb90593365397a0cfd7a9b14b527","modified":1542336764306},{"_id":"source/_posts/springboot/boot-default-config.md","hash":"5118200a34232194d7d771af6a44d5ba38da5203","modified":1542608036205},{"_id":"source/_posts/java/problem.md","hash":"11ba0b89e17a370305cdacedd711deab87260910","modified":1542607782175},{"_id":"source/_posts/springboot/spring-cloud.md","hash":"2fca4ec0ca92cb7ae5a82ffbd99e2f440dd1a4d2","modified":1542608160017},{"_id":"source/_posts/springboot/spring-cloud-gateway.md","hash":"8cb7ca713ceff427af2e6618f400ec38e1570c3a","modified":1542608274489},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1542190025510},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1542190025512},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1542190025514},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"012237ba2d32a27c0d61e6643e83358e0b455966","modified":1542766478493},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1542190025518},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1542190025521},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fc7c3f1261983c5d68e72d53633236cc1d305f2e","modified":1542357332815},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1542771389805},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1542190025528},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1542190025538},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1542190025536},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1542190025540},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1542190025541},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1542190025557},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1542190025558},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1542190025636},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1542190025509},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1542190025530},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1542190025565},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1542190025650},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1542190025642},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1542190025644},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1542190025692},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1542190025691},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1542190025689},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1542190025693},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1542190025697},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1542190025695},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1542190025699},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1542190025700},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1542190025702},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1542190025643},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1542190025885},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1542190025887},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1542190025883},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1542190025886},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1542190025891},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1542190025646},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1542190025889},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1542190025892},{"_id":"themes/next/source/css/gitalk.css","hash":"7b64390599603371b2df711356899af2ef28e734","modified":1542358983930},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1542190025893},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"7616ec6ad05526e3884b4a44039a4ad53a410442","modified":1542246886728},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1542190025895},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1542190025894},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"152cd4b279a24d4faf56e5282b4386931fc96e8d","modified":1542246390983},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1542190025895},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542190025898},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542190025900},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1542190025637},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1542190025905},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1542190025899},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1542190025902},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1542190025903},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542190025561},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542190025561},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542190025841},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542190025841},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542190025844},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542190025874},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542190025880},{"_id":"themes/next/source/images/iocn.png","hash":"77d81382a57853473a0a7551a5f9a9bd4397df7d","modified":1542245532292},{"_id":"source/_posts/docker/Docker Swarm/docker-mechine.png","hash":"87f4aedcfe39aca3b0a625fad3cb37c1945b0343","modified":1542338684514},{"_id":"source/_posts/docker/docker stack/docker-redis.png","hash":"82c6acafc1c3a6acf6c59acd629c5d27dbd6cd73","modified":1542338844164},{"_id":"source/_posts/docker/Docker Swarm/docker searm.jpg","hash":"759695fdac36b790a8f285c500b61f018a725648","modified":1542338581249},{"_id":"source/_posts/springboot/spring-cloud-gateway/1537155739056.png","hash":"8e3ac4afeb20389f41bc6e918bd11862059f6334","modified":1542608211549},{"_id":"source/_posts/docker/docker简述/docker.jpg","hash":"fd38089f5bcdb877c70cbf1f7f55122f697cda52","modified":1542338172756},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1542190025534},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1542190025532},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1542190025543},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1542190025547},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1542190025549},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1542190025551},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1542190025545},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1542190025560},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1542190025563},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1542190025559},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1542190025554},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1542190025568},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1542190025578},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1542190025571},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1542190025582},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1542190025587},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1542190025585},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1542190025592},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1542190025594},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1542190025573},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1542190025598},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1542190025595},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1542190025550},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1542190025607},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1542190025614},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1542190025602},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1542190025612},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"ce3216453c63233b5a3548a706f3f8c57edd1b8f","modified":1542354651541},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1542190025623},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1542190025611},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"1c816b522b04842476d7f8379dd4e6850e292a0f","modified":1542357359705},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1542190025632},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1542190025628},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1542190025660},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4603d05120aafe2b8c3b58fc224d7575730bc266","modified":1542359035550},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1542190025629},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1542190025667},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1542190025839},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1542190025666},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1542190025841},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1542190025843},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1542190025844},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1542190025872},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1542190025662},{"_id":"themes/next/source/js/gmint.js","hash":"9ecb0ca69c8f6ef578a1c0e50601de6af0f6b50b","modified":1542355870020},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1542190025878},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1542190025909},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1542190025908},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1542190025907},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1542190025912},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1542190025913},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1542190025914},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1542190025910},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1542190025915},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1542190025918},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1542190025919},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1542190025917},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1542190025961},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1542190025965},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1542190025879},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1542190025963},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1542190025965},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1542190025873},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1542190026028},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1542190026025},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1542190026029},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1542190026061},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1542190026066},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1542190026064},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1542190026068},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1542190026067},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1542190026070},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1542190026073},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1542190025954},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1542190026026},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1542190026113},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1542190026086},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1542190026116},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1542190026027},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1542190026114},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1542190026082},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1542190026090},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1542190026091},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1542190026093},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1542190026094},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1542190026095},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1542190026096},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1542190026098},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1542190026099},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1542190026102},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1542190026101},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1542190026105},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1542190026139},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1542190026110},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1542190026137},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1542190026154},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1542190026159},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1542190026157},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1542190026107},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1542190026001},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1542190026019},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1542190026077},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1542190026018},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1542190026109},{"_id":"source/_posts/docker/docker简述/docker engine.png","hash":"a276c744b70fedb472e1a183334e01bb41ac8ef7","modified":1542338466440},{"_id":"source/_posts/docker/Docker Swarm/swarm架构.jpg","hash":"791ec71588602ad8e15d5c6f791963c0d3cf9cb0","modified":1542338632639},{"_id":"source/_posts/docker/docker简述/docker_VM.jpg","hash":"a12cbb8e2863c8caca5ac7d9d21735accdaf0d2b","modified":1542338452665},{"_id":"themes/next/source/js/gitalk.min.js","hash":"9d5dd7e092c8eaf6266e2498cff72e6c98790a05","modified":1542358857991},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1542190026062},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1542190026012},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1542190025708},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1542190025656},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1542190025709},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1542190025714},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1542190025716},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1542190025658},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1542190025712},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1542190025802},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1542190025755},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1542190025832},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1542190025833},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1542190025834},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1542190025835},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1542190025836},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1542190025837},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1542190025846},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1542190025830},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1542190025860},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1542190025859},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1542190025859},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1542190025866},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1542190025862},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1542190025867},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1542190025869},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1542190025862},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1542190025870},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1542190025848},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1542190025867},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1542190025847},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1542190025870},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1542190025849},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1542190025853},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1542190025916},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1542190025851},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1542190025854},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1542190025852},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1542190025953},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542190025967},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1542190025948},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542190025969},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542190025971},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542190025972},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542190025973},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542190025968},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1542190025991},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1542190025998},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1542190025987},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1542190026033},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1542190026031},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1542190025951},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1542190026036},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1542190026132},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1542190026134},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1542190026021},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1542190026023},{"_id":"source/_posts/docker/Docker Swarm/network.png","hash":"0d81a216ef1f3810d3231badc9d5c29bd142ea28","modified":1542338724136},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1542190025950},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1542190026058},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1542190026151},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1542190026059},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1542190025718},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1542190025747},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1542190025749},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1542190025750},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1542190025753},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1542190025735},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1542190025740},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1542190025742},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1542190025759},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1542190025762},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1542190025764},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1542190025745},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1542190025760},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1542190025767},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1542190025773},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1542190025765},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1542190025778},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1542190025784},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1542190025770},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1542190025777},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"aeddeaa2408ae39781dd098a7a0d864b019dc44b","modified":1542772928654},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1542190025779},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1542771428270},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1542190025781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"3bd37dd9d289eae5ea13a80821cf992bd941cce3","modified":1542680990831},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1542190025794},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1542190025791},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1542190025796},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1542190025798},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1542190025797},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1542190025799},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1542190025800},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"23ab5410bb37b88760edcb386c16d7d583147aa7","modified":1542767879568},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1542190025806},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1542190025804},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1542190025809},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1542190025807},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1542190025810},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1542190025820},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1542190025814},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1542190025795},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1542190025818},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1542190025820},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1542190025816},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1542190025824},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1542190025826},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1542190025823},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1542190025825},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1542190025812},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1542190025827},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1542190025828},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1542190025828},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"f6e217260609a0998668c01fd2489929eb3f45c6","modified":1542357528482},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1542357473767},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1542190025864},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1542190025720},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1542190025725},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1542190025729},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1542190025857},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1542190025855},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1542190025732},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1542190025942},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1542190025726},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1542190025943},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542190025974},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1542190025944},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1542190025946},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1542190025978},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1542190025980},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1542190025984},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1542190026041},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1542190026044},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1542190026056},{"_id":"source/_posts/docker/docker stack/docker stack2.png","hash":"d1cfb79f76bf5491136bbb0f161f8d21909e2db4","modified":1542338841899},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1542190025976},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1542190025947},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1542190025982},{"_id":"source/_posts/docker/docker stack/docker stack1.png","hash":"c951aefdde2d7bfb51d6f4e3fa296d52ffb34aad","modified":1542338839786},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1542190025959},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1542190026126},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1542190026052},{"_id":"public/search.xml","hash":"569abac1dd4f5fe90e2eb09f3561e0c359f18448","modified":1542704153492},{"_id":"public/atom.xml","hash":"73f2d1da3d2d3ed987c37a06b2a85dcef43c2c8f","modified":1542773007349},{"_id":"public/sitemap.xml","hash":"3719c55ad4a235dd543e8ba37799c65b96e1841b","modified":1542773016471},{"_id":"public/tags/index.html","hash":"36cbee58be7267e4a187d8899ccd7d63ce00299e","modified":1542773016539},{"_id":"public/categories/index.html","hash":"6a7ce3aeb57798cee80d2e87a3482c665bd7b234","modified":1542773016539},{"_id":"public/2017/11/20/docker/上传image/index.html","hash":"63998b0dc0c1b0efcfaa211beb9e1fb9c419816f","modified":1542773016540},{"_id":"public/about/index.html","hash":"5df875cedbe044b9a426e2c269cd2d9859f706c0","modified":1542773016539},{"_id":"public/2017/11/16/docker/makeDockerfile/index.html","hash":"053d5939ec7a35601e60c29158bc0f9fdf74c108","modified":1542773016540},{"_id":"public/2017/11/14/docker/docker stack/index.html","hash":"8283e3243cd757de10d8e7fa2c12674647a6b2ab","modified":1542773016540},{"_id":"public/2017/11/14/docker/Docker Swarm/index.html","hash":"7fa56991f6c7079401bb678fff6ce73033e26b73","modified":1542773016540},{"_id":"public/2017/11/12/docker/docker serveice/index.html","hash":"8cf231a4d29cd84365f67b95efa006b11557ab43","modified":1542773016541},{"_id":"public/2017/11/11/docker/Docker入门/index.html","hash":"5d1cab82a8ce3b6cf0adda223b36d8e58bc38b63","modified":1542773016541},{"_id":"public/2017/11/10/docker/Docker安装/index.html","hash":"007376cca4a3a823819fa5cfb6c42e867e273653","modified":1542773016541},{"_id":"public/2017/10/09/docker/docker简述/index.html","hash":"e5aa762d691a647b62f62ddd77a0817dd1a61eba","modified":1542773016541},{"_id":"public/2017/06/14/DB/DB锁/index.html","hash":"1bfe5f3453c54af5794e7743405cfe08bbcda662","modified":1542773016541},{"_id":"public/2017/03/16/DB/PL_SQL/index.html","hash":"d458351c67a829b2d30be037c73272820e0cb367","modified":1542773016541},{"_id":"public/2016/12/14/DB/redis-jedis/index.html","hash":"1369dfe8c499d910d3b97c90e64167bd6b19675d","modified":1542773016541},{"_id":"public/2016/11/14/DB/docker_create_db/index.html","hash":"7a5834716818103cd258fce76156427d5b9680ed","modified":1542773016541},{"_id":"public/categories/数据库/index.html","hash":"25718d31b703e22639ee73b8305cd12d2704aaec","modified":1542773016548},{"_id":"public/categories/docker/index.html","hash":"cdbb55f108a3f726bf38e8605dbb29a6f630f1a9","modified":1542773016547},{"_id":"public/archives/index.html","hash":"603121d029c62ef37fe4ada04f660df867a40d96","modified":1542773016541},{"_id":"public/archives/page/2/index.html","hash":"d7a91c6c9e0f0fc32d81aea603d1ec0b2a48762b","modified":1542773016542},{"_id":"public/archives/2016/index.html","hash":"2f7e9be09d580a0734f62b3678cbd755bc4321d8","modified":1542773016541},{"_id":"public/archives/2016/11/index.html","hash":"74414bc360d4389dfd5634b8a68e381ae981efa6","modified":1542773016542},{"_id":"public/archives/2016/12/index.html","hash":"dab9216b7d10f21b9830ce13b405149b510429d7","modified":1542773016542},{"_id":"public/archives/2017/index.html","hash":"6fbc8bea06f7d4c8649a8ed2fcfb3c10713fa8fa","modified":1542773016542},{"_id":"public/archives/2017/03/index.html","hash":"3acae265a665d8bccdcf61b074f350dc6b63a5ee","modified":1542773016542},{"_id":"public/archives/2017/06/index.html","hash":"59313485c9846872ed612060f2097416c30bae0c","modified":1542773016542},{"_id":"public/archives/2017/10/index.html","hash":"120bf88d5092f0bae7f72aaf62e2caa938110489","modified":1542773016542},{"_id":"public/archives/2017/11/index.html","hash":"b12c447444c5509a308f5f071706c14a54c6ff78","modified":1542773016542},{"_id":"public/index.html","hash":"f464fcb2b6c232d98e8747fd3e995465c40a05d4","modified":1542773016548},{"_id":"public/page/2/index.html","hash":"2c64ae74d4307a8ae1cfb5f6e44c478839c09c4a","modified":1542773016549},{"_id":"public/tags/docker/index.html","hash":"bada179c0f0c239b798e9ea8ca1176caceceac29","modified":1542773016550},{"_id":"public/tags/mysql/index.html","hash":"f097c944e1629e2ed9bd3e498d5cae11cd70a9e9","modified":1542773016552},{"_id":"public/tags/jedis/index.html","hash":"c76d0d5cd41e066b386bece6abf4c5a1fa46d838","modified":1542773016550},{"_id":"public/tags/redis/index.html","hash":"c8313625f797dbb07051dc76d06e466fd4b5775e","modified":1542773016552},{"_id":"public/tags/java/index.html","hash":"e96471fe7344136a354d8dd2579dfff93f52a627","modified":1542773016553},{"_id":"public/tags/入门/index.html","hash":"c249f2cc5ebb07e82bb6ff59d14eb3a06f8f8a92","modified":1542773016553},{"_id":"public/tags/锁表与解锁/index.html","hash":"89d68dffd85f363b6462c819c8b433f9286fe382","modified":1542773016553},{"_id":"public/tags/db/index.html","hash":"164f24cc6fd25b66f4d4258a7838c27a5d6af445","modified":1542773016553},{"_id":"public/tags/数据库工具/index.html","hash":"03873713f9b89ac0d440ff8ca12db0d3dfe6a18e","modified":1542773016553},{"_id":"public/2018/11/19/java/problem/index.html","hash":"d18085086c1a4f027f033647e87551518264f00a","modified":1542773016539},{"_id":"public/2018/11/19/java/exception/index.html","hash":"00cc7e6f5f69e09735de29ce4665a6cb2f3e67aa","modified":1542773016539},{"_id":"public/2018/11/19/java/design-pattern/index.html","hash":"8c7b5c2e443c8dc560bc8f64b8695b92e4ff0346","modified":1542773016540},{"_id":"public/2018/11/19/springboot/spring-cloud-gateway/index.html","hash":"2c4995ee42ccaab1f11d21cf31bed84c77295c3b","modified":1542773016540},{"_id":"public/2018/11/19/springboot/spring-cloud/index.html","hash":"10ca237d4bf123de08e90aee283d8929b0c6ba88","modified":1542773016540},{"_id":"public/2018/11/19/springboot/boot-default-config/index.html","hash":"6591d7df8b59e690f688682a9ea3cccb1f4b8f2a","modified":1542773016540},{"_id":"public/categories/java/index.html","hash":"bd9a63a892d8ba542bffe54db5677498939c7c0c","modified":1542773016547},{"_id":"public/categories/springboot/index.html","hash":"315057db6640cb066e22fcf2bdc6650b219de013","modified":1542773016548},{"_id":"public/archives/2018/index.html","hash":"24975fe664384c940bc8dbb8dc155008f1d57983","modified":1542773016542},{"_id":"public/archives/2018/11/index.html","hash":"203cd662c564986db660c28a8893b903cc665c25","modified":1542773016543},{"_id":"public/tags/设计模式/index.html","hash":"c0bfe9f74f72730e9ea32912b83aa3b6f459a329","modified":1542773016554},{"_id":"public/tags/问题/index.html","hash":"658d1831809da9f3a3a1efa4f421fc978248bff2","modified":1542773016553},{"_id":"public/tags/springboot/index.html","hash":"c7089d24c078f890f12e24c4a6587476aa9e75e7","modified":1542773016554},{"_id":"public/tags/springcloud/index.html","hash":"f537b5632735005d1e0e97b3f8d0abe5a2d8bb4d","modified":1542773016554},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1542704154433},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1542704154433},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1542704154440},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1542704154433},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1542704154438},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1542704154439},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1542704154440},{"_id":"public/images/favicon-16x16-next.png","hash":"7616ec6ad05526e3884b4a44039a4ad53a410442","modified":1542704154445},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1542704154441},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1542704154441},{"_id":"public/images/favicon-32x32-next.png","hash":"152cd4b279a24d4faf56e5282b4386931fc96e8d","modified":1542704154442},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1542704154442},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542704154445},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542704154446},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1542704154446},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1542704154447},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1542704154447},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1542704154447},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1542704154447},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1542704154448},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542704154448},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542704154448},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542704154448},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542704154448},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542704154448},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542704154448},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1542704154449},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1542704154450},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1542704154451},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1542704154452},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542704154454},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1542704154452},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1542704154455},{"_id":"public/2017/11/14/docker/docker stack/docker-redis.png","hash":"82c6acafc1c3a6acf6c59acd629c5d27dbd6cd73","modified":1542704154456},{"_id":"public/2017/11/14/docker/Docker Swarm/docker searm.jpg","hash":"759695fdac36b790a8f285c500b61f018a725648","modified":1542704154458},{"_id":"public/2017/11/14/docker/Docker Swarm/docker-mechine.png","hash":"87f4aedcfe39aca3b0a625fad3cb37c1945b0343","modified":1542704154458},{"_id":"public/2017/10/09/docker/docker简述/docker.jpg","hash":"fd38089f5bcdb877c70cbf1f7f55122f697cda52","modified":1542704154456},{"_id":"public/2018/11/19/springboot/spring-cloud-gateway/1537155739056.png","hash":"8e3ac4afeb20389f41bc6e918bd11862059f6334","modified":1542704154456},{"_id":"public/images/iocn.png","hash":"77d81382a57853473a0a7551a5f9a9bd4397df7d","modified":1542704157052},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1542704157067},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1542704157100},{"_id":"public/2017/10/09/docker/docker简述/docker_VM.jpg","hash":"a12cbb8e2863c8caca5ac7d9d21735accdaf0d2b","modified":1542704157101},{"_id":"public/2017/10/09/docker/docker简述/docker engine.png","hash":"a276c744b70fedb472e1a183334e01bb41ac8ef7","modified":1542704157101},{"_id":"public/2017/11/14/docker/Docker Swarm/swarm架构.jpg","hash":"791ec71588602ad8e15d5c6f791963c0d3cf9cb0","modified":1542704157101},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1542704157131},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1542704157133},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1542704157132},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1542704157134},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1542704157133},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1542704157134},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1542704157134},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1542704157134},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1542704157134},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1542704157134},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1542704157134},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1542704157134},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1542704157134},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1542704157135},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1542704157135},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1542704157135},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1542704157135},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1542704157135},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1542704157135},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1542704157135},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1542704157135},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1542704157135},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1542704157135},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1542704157135},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1542704157135},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1542704157135},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1542704157135},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1542704157136},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1542704157136},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1542704157136},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1542704157136},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1542704157136},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1542704157136},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1542704157136},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1542704157136},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1542704157136},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1542704157136},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1542704157136},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1542704157136},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1542704157136},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1542704157137},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1542704157137},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1542704157137},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1542704157137},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542704157137},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542704157138},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1542704157138},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1542704157138},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1542704157138},{"_id":"public/css/main.css","hash":"b743c368d920a056ffd519294c882a75f10eac4d","modified":1542704157138},{"_id":"public/css/gitalk.css","hash":"99472a287e5000cd6a23a291e150da0adf1695c1","modified":1542704157138},{"_id":"public/js/gmint.js","hash":"22598114eeb90b6902cabaeb8cd1c008a22697e0","modified":1542704157138},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1542704157139},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1542704157138},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1542704157141},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1542704157142},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1542704157142},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1542704157142},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1542704157143},{"_id":"public/js/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1542704157143},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1542704157143},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1542704157143},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1542704157144},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1542704157144},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1542704157146},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1542704157149},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1542704157148},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1542704157150},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1542704157145},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1542704157150},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1542704157151},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1542704157152},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1542704157141},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1542704157152},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1542704157153},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1542704157153},{"_id":"public/2017/11/14/docker/Docker Swarm/network.png","hash":"0d81a216ef1f3810d3231badc9d5c29bd142ea28","modified":1542704157203},{"_id":"public/2017/11/14/docker/docker stack/docker stack2.png","hash":"d1cfb79f76bf5491136bbb0f161f8d21909e2db4","modified":1542704157268},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1542704157428},{"_id":"public/2017/11/14/docker/docker stack/docker stack1.png","hash":"c951aefdde2d7bfb51d6f4e3fa296d52ffb34aad","modified":1542704157429},{"_id":"source/_posts/springboot/spring-session.md","hash":"fa5ba41ea8af1254dc71f797f6621a2c975ccbbc","modified":1542622188207},{"_id":"public/2018/11/19/springboot/spring-session/index.html","hash":"9b37a8f48ce2cbd53e03318854d8b4fd463b5eae","modified":1542773016540},{"_id":"public/tags/spring/index.html","hash":"d873b7804972b298dfb83f97e459246d368f05b8","modified":1542773016554},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"2d001d4debce29ad2cf11ad9f26f3bf4af3a1d7c","modified":1542771020835},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"32b411684a071f5e485d009d5b96557813c6824f","modified":1542770451362},{"_id":"source/images/alipay.jpg","hash":"99ff372d2f7505b7263db357a711c9fc316716c5","modified":1542772774006},{"_id":"source/images/wechatpay.jpg","hash":"cc0ef069fd8aac6048343a8d6b55e343d9e12692","modified":1542772799061},{"_id":"public/images/wechatpay.jpg","hash":"cc0ef069fd8aac6048343a8d6b55e343d9e12692","modified":1542773016575},{"_id":"public/images/alipay.jpg","hash":"99ff372d2f7505b7263db357a711c9fc316716c5","modified":1542773016585}],"Category":[{"name":"数据库","_id":"cjonx65rq0005i8ushemcrtn6"},{"name":"docker","_id":"cjonx65s6000fi8usntof138v"},{"name":"java","_id":"cjonx65t60013i8usqaktv08c"},{"name":"springboot","_id":"cjonx65t8001ii8usnyly4eta"}],"Data":[],"Page":[{"title":"tags","date":"2018-11-14T10:12:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-11-14 18:12:26\ntype: \"tags\"\n---\n","updated":"2018-11-14T10:12:52.077Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjonx65im0000i8usd9e05tq1","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","title":"CARZY","date":"2018-11-16T04:46:38.000Z","tags":null,"_content":"# CARZY\n\nJAVA工程师","source":"about/index.md","raw":"---\nlayout: page\ntitle: CARZY\ndate: 2018-11-16 12:46:38\ntags:\n---\n# CARZY\n\nJAVA工程师","updated":"2018-11-16T04:48:10.913Z","path":"about/index.html","comments":1,"_id":"cjonx65is0001i8usahw7ysj6","content":"<h1 id=\"CARZY\"><a href=\"#CARZY\" class=\"headerlink\" title=\"CARZY\"></a>CARZY</h1><p>JAVA工程师</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CARZY\"><a href=\"#CARZY\" class=\"headerlink\" title=\"CARZY\"></a>CARZY</h1><p>JAVA工程师</p>\n"},{"title":"categories","date":"2018-11-14T10:13:57.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-11-14 18:13:57\ntype: \"categories\"\n---\n","updated":"2018-11-14T10:14:07.119Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjonx65iw0002i8usv12y5t39","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"docker创建数据库","date":"2016-11-14T10:13:57.000Z","type":"post","_content":"\n# docker创建数据库\n\n## mysql\n\n```bash\ndocker run --name some-mysql -v /home/dxp/mysql/data:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:5.7\n```","source":"_posts/DB/docker_create_db.md","raw":"---\ntitle: docker创建数据库\ndate: 2016-11-14 18:13:57\ntype: post\ntags: \n    - docker\n    - mysql\ncategories: 数据库\n---\n\n# docker创建数据库\n\n## mysql\n\n```bash\ndocker run --name some-mysql -v /home/dxp/mysql/data:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:5.7\n```","slug":"DB/docker_create_db","published":1,"updated":"2018-11-21T03:37:40.000Z","_id":"cjonx65rb0003i8us7rdpnfgm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"docker创建数据库\"><a href=\"#docker创建数据库\" class=\"headerlink\" title=\"docker创建数据库\"></a>docker创建数据库</h1><h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name some-mysql -v /home/dxp/mysql/data:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:5.7</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker创建数据库\"><a href=\"#docker创建数据库\" class=\"headerlink\" title=\"docker创建数据库\"></a>docker创建数据库</h1><h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name some-mysql -v /home/dxp/mysql/data:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:5.7</span><br></pre></td></tr></table></figure>"},{"title":"jedis config 配置说明","date":"2016-12-14T10:13:57.000Z","type":"post","_content":"\n# JEDIS-2.4.2\n\n## jedis config 配置说明\n\n``` java\nJedisPoolConfig config = new JedisPoolConfig();\n\n//连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true\nconfig.setBlockWhenExhausted(true);\n\n//设置的逐出策略类名, 默认DefaultEvictionPolicy(当连接超过最大空闲时间,或连接数超过最大空闲连接数)\nconfig.setEvictionPolicyClassName(\"org.apache.commons.pool2.impl.DefaultEvictionPolicy\");\n\n//是否启用pool的jmx管理功能, 默认true\nconfig.setJmxEnabled(true);\n\n//MBean ObjectName = new ObjectName(\"org.apache.commons.pool2:type=GenericObjectPool,name=\" + \"pool\" + i); 默认为\"pool\", JMX不熟,具体不知道是干啥的...默认就好.\nconfig.setJmxNamePrefix(\"pool\");\n\n//是否启用后进先出, 默认true\nconfig.setLifo(true);\n\n//最大空闲连接数, 默认8个\nconfig.setMaxIdle(8);\n\n//最大连接数, 默认8个\nconfig.setMaxTotal(8);\n\n//获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1\nconfig.setMaxWaitMillis(-1);\n\n//逐出连接的最小空闲时间 默认1800000毫秒(30分钟)\nconfig.setMinEvictableIdleTimeMillis(1800000);\n\n//最小空闲连接数, 默认0\nconfig.setMinIdle(0);\n\n//每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3\nconfig.setNumTestsPerEvictionRun(3);\n\n//对象空闲多久后逐出, 当空闲时间>该值 且 空闲连接>最大空闲数 时直接逐出,不再根据MinEvictableIdleTimeMillis判断  (默认逐出策略)   \nconfig.setSoftMinEvictableIdleTimeMillis(1800000);\n\n//在获取连接的时候检查有效性, 默认false\nconfig.setTestOnBorrow(false);\n\n//在空闲时检查有效性, 默认false\nconfig.setTestWhileIdle(false);\n\n//逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1\nconfig.setTimeBetweenEvictionRunsMillis(-1);\n\nJedisPool pool = new JedisPool(config, \"localhost\");\n```","source":"_posts/DB/redis-jedis.md","raw":"---\ntitle: jedis config 配置说明\ndate: 2016-12-14 18:13:57\ntype: post\ntags: \n    - jedis\n    - redis\n    - java\ncategories: 数据库\n---\n\n# JEDIS-2.4.2\n\n## jedis config 配置说明\n\n``` java\nJedisPoolConfig config = new JedisPoolConfig();\n\n//连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true\nconfig.setBlockWhenExhausted(true);\n\n//设置的逐出策略类名, 默认DefaultEvictionPolicy(当连接超过最大空闲时间,或连接数超过最大空闲连接数)\nconfig.setEvictionPolicyClassName(\"org.apache.commons.pool2.impl.DefaultEvictionPolicy\");\n\n//是否启用pool的jmx管理功能, 默认true\nconfig.setJmxEnabled(true);\n\n//MBean ObjectName = new ObjectName(\"org.apache.commons.pool2:type=GenericObjectPool,name=\" + \"pool\" + i); 默认为\"pool\", JMX不熟,具体不知道是干啥的...默认就好.\nconfig.setJmxNamePrefix(\"pool\");\n\n//是否启用后进先出, 默认true\nconfig.setLifo(true);\n\n//最大空闲连接数, 默认8个\nconfig.setMaxIdle(8);\n\n//最大连接数, 默认8个\nconfig.setMaxTotal(8);\n\n//获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1\nconfig.setMaxWaitMillis(-1);\n\n//逐出连接的最小空闲时间 默认1800000毫秒(30分钟)\nconfig.setMinEvictableIdleTimeMillis(1800000);\n\n//最小空闲连接数, 默认0\nconfig.setMinIdle(0);\n\n//每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3\nconfig.setNumTestsPerEvictionRun(3);\n\n//对象空闲多久后逐出, 当空闲时间>该值 且 空闲连接>最大空闲数 时直接逐出,不再根据MinEvictableIdleTimeMillis判断  (默认逐出策略)   \nconfig.setSoftMinEvictableIdleTimeMillis(1800000);\n\n//在获取连接的时候检查有效性, 默认false\nconfig.setTestOnBorrow(false);\n\n//在空闲时检查有效性, 默认false\nconfig.setTestWhileIdle(false);\n\n//逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1\nconfig.setTimeBetweenEvictionRunsMillis(-1);\n\nJedisPool pool = new JedisPool(config, \"localhost\");\n```","slug":"DB/redis-jedis","published":1,"updated":"2018-11-21T03:37:48.102Z","_id":"cjonx65rb0004i8us9yuy4f53","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JEDIS-2-4-2\"><a href=\"#JEDIS-2-4-2\" class=\"headerlink\" title=\"JEDIS-2.4.2\"></a>JEDIS-2.4.2</h1><h2 id=\"jedis-config-配置说明\"><a href=\"#jedis-config-配置说明\" class=\"headerlink\" title=\"jedis config 配置说明\"></a>jedis config 配置说明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JedisPoolConfig config = <span class=\"keyword\">new</span> JedisPoolConfig();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true</span></span><br><span class=\"line\">config.setBlockWhenExhausted(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置的逐出策略类名, 默认DefaultEvictionPolicy(当连接超过最大空闲时间,或连接数超过最大空闲连接数)</span></span><br><span class=\"line\">config.setEvictionPolicyClassName(<span class=\"string\">\"org.apache.commons.pool2.impl.DefaultEvictionPolicy\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//是否启用pool的jmx管理功能, 默认true</span></span><br><span class=\"line\">config.setJmxEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//MBean ObjectName = new ObjectName(\"org.apache.commons.pool2:type=GenericObjectPool,name=\" + \"pool\" + i); 默认为\"pool\", JMX不熟,具体不知道是干啥的...默认就好.</span></span><br><span class=\"line\">config.setJmxNamePrefix(<span class=\"string\">\"pool\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//是否启用后进先出, 默认true</span></span><br><span class=\"line\">config.setLifo(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大空闲连接数, 默认8个</span></span><br><span class=\"line\">config.setMaxIdle(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大连接数, 默认8个</span></span><br><span class=\"line\">config.setMaxTotal(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1</span></span><br><span class=\"line\">config.setMaxWaitMillis(-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//逐出连接的最小空闲时间 默认1800000毫秒(30分钟)</span></span><br><span class=\"line\">config.setMinEvictableIdleTimeMillis(<span class=\"number\">1800000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最小空闲连接数, 默认0</span></span><br><span class=\"line\">config.setMinIdle(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3</span></span><br><span class=\"line\">config.setNumTestsPerEvictionRun(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象空闲多久后逐出, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲数 时直接逐出,不再根据MinEvictableIdleTimeMillis判断  (默认逐出策略)   </span></span><br><span class=\"line\">config.setSoftMinEvictableIdleTimeMillis(<span class=\"number\">1800000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在获取连接的时候检查有效性, 默认false</span></span><br><span class=\"line\">config.setTestOnBorrow(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在空闲时检查有效性, 默认false</span></span><br><span class=\"line\">config.setTestWhileIdle(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1</span></span><br><span class=\"line\">config.setTimeBetweenEvictionRunsMillis(-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">JedisPool pool = <span class=\"keyword\">new</span> JedisPool(config, <span class=\"string\">\"localhost\"</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JEDIS-2-4-2\"><a href=\"#JEDIS-2-4-2\" class=\"headerlink\" title=\"JEDIS-2.4.2\"></a>JEDIS-2.4.2</h1><h2 id=\"jedis-config-配置说明\"><a href=\"#jedis-config-配置说明\" class=\"headerlink\" title=\"jedis config 配置说明\"></a>jedis config 配置说明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JedisPoolConfig config = <span class=\"keyword\">new</span> JedisPoolConfig();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true</span></span><br><span class=\"line\">config.setBlockWhenExhausted(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置的逐出策略类名, 默认DefaultEvictionPolicy(当连接超过最大空闲时间,或连接数超过最大空闲连接数)</span></span><br><span class=\"line\">config.setEvictionPolicyClassName(<span class=\"string\">\"org.apache.commons.pool2.impl.DefaultEvictionPolicy\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//是否启用pool的jmx管理功能, 默认true</span></span><br><span class=\"line\">config.setJmxEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//MBean ObjectName = new ObjectName(\"org.apache.commons.pool2:type=GenericObjectPool,name=\" + \"pool\" + i); 默认为\"pool\", JMX不熟,具体不知道是干啥的...默认就好.</span></span><br><span class=\"line\">config.setJmxNamePrefix(<span class=\"string\">\"pool\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//是否启用后进先出, 默认true</span></span><br><span class=\"line\">config.setLifo(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大空闲连接数, 默认8个</span></span><br><span class=\"line\">config.setMaxIdle(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大连接数, 默认8个</span></span><br><span class=\"line\">config.setMaxTotal(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1</span></span><br><span class=\"line\">config.setMaxWaitMillis(-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//逐出连接的最小空闲时间 默认1800000毫秒(30分钟)</span></span><br><span class=\"line\">config.setMinEvictableIdleTimeMillis(<span class=\"number\">1800000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最小空闲连接数, 默认0</span></span><br><span class=\"line\">config.setMinIdle(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3</span></span><br><span class=\"line\">config.setNumTestsPerEvictionRun(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象空闲多久后逐出, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲数 时直接逐出,不再根据MinEvictableIdleTimeMillis判断  (默认逐出策略)   </span></span><br><span class=\"line\">config.setSoftMinEvictableIdleTimeMillis(<span class=\"number\">1800000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在获取连接的时候检查有效性, 默认false</span></span><br><span class=\"line\">config.setTestOnBorrow(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在空闲时检查有效性, 默认false</span></span><br><span class=\"line\">config.setTestWhileIdle(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1</span></span><br><span class=\"line\">config.setTimeBetweenEvictionRunsMillis(-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">JedisPool pool = <span class=\"keyword\">new</span> JedisPool(config, <span class=\"string\">\"localhost\"</span>);</span><br></pre></td></tr></table></figure>"},{"title":"Docker入门","date":"2017-11-11T11:13:57.000Z","type":"post","_content":"\n# Docker入门\n\n## 搜索docker镜像\n\n```dokcer\ndocker search tutorial\n```\n\n## 下载容器\n\n> 可能可能需要配置镜像加速\n\n```docker\ndocker pull learn/tutorial\n```\n\ndocker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。\n\n## 在容器中安装新的程序\n\ntutorial镜像是基于ubuntu的，所以你可以使用ubuntu的apt-get命令来安装ping程序：apt-get install -y ping。\n\n```shell\ndocker run learn/tutorial apt-get install -y ping\n```\n\n## 保存对容器的修改\n\n当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。docker中保存状态的过程称之为committing，它保存的新旧状态之间的区别，从而产生一个新的版本\n\n1. 运行docker commit，可以查看该命令的参数列表。\n2. 你需要指定要提交保存容器的ID。(译者按：通过docker ps -l 命令获得)\n3. 无需拷贝完整的id，通常来讲最开始的三至四个字母即可区分。（译者按：非常类似git里面的版本号)\n\n```bash\ndocker commit 698 learn/ping\n```\n\n## 运行新的镜像\n\n在新的镜像中运行 `ping www.baidu.com` 命令\n\n```docker\ndocker run lean/ping ping www.baidu.com\n```\n\n## 发布docker镜像\n\n我们可以将其发布到官方的索引网站。还记得我们最开始下载的learn/tutorial镜像吧，我们也可以把我们自己编译的镜像发布到索引页面，一方面可以自己重用，另一方面也可以分享给其他人使用\n\n# 配置镜像加速\n\n* 国内做Docker镜像站的还蛮多的，阿里、163、DaoCloud这些都是比较好的镜像站地址\n\n## 比如\n\n### win10 上 Docker for Windows\n\n1. 阿里的镜像站地址为：`https://dev.aliyun.com/search.html` ，访问该地址然后登陆阿里云账号—->在产品控制台—>Docker镜像仓库 –>镜像库—>Docker Hub 镜像站点 Copy “您的专属加速器地址”\n2. 右键电脑右下角的Docker 图标–>Settings–>Daemon—> 将加速器地址复制到该页面上的文本框中，点击Apply 然后等待Docker重启，重启完毕就可以使用新的Docker镜像源了\n3. 其余几个机器的配置方式在参考  阿里云  `https://dev.aliyun.com/search.html`","source":"_posts/docker/Docker入门.md","raw":"---\ntitle: Docker入门\ndate: 2017-11-11 19:13:57\ntype: post\ntags: \n    - docker\n    - 入门\ncategories: docker\n---\n\n# Docker入门\n\n## 搜索docker镜像\n\n```dokcer\ndocker search tutorial\n```\n\n## 下载容器\n\n> 可能可能需要配置镜像加速\n\n```docker\ndocker pull learn/tutorial\n```\n\ndocker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。\n\n## 在容器中安装新的程序\n\ntutorial镜像是基于ubuntu的，所以你可以使用ubuntu的apt-get命令来安装ping程序：apt-get install -y ping。\n\n```shell\ndocker run learn/tutorial apt-get install -y ping\n```\n\n## 保存对容器的修改\n\n当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。docker中保存状态的过程称之为committing，它保存的新旧状态之间的区别，从而产生一个新的版本\n\n1. 运行docker commit，可以查看该命令的参数列表。\n2. 你需要指定要提交保存容器的ID。(译者按：通过docker ps -l 命令获得)\n3. 无需拷贝完整的id，通常来讲最开始的三至四个字母即可区分。（译者按：非常类似git里面的版本号)\n\n```bash\ndocker commit 698 learn/ping\n```\n\n## 运行新的镜像\n\n在新的镜像中运行 `ping www.baidu.com` 命令\n\n```docker\ndocker run lean/ping ping www.baidu.com\n```\n\n## 发布docker镜像\n\n我们可以将其发布到官方的索引网站。还记得我们最开始下载的learn/tutorial镜像吧，我们也可以把我们自己编译的镜像发布到索引页面，一方面可以自己重用，另一方面也可以分享给其他人使用\n\n# 配置镜像加速\n\n* 国内做Docker镜像站的还蛮多的，阿里、163、DaoCloud这些都是比较好的镜像站地址\n\n## 比如\n\n### win10 上 Docker for Windows\n\n1. 阿里的镜像站地址为：`https://dev.aliyun.com/search.html` ，访问该地址然后登陆阿里云账号—->在产品控制台—>Docker镜像仓库 –>镜像库—>Docker Hub 镜像站点 Copy “您的专属加速器地址”\n2. 右键电脑右下角的Docker 图标–>Settings–>Daemon—> 将加速器地址复制到该页面上的文本框中，点击Apply 然后等待Docker重启，重启完毕就可以使用新的Docker镜像源了\n3. 其余几个机器的配置方式在参考  阿里云  `https://dev.aliyun.com/search.html`","slug":"docker/Docker入门","published":1,"updated":"2018-11-16T02:49:37.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonx65rq0007i8usafljmk3n","content":"<h1 id=\"Docker入门\"><a href=\"#Docker入门\" class=\"headerlink\" title=\"Docker入门\"></a>Docker入门</h1><h2 id=\"搜索docker镜像\"><a href=\"#搜索docker镜像\" class=\"headerlink\" title=\"搜索docker镜像\"></a>搜索docker镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search tutorial</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载容器\"><a href=\"#下载容器\" class=\"headerlink\" title=\"下载容器\"></a>下载容器</h2><blockquote>\n<p>可能可能需要配置镜像加速</p>\n</blockquote>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull learn/tutorial</span><br></pre></td></tr></table></figure>\n<p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p>\n<h2 id=\"在容器中安装新的程序\"><a href=\"#在容器中安装新的程序\" class=\"headerlink\" title=\"在容器中安装新的程序\"></a>在容器中安装新的程序</h2><p>tutorial镜像是基于ubuntu的，所以你可以使用ubuntu的apt-get命令来安装ping程序：apt-get install -y ping。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run learn/tutorial apt-get install -y ping</span><br></pre></td></tr></table></figure>\n<h2 id=\"保存对容器的修改\"><a href=\"#保存对容器的修改\" class=\"headerlink\" title=\"保存对容器的修改\"></a>保存对容器的修改</h2><p>当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。docker中保存状态的过程称之为committing，它保存的新旧状态之间的区别，从而产生一个新的版本</p>\n<ol>\n<li>运行docker commit，可以查看该命令的参数列表。</li>\n<li>你需要指定要提交保存容器的ID。(译者按：通过docker ps -l 命令获得)</li>\n<li>无需拷贝完整的id，通常来讲最开始的三至四个字母即可区分。（译者按：非常类似git里面的版本号)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit 698 learn/ping</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行新的镜像\"><a href=\"#运行新的镜像\" class=\"headerlink\" title=\"运行新的镜像\"></a>运行新的镜像</h2><p>在新的镜像中运行 <code>ping www.baidu.com</code> 命令</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"bash\"> lean/ping ping www.baidu.com</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"发布docker镜像\"><a href=\"#发布docker镜像\" class=\"headerlink\" title=\"发布docker镜像\"></a>发布docker镜像</h2><p>我们可以将其发布到官方的索引网站。还记得我们最开始下载的learn/tutorial镜像吧，我们也可以把我们自己编译的镜像发布到索引页面，一方面可以自己重用，另一方面也可以分享给其他人使用</p>\n<h1 id=\"配置镜像加速\"><a href=\"#配置镜像加速\" class=\"headerlink\" title=\"配置镜像加速\"></a>配置镜像加速</h1><ul>\n<li>国内做Docker镜像站的还蛮多的，阿里、163、DaoCloud这些都是比较好的镜像站地址</li>\n</ul>\n<h2 id=\"比如\"><a href=\"#比如\" class=\"headerlink\" title=\"比如\"></a>比如</h2><h3 id=\"win10-上-Docker-for-Windows\"><a href=\"#win10-上-Docker-for-Windows\" class=\"headerlink\" title=\"win10 上 Docker for Windows\"></a>win10 上 Docker for Windows</h3><ol>\n<li>阿里的镜像站地址为：<code>https://dev.aliyun.com/search.html</code> ，访问该地址然后登陆阿里云账号—-&gt;在产品控制台—&gt;Docker镜像仓库 –&gt;镜像库—&gt;Docker Hub 镜像站点 Copy “您的专属加速器地址”</li>\n<li>右键电脑右下角的Docker 图标–&gt;Settings–&gt;Daemon—&gt; 将加速器地址复制到该页面上的文本框中，点击Apply 然后等待Docker重启，重启完毕就可以使用新的Docker镜像源了</li>\n<li>其余几个机器的配置方式在参考  阿里云  <code>https://dev.aliyun.com/search.html</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker入门\"><a href=\"#Docker入门\" class=\"headerlink\" title=\"Docker入门\"></a>Docker入门</h1><h2 id=\"搜索docker镜像\"><a href=\"#搜索docker镜像\" class=\"headerlink\" title=\"搜索docker镜像\"></a>搜索docker镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search tutorial</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载容器\"><a href=\"#下载容器\" class=\"headerlink\" title=\"下载容器\"></a>下载容器</h2><blockquote>\n<p>可能可能需要配置镜像加速</p>\n</blockquote>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull learn/tutorial</span><br></pre></td></tr></table></figure>\n<p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p>\n<h2 id=\"在容器中安装新的程序\"><a href=\"#在容器中安装新的程序\" class=\"headerlink\" title=\"在容器中安装新的程序\"></a>在容器中安装新的程序</h2><p>tutorial镜像是基于ubuntu的，所以你可以使用ubuntu的apt-get命令来安装ping程序：apt-get install -y ping。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run learn/tutorial apt-get install -y ping</span><br></pre></td></tr></table></figure>\n<h2 id=\"保存对容器的修改\"><a href=\"#保存对容器的修改\" class=\"headerlink\" title=\"保存对容器的修改\"></a>保存对容器的修改</h2><p>当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。docker中保存状态的过程称之为committing，它保存的新旧状态之间的区别，从而产生一个新的版本</p>\n<ol>\n<li>运行docker commit，可以查看该命令的参数列表。</li>\n<li>你需要指定要提交保存容器的ID。(译者按：通过docker ps -l 命令获得)</li>\n<li>无需拷贝完整的id，通常来讲最开始的三至四个字母即可区分。（译者按：非常类似git里面的版本号)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit 698 learn/ping</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行新的镜像\"><a href=\"#运行新的镜像\" class=\"headerlink\" title=\"运行新的镜像\"></a>运行新的镜像</h2><p>在新的镜像中运行 <code>ping www.baidu.com</code> 命令</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"bash\"> lean/ping ping www.baidu.com</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"发布docker镜像\"><a href=\"#发布docker镜像\" class=\"headerlink\" title=\"发布docker镜像\"></a>发布docker镜像</h2><p>我们可以将其发布到官方的索引网站。还记得我们最开始下载的learn/tutorial镜像吧，我们也可以把我们自己编译的镜像发布到索引页面，一方面可以自己重用，另一方面也可以分享给其他人使用</p>\n<h1 id=\"配置镜像加速\"><a href=\"#配置镜像加速\" class=\"headerlink\" title=\"配置镜像加速\"></a>配置镜像加速</h1><ul>\n<li>国内做Docker镜像站的还蛮多的，阿里、163、DaoCloud这些都是比较好的镜像站地址</li>\n</ul>\n<h2 id=\"比如\"><a href=\"#比如\" class=\"headerlink\" title=\"比如\"></a>比如</h2><h3 id=\"win10-上-Docker-for-Windows\"><a href=\"#win10-上-Docker-for-Windows\" class=\"headerlink\" title=\"win10 上 Docker for Windows\"></a>win10 上 Docker for Windows</h3><ol>\n<li>阿里的镜像站地址为：<code>https://dev.aliyun.com/search.html</code> ，访问该地址然后登陆阿里云账号—-&gt;在产品控制台—&gt;Docker镜像仓库 –&gt;镜像库—&gt;Docker Hub 镜像站点 Copy “您的专属加速器地址”</li>\n<li>右键电脑右下角的Docker 图标–&gt;Settings–&gt;Daemon—&gt; 将加速器地址复制到该页面上的文本框中，点击Apply 然后等待Docker重启，重启完毕就可以使用新的Docker镜像源了</li>\n<li>其余几个机器的配置方式在参考  阿里云  <code>https://dev.aliyun.com/search.html</code></li>\n</ol>\n"},{"title":"锁表与解锁","date":"2017-06-14T08:13:57.000Z","type":"post","_content":"\n# 锁表与解锁\n\n## ORACLE\n\n### 查询锁表情况\n\n```sql\nSELECT object_name, machine, s.sid, s.serial#\nFROM gv$locked_object l, dba_objects o, gv$session s\nWHERE l.object_id = o.object_id\nAND l.session_id = s.sid\n```\n\n### 锁表\n\n```sql\nLOCK TABLE CAM_ACCOUNT_MST IN SHARE MODE ;\n```\n\n### 解锁\n\n```sql\nalter system kill session 'sid, serial#'\nALTER system kill session '17, 23019'\n```\n\n### 查询锁表情况2\n\n```SQL\nSELECT l.session_id sid,\n  s.serial#,\n       l.locked_mode 锁模式,\n       l.oracle_username 登录用户,\n       l.os_user_name 登录机器用户名,\n       s.machine 机器名,\n       s.terminal 终端用户名,\n       o.object_name 被锁对象名,\n       s.logon_time 登录数据库时间\nFROM v$locked_object l, all_objects o, v$session s\nWHERE l.object_id = o.object_id\n      AND l.session_id = s.sid\nORDER BY sid, s.serial#;\n```","source":"_posts/DB/DB锁.md","raw":"---\ntitle: 锁表与解锁\ndate: 2017-06-14 16:13:57\ntype: post\ntags: 锁表与解锁\ncategories: 数据库\n---\n\n# 锁表与解锁\n\n## ORACLE\n\n### 查询锁表情况\n\n```sql\nSELECT object_name, machine, s.sid, s.serial#\nFROM gv$locked_object l, dba_objects o, gv$session s\nWHERE l.object_id = o.object_id\nAND l.session_id = s.sid\n```\n\n### 锁表\n\n```sql\nLOCK TABLE CAM_ACCOUNT_MST IN SHARE MODE ;\n```\n\n### 解锁\n\n```sql\nalter system kill session 'sid, serial#'\nALTER system kill session '17, 23019'\n```\n\n### 查询锁表情况2\n\n```SQL\nSELECT l.session_id sid,\n  s.serial#,\n       l.locked_mode 锁模式,\n       l.oracle_username 登录用户,\n       l.os_user_name 登录机器用户名,\n       s.machine 机器名,\n       s.terminal 终端用户名,\n       o.object_name 被锁对象名,\n       s.logon_time 登录数据库时间\nFROM v$locked_object l, all_objects o, v$session s\nWHERE l.object_id = o.object_id\n      AND l.session_id = s.sid\nORDER BY sid, s.serial#;\n```","slug":"DB/DB锁","published":1,"updated":"2018-11-21T03:37:31.670Z","_id":"cjonx65rq0008i8uscpdruu24","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"锁表与解锁\"><a href=\"#锁表与解锁\" class=\"headerlink\" title=\"锁表与解锁\"></a>锁表与解锁</h1><h2 id=\"ORACLE\"><a href=\"#ORACLE\" class=\"headerlink\" title=\"ORACLE\"></a>ORACLE</h2><h3 id=\"查询锁表情况\"><a href=\"#查询锁表情况\" class=\"headerlink\" title=\"查询锁表情况\"></a>查询锁表情况</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> object_name, machine, s.sid, s.serial<span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> gv$locked_object l, dba_objects o, gv$<span class=\"keyword\">session</span> s</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> l.object_id = o.object_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> l.session_id = s.sid</span><br></pre></td></tr></table></figure>\n<h3 id=\"锁表\"><a href=\"#锁表\" class=\"headerlink\" title=\"锁表\"></a>锁表</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">LOCK</span> <span class=\"keyword\">TABLE</span> CAM_ACCOUNT_MST <span class=\"keyword\">IN</span> <span class=\"keyword\">SHARE</span> <span class=\"keyword\">MODE</span> ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> <span class=\"keyword\">kill</span> <span class=\"keyword\">session</span> <span class=\"string\">'sid, serial#'</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">system</span> <span class=\"keyword\">kill</span> <span class=\"keyword\">session</span> <span class=\"string\">'17, 23019'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查询锁表情况2\"><a href=\"#查询锁表情况2\" class=\"headerlink\" title=\"查询锁表情况2\"></a>查询锁表情况2</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> l.session_id <span class=\"keyword\">sid</span>,</span><br><span class=\"line\">  s.serial<span class=\"comment\">#,</span></span><br><span class=\"line\">       l.locked_mode 锁模式,</span><br><span class=\"line\">       l.oracle_username 登录用户,</span><br><span class=\"line\">       l.os_user_name 登录机器用户名,</span><br><span class=\"line\">       s.machine 机器名,</span><br><span class=\"line\">       s.terminal 终端用户名,</span><br><span class=\"line\">       o.object_name 被锁对象名,</span><br><span class=\"line\">       s.logon_time 登录数据库时间</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> v$locked_object l, all_objects o, v$<span class=\"keyword\">session</span> s</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> l.object_id = o.object_id</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> l.session_id = s.sid</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">sid</span>, s.serial<span class=\"comment\">#;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"锁表与解锁\"><a href=\"#锁表与解锁\" class=\"headerlink\" title=\"锁表与解锁\"></a>锁表与解锁</h1><h2 id=\"ORACLE\"><a href=\"#ORACLE\" class=\"headerlink\" title=\"ORACLE\"></a>ORACLE</h2><h3 id=\"查询锁表情况\"><a href=\"#查询锁表情况\" class=\"headerlink\" title=\"查询锁表情况\"></a>查询锁表情况</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> object_name, machine, s.sid, s.serial<span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> gv$locked_object l, dba_objects o, gv$<span class=\"keyword\">session</span> s</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> l.object_id = o.object_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> l.session_id = s.sid</span><br></pre></td></tr></table></figure>\n<h3 id=\"锁表\"><a href=\"#锁表\" class=\"headerlink\" title=\"锁表\"></a>锁表</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">LOCK</span> <span class=\"keyword\">TABLE</span> CAM_ACCOUNT_MST <span class=\"keyword\">IN</span> <span class=\"keyword\">SHARE</span> <span class=\"keyword\">MODE</span> ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> <span class=\"keyword\">kill</span> <span class=\"keyword\">session</span> <span class=\"string\">'sid, serial#'</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">system</span> <span class=\"keyword\">kill</span> <span class=\"keyword\">session</span> <span class=\"string\">'17, 23019'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查询锁表情况2\"><a href=\"#查询锁表情况2\" class=\"headerlink\" title=\"查询锁表情况2\"></a>查询锁表情况2</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> l.session_id <span class=\"keyword\">sid</span>,</span><br><span class=\"line\">  s.serial<span class=\"comment\">#,</span></span><br><span class=\"line\">       l.locked_mode 锁模式,</span><br><span class=\"line\">       l.oracle_username 登录用户,</span><br><span class=\"line\">       l.os_user_name 登录机器用户名,</span><br><span class=\"line\">       s.machine 机器名,</span><br><span class=\"line\">       s.terminal 终端用户名,</span><br><span class=\"line\">       o.object_name 被锁对象名,</span><br><span class=\"line\">       s.logon_time 登录数据库时间</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> v$locked_object l, all_objects o, v$<span class=\"keyword\">session</span> s</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> l.object_id = o.object_id</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> l.session_id = s.sid</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">sid</span>, s.serial<span class=\"comment\">#;</span></span><br></pre></td></tr></table></figure>"},{"title":"PL/SQL developer 12.0 注册码","date":"2017-03-16T10:13:57.000Z","type":"post","_content":"\n# 数据库工具\n\n## PL/SQL developer 12.0 注册码\n\n* LicenseNumber : 999\n* productCode ： 46jvnzf74ysf3mqm4hx4tvhcamh8gpe3v5\n* SeriesNumber：706090\n* password：xs374ca","source":"_posts/DB/PL_SQL.md","raw":"---\ntitle: PL/SQL developer 12.0 注册码\ndate: 2017-03-16 18:13:57\ntype: post\ntags: \n    - db\n    - 数据库工具\ncategories: 数据库\n---\n\n# 数据库工具\n\n## PL/SQL developer 12.0 注册码\n\n* LicenseNumber : 999\n* productCode ： 46jvnzf74ysf3mqm4hx4tvhcamh8gpe3v5\n* SeriesNumber：706090\n* password：xs374ca","slug":"DB/PL_SQL","published":1,"updated":"2018-11-21T03:37:44.439Z","_id":"cjonx65s60009i8ustg6uvya3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数据库工具\"><a href=\"#数据库工具\" class=\"headerlink\" title=\"数据库工具\"></a>数据库工具</h1><h2 id=\"PL-SQL-developer-12-0-注册码\"><a href=\"#PL-SQL-developer-12-0-注册码\" class=\"headerlink\" title=\"PL/SQL developer 12.0 注册码\"></a>PL/SQL developer 12.0 注册码</h2><ul>\n<li>LicenseNumber : 999</li>\n<li>productCode ： 46jvnzf74ysf3mqm4hx4tvhcamh8gpe3v5</li>\n<li>SeriesNumber：706090</li>\n<li>password：xs374ca</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据库工具\"><a href=\"#数据库工具\" class=\"headerlink\" title=\"数据库工具\"></a>数据库工具</h1><h2 id=\"PL-SQL-developer-12-0-注册码\"><a href=\"#PL-SQL-developer-12-0-注册码\" class=\"headerlink\" title=\"PL/SQL developer 12.0 注册码\"></a>PL/SQL developer 12.0 注册码</h2><ul>\n<li>LicenseNumber : 999</li>\n<li>productCode ： 46jvnzf74ysf3mqm4hx4tvhcamh8gpe3v5</li>\n<li>SeriesNumber：706090</li>\n<li>password：xs374ca</li>\n</ul>\n"},{"title":"Docker Swarm","date":"2017-11-14T08:13:57.000Z","type":"post","_content":"\n# Docker Swarm\n\n> A swarm is a group of machines that are running Docker and joined into a cluster. After that has happened, you continue to run the Docker commands you’re used to, but now they are executed on a cluster by a `swarm manager`. The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as `nodes`.\n\n## Swarm是什么\n\n> 通过把多个Docker Engine聚集在一起，形成一个大的docker-engine，对外提供容器的集群服务。同时这个集群对外提供Swarm API，用户可以像使用Docker Engine一样使用Docker集群。\n\n![docker searm](Docker Swarm/docker searm.jpg)\n\n## Swarm 特点\n\n1. 对外以Docker API接口呈现，这样带来的好处是，如果现有系统使用Docker Engine，则可以平滑将Docker Engine切到Swarm上，无需改动现有系统。\n2. Swarm对用户来说，之前使用Docker的经验可以继承过来。非常容易上手，学习成本和二次开发成本都比较低。同时Swarm本身专注于Docker集群管理，非常轻量，占用资源也非常少。\n3. `Batteries included but swappable`，简单说，就是插件化机制，Swarm中的各个模块都抽象出了API，可以根据自己一些特点进行定制实现。\n4. Swarm自身对Docker命令参数支持的比较完善，Swarm目前与Docker是同步发布的。Docker的新功能，都会第一时间在Swarm中体现。\n\n***\n\n## Swarm框架结构\n\n![swarm架构](Docker Swarm/swarm架构.jpg)\n\n* Swarm对外提供两种API， 一种是Docker API，用于负责容器镜像的生命周期管理， 另外一种是Swarm集群管理CLI，用于集群理。\n* Scheduler模块，主要实现调度功能。在通过Swarm创建容器时，会经过Scheduler模块选择出一个最优节点，里面包含了两个子模块，分别是Filter和Strategy， Filter用来过滤节点，找出满足条件的节点（比如资源足够，节点正常等等），Strategy用来在过滤出的节点中根据策略选择一个最优的节点（比如对找出的节点进行对比，找到资源最多的节点等等）, 当然Filter/Strategy用户可以定制。\n* Swarm对集群进行了抽象，抽象出了Cluster API，Swarm支持两种集群，一种是Swarm自身的集群，另外一种基于Mesos的集群。\n* LeaderShip模块用于Swarm Manager自身的HA，通过主备方式实现。\n* Discovery Service 服务发现模块，这个模块主要用来提供节点发现功能。\n* 在每一个节点上，都会有一个Agent，用于连接Discovery Service，上报Docker Daemon的IP端口信息，Swarm Manager会直接从服务发现模块中读取节点信息。\n\n***\n\n## 创建群集 (docker for windows)\n\n>本案例用的是 win10 的 `hyper-V` 功能\n> mac,linux,windows7/8 参考官网: https://docs.docker.com/get-started/part4/#understanding-swarm-clusters\n\n### 利用 `hyper-v` 在你的机器上创建两个docker 环境\n\n1. 启用 `Hyper-V` 管理器\n2. 点击虚拟交换机管理,创建一个 `外部` 类型的虚拟交换机\n3. 给你的虚拟交换机取名 `myswitch`\n4. create a couple of VMs using our node management tool,`docker-machine`\n5. 发现下载 `boot2docker.iso` 失败或者超时, 可到这个地址下载 `https://github.com/boot2docker/boot2docker/releases/download/v17.06.2-ce/boot2docker.iso` 然后将它放在你的 个人资源管理器 `\\.docker\\machine\\cache`, 例如我的: `C:\\Users\\carzy\\.docker\\machine\\cache`\n\n```bash\n  docker-machine create -d hyperv --hyperv-virtual-switch \"myswitch\" myvm1\n  docker-machine create -d hyperv --hyperv-virtual-switch \"myswitch\" myvm2\n  # 此过程很慢\n```\n\n### 查看刚刚创建的虚拟docker列表和IP\n\n```bash\ndocker-machine ls `\nNAME    ACTIVE   DRIVER   STATE     URL                         SWARM   DOCKER\nmyvm1   -        hyperv   Running   tcp://192.168.68.116:2376           v17.06.2-ce\nmyvm2   -        hyperv   Running   tcp://192.168.68.114:2376           v17.06.2-ce\n```\n\n<!-- ![zdtl0fg1ks9ejyvi](\\:storage\\zdtl0fg1ks9ejyvi.png) -->\n\n### 启动群集添加节点\n\n> 第一台机器将作为 `manager` ，执行管理指令和认证人员加入群，和第二将作为 `worker`\n\n* `docker-machine ssh` 登录你的第一个 VM, 并将 `myvm1` 指定为 `manager` : `docker swarm init`\n\n```bash\ndocker-machine ssh myvm1 \"docker swarm init --advertise-addr <myvm1 ip>\"\n\ndocker@myvm1:~$ docker swarm init\nSwarm initialized: current node (pdi85vh4w3p5243qgiiaoz6cn) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join --token SWMTKN-1-3r3xispwm7cbu0k8orry0k9dyn7if9agk2gkwrxilefrh5jfmu-3qzklzdzedh5yxinsi9q77xqt 192.168.68.116:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```\n\n![docker-mechine](Docker Swarm/docker-mechine.png)\n\n> **端口2377和2376**\n> 始终运行 `docker swarm init`和 `docker swarm join` 端口2377（群组管理端口），或使其为默认值。\n> 返回的机器IP地址 `docker-machine ls` 包括端口2376，它是Docker守护程序端口。不要使用这个端口，否则 可能会遇> 到错误。\n\n* 响应 `docker swarm init`包含预先配置的 `docker swarm join`命令(上条docker swarm init 提示的 `token`)，以便您在要添加的任何节点上运行。复制此命令，并将其发送到myvm2, `docker-machine ssh` 让myvm2 加入您的新群组作为`worker`\n\n```bash\ndocker swarm join --token SWMTKN-1-3r3xispwm7cbu0k8orry0k9dyn7if9agk2gkwrxilefrh5jfmu-3qzklzdzedh5yxinsi9q77xqt 192.168.68.116:2377\n\nThis node joined a swarm as a worker.\n```\n\n* `docker node ls` 在管理器上运行以查看此群组中的节点\n\n```bash\nPS E:\\dockerWork\\demo1> docker-machine ssh myvm1 \"docker node ls\"\nID                            HOSTNAME            STATUS              AVAILABILITY          MANAGER STATUS\npdi85vh4w3p5243qgiiaoz6cn *           myvm1               Ready               Active              Leader\ntra1o8vdg9y4z16uv0nl731y8            myvm2               Ready               Active\n```\n\n>`离开群`\n> 如果要重新开始，可以从每个节点运行 `docker swarm leave`\n\n***\n\n### 部署应用\n\n#### 将docker-machineshell 配置为群组管理器\n\n> 到目前为止，已经将Docker的commmands包装在 `docker-machine ssh`与VM进行通话。另一个选项是运行 `docker-machine env <machine>` 以获取并运行一个配置当前shell的命令来与虚拟机上的 `Docker守护程序` 通信。它允许使用本地docker-compose.yml文件“远程”部署应用程序，而无需将其复制到任何位置。\n* Run `docker-machine env myvm1` to get the command to configure your shell to talk to myvm1.\n* Run the given command to configure your shell to talk to myvm1\n* Run `docker-machine ls` to verify that myvm1 is the active machine as indicated by `*` next to it\n\n<!-- ![o7iuh7wvy10885mi](\\:storage\\o7iuh7wvy10885mi.png) -->\n\n#### 开始部署\n\n* 现在你有我的myvm1，你可以使用`myvm1` 的权力作为一个群组管理器来部署您的应用程序，使用 `docker stack deploy` 命令，运行 `docker-stack.yml`.\n\n```bash\n  docker stack deploy -c docker-compose.yml test\n```\n\n#### 检测\n\n* `docker service ps test` 可以看到5个容器，分别运行在 myvm1 和 myvm2 上\n* 通过浏览器访问任意一个 ip 的，都可以看见 5 个 不同的 ID\n* IP地址工作的原因是群集中的 `nodes` 加入 ` ingress network routing mesh` 。这样可以确保在群集中某个端口部署的服务始终将该端口保留给其自身，无论实际运行的是哪个节点。以下是在三节点群集my-web端口8080上发布的服务的路由网格如何显示：\n  ![network](Docker Swarm/network.png)\n\n> **连通问题**\n> 为了在群集中使用入口网络 `ingress network` ，在启用群组模式之前，需要在群集节点之间打开以下端口\n> * 端口7946 TCP / UDP用于容器网络发现。\n> * 端口4789 UDP用于容器入口网络.\n\n### 迭代和缩放您的应用程序\n\n  1. 通过更改docker-compose.yml文件来缩放应用程序\n  2. 通过编辑代码来更改应用程序行为\n    * 在这两种情况下，只需 `docker stack deploy` 再次运行以部署这些更改.\n    * 您可以使用与 `docker swarm join` 您使用的相同的命令将任何物理或虚拟机加入此群集 `myvm2` ，并将容量添加到群集中。`docker stack deploy` 运行后，您的应用程序将利用新的资源。\n\n### 清理\n\n使用 `docker stack rm` 进行清理所有这个stack\n> *Keep the swarm or remove it*\n> `docker-machine ssh myvm2 \"docker swarm leave\"` 将 myvm2  从swarm的 `worker` 中移除\n> `docker-machine ssh myvm1 \"docker swarm leave --force` myvm1 从 swarm的 `manager` 中移除","source":"_posts/docker/Docker Swarm.md","raw":"---\ntitle: Docker Swarm\ndate: 2017-11-14 16:13:57\ntype: post\ntags: \n    - docker\ncategories: docker\n---\n\n# Docker Swarm\n\n> A swarm is a group of machines that are running Docker and joined into a cluster. After that has happened, you continue to run the Docker commands you’re used to, but now they are executed on a cluster by a `swarm manager`. The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as `nodes`.\n\n## Swarm是什么\n\n> 通过把多个Docker Engine聚集在一起，形成一个大的docker-engine，对外提供容器的集群服务。同时这个集群对外提供Swarm API，用户可以像使用Docker Engine一样使用Docker集群。\n\n![docker searm](Docker Swarm/docker searm.jpg)\n\n## Swarm 特点\n\n1. 对外以Docker API接口呈现，这样带来的好处是，如果现有系统使用Docker Engine，则可以平滑将Docker Engine切到Swarm上，无需改动现有系统。\n2. Swarm对用户来说，之前使用Docker的经验可以继承过来。非常容易上手，学习成本和二次开发成本都比较低。同时Swarm本身专注于Docker集群管理，非常轻量，占用资源也非常少。\n3. `Batteries included but swappable`，简单说，就是插件化机制，Swarm中的各个模块都抽象出了API，可以根据自己一些特点进行定制实现。\n4. Swarm自身对Docker命令参数支持的比较完善，Swarm目前与Docker是同步发布的。Docker的新功能，都会第一时间在Swarm中体现。\n\n***\n\n## Swarm框架结构\n\n![swarm架构](Docker Swarm/swarm架构.jpg)\n\n* Swarm对外提供两种API， 一种是Docker API，用于负责容器镜像的生命周期管理， 另外一种是Swarm集群管理CLI，用于集群理。\n* Scheduler模块，主要实现调度功能。在通过Swarm创建容器时，会经过Scheduler模块选择出一个最优节点，里面包含了两个子模块，分别是Filter和Strategy， Filter用来过滤节点，找出满足条件的节点（比如资源足够，节点正常等等），Strategy用来在过滤出的节点中根据策略选择一个最优的节点（比如对找出的节点进行对比，找到资源最多的节点等等）, 当然Filter/Strategy用户可以定制。\n* Swarm对集群进行了抽象，抽象出了Cluster API，Swarm支持两种集群，一种是Swarm自身的集群，另外一种基于Mesos的集群。\n* LeaderShip模块用于Swarm Manager自身的HA，通过主备方式实现。\n* Discovery Service 服务发现模块，这个模块主要用来提供节点发现功能。\n* 在每一个节点上，都会有一个Agent，用于连接Discovery Service，上报Docker Daemon的IP端口信息，Swarm Manager会直接从服务发现模块中读取节点信息。\n\n***\n\n## 创建群集 (docker for windows)\n\n>本案例用的是 win10 的 `hyper-V` 功能\n> mac,linux,windows7/8 参考官网: https://docs.docker.com/get-started/part4/#understanding-swarm-clusters\n\n### 利用 `hyper-v` 在你的机器上创建两个docker 环境\n\n1. 启用 `Hyper-V` 管理器\n2. 点击虚拟交换机管理,创建一个 `外部` 类型的虚拟交换机\n3. 给你的虚拟交换机取名 `myswitch`\n4. create a couple of VMs using our node management tool,`docker-machine`\n5. 发现下载 `boot2docker.iso` 失败或者超时, 可到这个地址下载 `https://github.com/boot2docker/boot2docker/releases/download/v17.06.2-ce/boot2docker.iso` 然后将它放在你的 个人资源管理器 `\\.docker\\machine\\cache`, 例如我的: `C:\\Users\\carzy\\.docker\\machine\\cache`\n\n```bash\n  docker-machine create -d hyperv --hyperv-virtual-switch \"myswitch\" myvm1\n  docker-machine create -d hyperv --hyperv-virtual-switch \"myswitch\" myvm2\n  # 此过程很慢\n```\n\n### 查看刚刚创建的虚拟docker列表和IP\n\n```bash\ndocker-machine ls `\nNAME    ACTIVE   DRIVER   STATE     URL                         SWARM   DOCKER\nmyvm1   -        hyperv   Running   tcp://192.168.68.116:2376           v17.06.2-ce\nmyvm2   -        hyperv   Running   tcp://192.168.68.114:2376           v17.06.2-ce\n```\n\n<!-- ![zdtl0fg1ks9ejyvi](\\:storage\\zdtl0fg1ks9ejyvi.png) -->\n\n### 启动群集添加节点\n\n> 第一台机器将作为 `manager` ，执行管理指令和认证人员加入群，和第二将作为 `worker`\n\n* `docker-machine ssh` 登录你的第一个 VM, 并将 `myvm1` 指定为 `manager` : `docker swarm init`\n\n```bash\ndocker-machine ssh myvm1 \"docker swarm init --advertise-addr <myvm1 ip>\"\n\ndocker@myvm1:~$ docker swarm init\nSwarm initialized: current node (pdi85vh4w3p5243qgiiaoz6cn) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join --token SWMTKN-1-3r3xispwm7cbu0k8orry0k9dyn7if9agk2gkwrxilefrh5jfmu-3qzklzdzedh5yxinsi9q77xqt 192.168.68.116:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```\n\n![docker-mechine](Docker Swarm/docker-mechine.png)\n\n> **端口2377和2376**\n> 始终运行 `docker swarm init`和 `docker swarm join` 端口2377（群组管理端口），或使其为默认值。\n> 返回的机器IP地址 `docker-machine ls` 包括端口2376，它是Docker守护程序端口。不要使用这个端口，否则 可能会遇> 到错误。\n\n* 响应 `docker swarm init`包含预先配置的 `docker swarm join`命令(上条docker swarm init 提示的 `token`)，以便您在要添加的任何节点上运行。复制此命令，并将其发送到myvm2, `docker-machine ssh` 让myvm2 加入您的新群组作为`worker`\n\n```bash\ndocker swarm join --token SWMTKN-1-3r3xispwm7cbu0k8orry0k9dyn7if9agk2gkwrxilefrh5jfmu-3qzklzdzedh5yxinsi9q77xqt 192.168.68.116:2377\n\nThis node joined a swarm as a worker.\n```\n\n* `docker node ls` 在管理器上运行以查看此群组中的节点\n\n```bash\nPS E:\\dockerWork\\demo1> docker-machine ssh myvm1 \"docker node ls\"\nID                            HOSTNAME            STATUS              AVAILABILITY          MANAGER STATUS\npdi85vh4w3p5243qgiiaoz6cn *           myvm1               Ready               Active              Leader\ntra1o8vdg9y4z16uv0nl731y8            myvm2               Ready               Active\n```\n\n>`离开群`\n> 如果要重新开始，可以从每个节点运行 `docker swarm leave`\n\n***\n\n### 部署应用\n\n#### 将docker-machineshell 配置为群组管理器\n\n> 到目前为止，已经将Docker的commmands包装在 `docker-machine ssh`与VM进行通话。另一个选项是运行 `docker-machine env <machine>` 以获取并运行一个配置当前shell的命令来与虚拟机上的 `Docker守护程序` 通信。它允许使用本地docker-compose.yml文件“远程”部署应用程序，而无需将其复制到任何位置。\n* Run `docker-machine env myvm1` to get the command to configure your shell to talk to myvm1.\n* Run the given command to configure your shell to talk to myvm1\n* Run `docker-machine ls` to verify that myvm1 is the active machine as indicated by `*` next to it\n\n<!-- ![o7iuh7wvy10885mi](\\:storage\\o7iuh7wvy10885mi.png) -->\n\n#### 开始部署\n\n* 现在你有我的myvm1，你可以使用`myvm1` 的权力作为一个群组管理器来部署您的应用程序，使用 `docker stack deploy` 命令，运行 `docker-stack.yml`.\n\n```bash\n  docker stack deploy -c docker-compose.yml test\n```\n\n#### 检测\n\n* `docker service ps test` 可以看到5个容器，分别运行在 myvm1 和 myvm2 上\n* 通过浏览器访问任意一个 ip 的，都可以看见 5 个 不同的 ID\n* IP地址工作的原因是群集中的 `nodes` 加入 ` ingress network routing mesh` 。这样可以确保在群集中某个端口部署的服务始终将该端口保留给其自身，无论实际运行的是哪个节点。以下是在三节点群集my-web端口8080上发布的服务的路由网格如何显示：\n  ![network](Docker Swarm/network.png)\n\n> **连通问题**\n> 为了在群集中使用入口网络 `ingress network` ，在启用群组模式之前，需要在群集节点之间打开以下端口\n> * 端口7946 TCP / UDP用于容器网络发现。\n> * 端口4789 UDP用于容器入口网络.\n\n### 迭代和缩放您的应用程序\n\n  1. 通过更改docker-compose.yml文件来缩放应用程序\n  2. 通过编辑代码来更改应用程序行为\n    * 在这两种情况下，只需 `docker stack deploy` 再次运行以部署这些更改.\n    * 您可以使用与 `docker swarm join` 您使用的相同的命令将任何物理或虚拟机加入此群集 `myvm2` ，并将容量添加到群集中。`docker stack deploy` 运行后，您的应用程序将利用新的资源。\n\n### 清理\n\n使用 `docker stack rm` 进行清理所有这个stack\n> *Keep the swarm or remove it*\n> `docker-machine ssh myvm2 \"docker swarm leave\"` 将 myvm2  从swarm的 `worker` 中移除\n> `docker-machine ssh myvm1 \"docker swarm leave --force` myvm1 从 swarm的 `manager` 中移除","slug":"docker/Docker Swarm","published":1,"updated":"2018-11-16T03:26:15.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonx65s6000ci8uso8yfsmwm","content":"<h1 id=\"Docker-Swarm\"><a href=\"#Docker-Swarm\" class=\"headerlink\" title=\"Docker Swarm\"></a>Docker Swarm</h1><blockquote>\n<p>A swarm is a group of machines that are running Docker and joined into a cluster. After that has happened, you continue to run the Docker commands you’re used to, but now they are executed on a cluster by a <code>swarm manager</code>. The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as <code>nodes</code>.</p>\n</blockquote>\n<h2 id=\"Swarm是什么\"><a href=\"#Swarm是什么\" class=\"headerlink\" title=\"Swarm是什么\"></a>Swarm是什么</h2><blockquote>\n<p>通过把多个Docker Engine聚集在一起，形成一个大的docker-engine，对外提供容器的集群服务。同时这个集群对外提供Swarm API，用户可以像使用Docker Engine一样使用Docker集群。</p>\n</blockquote>\n<p><img src=\"/2017/11/14/docker/Docker Swarm/docker searm.jpg\" alt=\"docker searm\"></p>\n<h2 id=\"Swarm-特点\"><a href=\"#Swarm-特点\" class=\"headerlink\" title=\"Swarm 特点\"></a>Swarm 特点</h2><ol>\n<li>对外以Docker API接口呈现，这样带来的好处是，如果现有系统使用Docker Engine，则可以平滑将Docker Engine切到Swarm上，无需改动现有系统。</li>\n<li>Swarm对用户来说，之前使用Docker的经验可以继承过来。非常容易上手，学习成本和二次开发成本都比较低。同时Swarm本身专注于Docker集群管理，非常轻量，占用资源也非常少。</li>\n<li><code>Batteries included but swappable</code>，简单说，就是插件化机制，Swarm中的各个模块都抽象出了API，可以根据自己一些特点进行定制实现。</li>\n<li>Swarm自身对Docker命令参数支持的比较完善，Swarm目前与Docker是同步发布的。Docker的新功能，都会第一时间在Swarm中体现。</li>\n</ol>\n<hr>\n<h2 id=\"Swarm框架结构\"><a href=\"#Swarm框架结构\" class=\"headerlink\" title=\"Swarm框架结构\"></a>Swarm框架结构</h2><p><img src=\"/2017/11/14/docker/Docker Swarm/swarm架构.jpg\" alt=\"swarm架构\"></p>\n<ul>\n<li>Swarm对外提供两种API， 一种是Docker API，用于负责容器镜像的生命周期管理， 另外一种是Swarm集群管理CLI，用于集群理。</li>\n<li>Scheduler模块，主要实现调度功能。在通过Swarm创建容器时，会经过Scheduler模块选择出一个最优节点，里面包含了两个子模块，分别是Filter和Strategy， Filter用来过滤节点，找出满足条件的节点（比如资源足够，节点正常等等），Strategy用来在过滤出的节点中根据策略选择一个最优的节点（比如对找出的节点进行对比，找到资源最多的节点等等）, 当然Filter/Strategy用户可以定制。</li>\n<li>Swarm对集群进行了抽象，抽象出了Cluster API，Swarm支持两种集群，一种是Swarm自身的集群，另外一种基于Mesos的集群。</li>\n<li>LeaderShip模块用于Swarm Manager自身的HA，通过主备方式实现。</li>\n<li>Discovery Service 服务发现模块，这个模块主要用来提供节点发现功能。</li>\n<li>在每一个节点上，都会有一个Agent，用于连接Discovery Service，上报Docker Daemon的IP端口信息，Swarm Manager会直接从服务发现模块中读取节点信息。</li>\n</ul>\n<hr>\n<h2 id=\"创建群集-docker-for-windows\"><a href=\"#创建群集-docker-for-windows\" class=\"headerlink\" title=\"创建群集 (docker for windows)\"></a>创建群集 (docker for windows)</h2><blockquote>\n<p>本案例用的是 win10 的 <code>hyper-V</code> 功能<br>mac,linux,windows7/8 参考官网: <a href=\"https://docs.docker.com/get-started/part4/#understanding-swarm-clusters\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/get-started/part4/#understanding-swarm-clusters</a></p>\n</blockquote>\n<h3 id=\"利用-hyper-v-在你的机器上创建两个docker-环境\"><a href=\"#利用-hyper-v-在你的机器上创建两个docker-环境\" class=\"headerlink\" title=\"利用 hyper-v 在你的机器上创建两个docker 环境\"></a>利用 <code>hyper-v</code> 在你的机器上创建两个docker 环境</h3><ol>\n<li>启用 <code>Hyper-V</code> 管理器</li>\n<li>点击虚拟交换机管理,创建一个 <code>外部</code> 类型的虚拟交换机</li>\n<li>给你的虚拟交换机取名 <code>myswitch</code></li>\n<li>create a couple of VMs using our node management tool,<code>docker-machine</code></li>\n<li>发现下载 <code>boot2docker.iso</code> 失败或者超时, 可到这个地址下载 <code>https://github.com/boot2docker/boot2docker/releases/download/v17.06.2-ce/boot2docker.iso</code> 然后将它放在你的 个人资源管理器 <code>\\.docker\\machine\\cache</code>, 例如我的: <code>C:\\Users\\carzy\\.docker\\machine\\cache</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine create -d hyperv --hyperv-virtual-switch <span class=\"string\">\"myswitch\"</span> myvm1</span><br><span class=\"line\">docker-machine create -d hyperv --hyperv-virtual-switch <span class=\"string\">\"myswitch\"</span> myvm2</span><br><span class=\"line\"><span class=\"comment\"># 此过程很慢</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看刚刚创建的虚拟docker列表和IP\"><a href=\"#查看刚刚创建的虚拟docker列表和IP\" class=\"headerlink\" title=\"查看刚刚创建的虚拟docker列表和IP\"></a>查看刚刚创建的虚拟docker列表和IP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine ls `</span><br><span class=\"line\">NAME    ACTIVE   DRIVER   STATE     URL                         SWARM   DOCKER</span><br><span class=\"line\">myvm1   -        hyperv   Running   tcp://192.168.68.116:2376           v17.06.2-ce</span><br><span class=\"line\">myvm2   -        hyperv   Running   tcp://192.168.68.114:2376           v17.06.2-ce</span><br></pre></td></tr></table></figure>\n<!-- ![zdtl0fg1ks9ejyvi](\\:storage\\zdtl0fg1ks9ejyvi.png) -->\n<h3 id=\"启动群集添加节点\"><a href=\"#启动群集添加节点\" class=\"headerlink\" title=\"启动群集添加节点\"></a>启动群集添加节点</h3><blockquote>\n<p>第一台机器将作为 <code>manager</code> ，执行管理指令和认证人员加入群，和第二将作为 <code>worker</code></p>\n</blockquote>\n<ul>\n<li><code>docker-machine ssh</code> 登录你的第一个 VM, 并将 <code>myvm1</code> 指定为 <code>manager</code> : <code>docker swarm init</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine ssh myvm1 <span class=\"string\">\"docker swarm init --advertise-addr &lt;myvm1 ip&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker@myvm1:~$ docker swarm init</span><br><span class=\"line\">Swarm initialized: current node (pdi85vh4w3p5243qgiiaoz6cn) is now a manager.</span><br><span class=\"line\"></span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm join --token SWMTKN-1-3r3xispwm7cbu0k8orry0k9dyn7if9agk2gkwrxilefrh5jfmu-3qzklzdzedh5yxinsi9q77xqt 192.168.68.116:2377</span><br><span class=\"line\"></span><br><span class=\"line\">To add a manager to this swarm, run <span class=\"string\">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/11/14/docker/Docker Swarm/docker-mechine.png\" alt=\"docker-mechine\"></p>\n<blockquote>\n<p><strong>端口2377和2376</strong><br>始终运行 <code>docker swarm init</code>和 <code>docker swarm join</code> 端口2377（群组管理端口），或使其为默认值。<br>返回的机器IP地址 <code>docker-machine ls</code> 包括端口2376，它是Docker守护程序端口。不要使用这个端口，否则 可能会遇&gt; 到错误。</p>\n</blockquote>\n<ul>\n<li>响应 <code>docker swarm init</code>包含预先配置的 <code>docker swarm join</code>命令(上条docker swarm init 提示的 <code>token</code>)，以便您在要添加的任何节点上运行。复制此命令，并将其发送到myvm2, <code>docker-machine ssh</code> 让myvm2 加入您的新群组作为<code>worker</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm join --token SWMTKN-1-3r3xispwm7cbu0k8orry0k9dyn7if9agk2gkwrxilefrh5jfmu-3qzklzdzedh5yxinsi9q77xqt 192.168.68.116:2377</span><br><span class=\"line\"></span><br><span class=\"line\">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>docker node ls</code> 在管理器上运行以查看此群组中的节点</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\dockerWork\\demo1&gt; docker-machine ssh myvm1 <span class=\"string\">\"docker node ls\"</span></span><br><span class=\"line\">ID                            HOSTNAME            STATUS              AVAILABILITY          MANAGER STATUS</span><br><span class=\"line\">pdi85vh4w3p5243qgiiaoz6cn *           myvm1               Ready               Active              Leader</span><br><span class=\"line\">tra1o8vdg9y4z16uv0nl731y8            myvm2               Ready               Active</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>离开群</code><br>如果要重新开始，可以从每个节点运行 <code>docker swarm leave</code></p>\n</blockquote>\n<hr>\n<h3 id=\"部署应用\"><a href=\"#部署应用\" class=\"headerlink\" title=\"部署应用\"></a>部署应用</h3><h4 id=\"将docker-machineshell-配置为群组管理器\"><a href=\"#将docker-machineshell-配置为群组管理器\" class=\"headerlink\" title=\"将docker-machineshell 配置为群组管理器\"></a>将docker-machineshell 配置为群组管理器</h4><blockquote>\n<p>到目前为止，已经将Docker的commmands包装在 <code>docker-machine ssh</code>与VM进行通话。另一个选项是运行 <code>docker-machine env &lt;machine&gt;</code> 以获取并运行一个配置当前shell的命令来与虚拟机上的 <code>Docker守护程序</code> 通信。它允许使用本地docker-compose.yml文件“远程”部署应用程序，而无需将其复制到任何位置。</p>\n<ul>\n<li>Run <code>docker-machine env myvm1</code> to get the command to configure your shell to talk to myvm1.</li>\n<li>Run the given command to configure your shell to talk to myvm1</li>\n<li>Run <code>docker-machine ls</code> to verify that myvm1 is the active machine as indicated by <code>*</code> next to it</li>\n</ul>\n</blockquote>\n<!-- ![o7iuh7wvy10885mi](\\:storage\\o7iuh7wvy10885mi.png) -->\n<h4 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h4><ul>\n<li>现在你有我的myvm1，你可以使用<code>myvm1</code> 的权力作为一个群组管理器来部署您的应用程序，使用 <code>docker stack deploy</code> 命令，运行 <code>docker-stack.yml</code>.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"检测\"><a href=\"#检测\" class=\"headerlink\" title=\"检测\"></a>检测</h4><ul>\n<li><code>docker service ps test</code> 可以看到5个容器，分别运行在 myvm1 和 myvm2 上</li>\n<li>通过浏览器访问任意一个 ip 的，都可以看见 5 个 不同的 ID</li>\n<li>IP地址工作的原因是群集中的 <code>nodes</code> 加入 <code>ingress network routing mesh</code> 。这样可以确保在群集中某个端口部署的服务始终将该端口保留给其自身，无论实际运行的是哪个节点。以下是在三节点群集my-web端口8080上发布的服务的路由网格如何显示：<br><img src=\"/2017/11/14/docker/Docker Swarm/network.png\" alt=\"network\"></li>\n</ul>\n<blockquote>\n<p><strong>连通问题</strong><br>为了在群集中使用入口网络 <code>ingress network</code> ，在启用群组模式之前，需要在群集节点之间打开以下端口</p>\n<ul>\n<li>端口7946 TCP / UDP用于容器网络发现。</li>\n<li>端口4789 UDP用于容器入口网络.</li>\n</ul>\n</blockquote>\n<h3 id=\"迭代和缩放您的应用程序\"><a href=\"#迭代和缩放您的应用程序\" class=\"headerlink\" title=\"迭代和缩放您的应用程序\"></a>迭代和缩放您的应用程序</h3><ol>\n<li>通过更改docker-compose.yml文件来缩放应用程序</li>\n<li>通过编辑代码来更改应用程序行为<ul>\n<li>在这两种情况下，只需 <code>docker stack deploy</code> 再次运行以部署这些更改.</li>\n<li>您可以使用与 <code>docker swarm join</code> 您使用的相同的命令将任何物理或虚拟机加入此群集 <code>myvm2</code> ，并将容量添加到群集中。<code>docker stack deploy</code> 运行后，您的应用程序将利用新的资源。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"清理\"><a href=\"#清理\" class=\"headerlink\" title=\"清理\"></a>清理</h3><p>使用 <code>docker stack rm</code> 进行清理所有这个stack</p>\n<blockquote>\n<p><em>Keep the swarm or remove it</em><br><code>docker-machine ssh myvm2 &quot;docker swarm leave&quot;</code> 将 myvm2  从swarm的 <code>worker</code> 中移除<br><code>docker-machine ssh myvm1 &quot;docker swarm leave --force</code> myvm1 从 swarm的 <code>manager</code> 中移除</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker-Swarm\"><a href=\"#Docker-Swarm\" class=\"headerlink\" title=\"Docker Swarm\"></a>Docker Swarm</h1><blockquote>\n<p>A swarm is a group of machines that are running Docker and joined into a cluster. After that has happened, you continue to run the Docker commands you’re used to, but now they are executed on a cluster by a <code>swarm manager</code>. The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as <code>nodes</code>.</p>\n</blockquote>\n<h2 id=\"Swarm是什么\"><a href=\"#Swarm是什么\" class=\"headerlink\" title=\"Swarm是什么\"></a>Swarm是什么</h2><blockquote>\n<p>通过把多个Docker Engine聚集在一起，形成一个大的docker-engine，对外提供容器的集群服务。同时这个集群对外提供Swarm API，用户可以像使用Docker Engine一样使用Docker集群。</p>\n</blockquote>\n<p><img src=\"/2017/11/14/docker/Docker Swarm/docker searm.jpg\" alt=\"docker searm\"></p>\n<h2 id=\"Swarm-特点\"><a href=\"#Swarm-特点\" class=\"headerlink\" title=\"Swarm 特点\"></a>Swarm 特点</h2><ol>\n<li>对外以Docker API接口呈现，这样带来的好处是，如果现有系统使用Docker Engine，则可以平滑将Docker Engine切到Swarm上，无需改动现有系统。</li>\n<li>Swarm对用户来说，之前使用Docker的经验可以继承过来。非常容易上手，学习成本和二次开发成本都比较低。同时Swarm本身专注于Docker集群管理，非常轻量，占用资源也非常少。</li>\n<li><code>Batteries included but swappable</code>，简单说，就是插件化机制，Swarm中的各个模块都抽象出了API，可以根据自己一些特点进行定制实现。</li>\n<li>Swarm自身对Docker命令参数支持的比较完善，Swarm目前与Docker是同步发布的。Docker的新功能，都会第一时间在Swarm中体现。</li>\n</ol>\n<hr>\n<h2 id=\"Swarm框架结构\"><a href=\"#Swarm框架结构\" class=\"headerlink\" title=\"Swarm框架结构\"></a>Swarm框架结构</h2><p><img src=\"/2017/11/14/docker/Docker Swarm/swarm架构.jpg\" alt=\"swarm架构\"></p>\n<ul>\n<li>Swarm对外提供两种API， 一种是Docker API，用于负责容器镜像的生命周期管理， 另外一种是Swarm集群管理CLI，用于集群理。</li>\n<li>Scheduler模块，主要实现调度功能。在通过Swarm创建容器时，会经过Scheduler模块选择出一个最优节点，里面包含了两个子模块，分别是Filter和Strategy， Filter用来过滤节点，找出满足条件的节点（比如资源足够，节点正常等等），Strategy用来在过滤出的节点中根据策略选择一个最优的节点（比如对找出的节点进行对比，找到资源最多的节点等等）, 当然Filter/Strategy用户可以定制。</li>\n<li>Swarm对集群进行了抽象，抽象出了Cluster API，Swarm支持两种集群，一种是Swarm自身的集群，另外一种基于Mesos的集群。</li>\n<li>LeaderShip模块用于Swarm Manager自身的HA，通过主备方式实现。</li>\n<li>Discovery Service 服务发现模块，这个模块主要用来提供节点发现功能。</li>\n<li>在每一个节点上，都会有一个Agent，用于连接Discovery Service，上报Docker Daemon的IP端口信息，Swarm Manager会直接从服务发现模块中读取节点信息。</li>\n</ul>\n<hr>\n<h2 id=\"创建群集-docker-for-windows\"><a href=\"#创建群集-docker-for-windows\" class=\"headerlink\" title=\"创建群集 (docker for windows)\"></a>创建群集 (docker for windows)</h2><blockquote>\n<p>本案例用的是 win10 的 <code>hyper-V</code> 功能<br>mac,linux,windows7/8 参考官网: <a href=\"https://docs.docker.com/get-started/part4/#understanding-swarm-clusters\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/get-started/part4/#understanding-swarm-clusters</a></p>\n</blockquote>\n<h3 id=\"利用-hyper-v-在你的机器上创建两个docker-环境\"><a href=\"#利用-hyper-v-在你的机器上创建两个docker-环境\" class=\"headerlink\" title=\"利用 hyper-v 在你的机器上创建两个docker 环境\"></a>利用 <code>hyper-v</code> 在你的机器上创建两个docker 环境</h3><ol>\n<li>启用 <code>Hyper-V</code> 管理器</li>\n<li>点击虚拟交换机管理,创建一个 <code>外部</code> 类型的虚拟交换机</li>\n<li>给你的虚拟交换机取名 <code>myswitch</code></li>\n<li>create a couple of VMs using our node management tool,<code>docker-machine</code></li>\n<li>发现下载 <code>boot2docker.iso</code> 失败或者超时, 可到这个地址下载 <code>https://github.com/boot2docker/boot2docker/releases/download/v17.06.2-ce/boot2docker.iso</code> 然后将它放在你的 个人资源管理器 <code>\\.docker\\machine\\cache</code>, 例如我的: <code>C:\\Users\\carzy\\.docker\\machine\\cache</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine create -d hyperv --hyperv-virtual-switch <span class=\"string\">\"myswitch\"</span> myvm1</span><br><span class=\"line\">docker-machine create -d hyperv --hyperv-virtual-switch <span class=\"string\">\"myswitch\"</span> myvm2</span><br><span class=\"line\"><span class=\"comment\"># 此过程很慢</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看刚刚创建的虚拟docker列表和IP\"><a href=\"#查看刚刚创建的虚拟docker列表和IP\" class=\"headerlink\" title=\"查看刚刚创建的虚拟docker列表和IP\"></a>查看刚刚创建的虚拟docker列表和IP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine ls `</span><br><span class=\"line\">NAME    ACTIVE   DRIVER   STATE     URL                         SWARM   DOCKER</span><br><span class=\"line\">myvm1   -        hyperv   Running   tcp://192.168.68.116:2376           v17.06.2-ce</span><br><span class=\"line\">myvm2   -        hyperv   Running   tcp://192.168.68.114:2376           v17.06.2-ce</span><br></pre></td></tr></table></figure>\n<!-- ![zdtl0fg1ks9ejyvi](\\:storage\\zdtl0fg1ks9ejyvi.png) -->\n<h3 id=\"启动群集添加节点\"><a href=\"#启动群集添加节点\" class=\"headerlink\" title=\"启动群集添加节点\"></a>启动群集添加节点</h3><blockquote>\n<p>第一台机器将作为 <code>manager</code> ，执行管理指令和认证人员加入群，和第二将作为 <code>worker</code></p>\n</blockquote>\n<ul>\n<li><code>docker-machine ssh</code> 登录你的第一个 VM, 并将 <code>myvm1</code> 指定为 <code>manager</code> : <code>docker swarm init</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine ssh myvm1 <span class=\"string\">\"docker swarm init --advertise-addr &lt;myvm1 ip&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker@myvm1:~$ docker swarm init</span><br><span class=\"line\">Swarm initialized: current node (pdi85vh4w3p5243qgiiaoz6cn) is now a manager.</span><br><span class=\"line\"></span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm join --token SWMTKN-1-3r3xispwm7cbu0k8orry0k9dyn7if9agk2gkwrxilefrh5jfmu-3qzklzdzedh5yxinsi9q77xqt 192.168.68.116:2377</span><br><span class=\"line\"></span><br><span class=\"line\">To add a manager to this swarm, run <span class=\"string\">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/11/14/docker/Docker Swarm/docker-mechine.png\" alt=\"docker-mechine\"></p>\n<blockquote>\n<p><strong>端口2377和2376</strong><br>始终运行 <code>docker swarm init</code>和 <code>docker swarm join</code> 端口2377（群组管理端口），或使其为默认值。<br>返回的机器IP地址 <code>docker-machine ls</code> 包括端口2376，它是Docker守护程序端口。不要使用这个端口，否则 可能会遇&gt; 到错误。</p>\n</blockquote>\n<ul>\n<li>响应 <code>docker swarm init</code>包含预先配置的 <code>docker swarm join</code>命令(上条docker swarm init 提示的 <code>token</code>)，以便您在要添加的任何节点上运行。复制此命令，并将其发送到myvm2, <code>docker-machine ssh</code> 让myvm2 加入您的新群组作为<code>worker</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm join --token SWMTKN-1-3r3xispwm7cbu0k8orry0k9dyn7if9agk2gkwrxilefrh5jfmu-3qzklzdzedh5yxinsi9q77xqt 192.168.68.116:2377</span><br><span class=\"line\"></span><br><span class=\"line\">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>docker node ls</code> 在管理器上运行以查看此群组中的节点</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\dockerWork\\demo1&gt; docker-machine ssh myvm1 <span class=\"string\">\"docker node ls\"</span></span><br><span class=\"line\">ID                            HOSTNAME            STATUS              AVAILABILITY          MANAGER STATUS</span><br><span class=\"line\">pdi85vh4w3p5243qgiiaoz6cn *           myvm1               Ready               Active              Leader</span><br><span class=\"line\">tra1o8vdg9y4z16uv0nl731y8            myvm2               Ready               Active</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>离开群</code><br>如果要重新开始，可以从每个节点运行 <code>docker swarm leave</code></p>\n</blockquote>\n<hr>\n<h3 id=\"部署应用\"><a href=\"#部署应用\" class=\"headerlink\" title=\"部署应用\"></a>部署应用</h3><h4 id=\"将docker-machineshell-配置为群组管理器\"><a href=\"#将docker-machineshell-配置为群组管理器\" class=\"headerlink\" title=\"将docker-machineshell 配置为群组管理器\"></a>将docker-machineshell 配置为群组管理器</h4><blockquote>\n<p>到目前为止，已经将Docker的commmands包装在 <code>docker-machine ssh</code>与VM进行通话。另一个选项是运行 <code>docker-machine env &lt;machine&gt;</code> 以获取并运行一个配置当前shell的命令来与虚拟机上的 <code>Docker守护程序</code> 通信。它允许使用本地docker-compose.yml文件“远程”部署应用程序，而无需将其复制到任何位置。</p>\n<ul>\n<li>Run <code>docker-machine env myvm1</code> to get the command to configure your shell to talk to myvm1.</li>\n<li>Run the given command to configure your shell to talk to myvm1</li>\n<li>Run <code>docker-machine ls</code> to verify that myvm1 is the active machine as indicated by <code>*</code> next to it</li>\n</ul>\n</blockquote>\n<!-- ![o7iuh7wvy10885mi](\\:storage\\o7iuh7wvy10885mi.png) -->\n<h4 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h4><ul>\n<li>现在你有我的myvm1，你可以使用<code>myvm1</code> 的权力作为一个群组管理器来部署您的应用程序，使用 <code>docker stack deploy</code> 命令，运行 <code>docker-stack.yml</code>.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"检测\"><a href=\"#检测\" class=\"headerlink\" title=\"检测\"></a>检测</h4><ul>\n<li><code>docker service ps test</code> 可以看到5个容器，分别运行在 myvm1 和 myvm2 上</li>\n<li>通过浏览器访问任意一个 ip 的，都可以看见 5 个 不同的 ID</li>\n<li>IP地址工作的原因是群集中的 <code>nodes</code> 加入 <code>ingress network routing mesh</code> 。这样可以确保在群集中某个端口部署的服务始终将该端口保留给其自身，无论实际运行的是哪个节点。以下是在三节点群集my-web端口8080上发布的服务的路由网格如何显示：<br><img src=\"/2017/11/14/docker/Docker Swarm/network.png\" alt=\"network\"></li>\n</ul>\n<blockquote>\n<p><strong>连通问题</strong><br>为了在群集中使用入口网络 <code>ingress network</code> ，在启用群组模式之前，需要在群集节点之间打开以下端口</p>\n<ul>\n<li>端口7946 TCP / UDP用于容器网络发现。</li>\n<li>端口4789 UDP用于容器入口网络.</li>\n</ul>\n</blockquote>\n<h3 id=\"迭代和缩放您的应用程序\"><a href=\"#迭代和缩放您的应用程序\" class=\"headerlink\" title=\"迭代和缩放您的应用程序\"></a>迭代和缩放您的应用程序</h3><ol>\n<li>通过更改docker-compose.yml文件来缩放应用程序</li>\n<li>通过编辑代码来更改应用程序行为<ul>\n<li>在这两种情况下，只需 <code>docker stack deploy</code> 再次运行以部署这些更改.</li>\n<li>您可以使用与 <code>docker swarm join</code> 您使用的相同的命令将任何物理或虚拟机加入此群集 <code>myvm2</code> ，并将容量添加到群集中。<code>docker stack deploy</code> 运行后，您的应用程序将利用新的资源。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"清理\"><a href=\"#清理\" class=\"headerlink\" title=\"清理\"></a>清理</h3><p>使用 <code>docker stack rm</code> 进行清理所有这个stack</p>\n<blockquote>\n<p><em>Keep the swarm or remove it</em><br><code>docker-machine ssh myvm2 &quot;docker swarm leave&quot;</code> 将 myvm2  从swarm的 <code>worker</code> 中移除<br><code>docker-machine ssh myvm1 &quot;docker swarm leave --force</code> myvm1 从 swarm的 <code>manager</code> 中移除</p>\n</blockquote>\n"},{"title":"docker serveice","date":"2017-11-12T08:13:57.000Z","type":"post","_content":"\n# docker serveice\n\n> 扩展了应用程序并启用了负载平衡。\n\n## 分布式应用程序的层次结构\n\n* Stack  堆\n* services 服务\n* container  \n\n## 什么事 serveice\n\n在分布式应用程序中，应用程序的不同部分称为“服务”。例如，如果您想像一个视频共享站点，它可能包括一个用于在数据库中存储应用程序数据的服务，一个在后台进行视频转码的服务用户上传东西，前端服务等等。\n服务只是“生产中的容器”。一个服务只运行一个映像，但它编码映像运行的方式 - 应该使用哪些端口，容器应容器，集装箱该运行多少副本，以便服务具有所需的容量，以及等等。扩展服务会更改运行该软件的容器实例的数量，并在该过程中为服务分配更多的计算资源。\n\n## docker-compose.yml编写\n\n一个docker-compose.yml文件是一个YAML文件，它定义了Docker容器在生产过程中的行为。\n\n```yml\nversion: \"3\"\nservices:\n  web:\n# 将 60.205.206.164:8001/test:1.2 替换成你的 image ~~REPOSITORY：TAG~~\n    image: 60.205.206.164:8001/test:1.2\n    deploy:\n      replicas: 5\n      resources:\n        limits:\n          cpus: \"0.1\"\n          memory: 50M\n      restart_policy:\n        condition: on-failure\n    ports:\n      - \"8090:80\"\n    networks:\n      - webnet\nnetworks:\n  webnet:\n```\n\n## Docker执行以下操作\n\n* 从仓库中拉取 60.205.206.164:8001/test:1.2 这个 image\n* 运行该映像的5个实例作为调用的服务web，限制每个实例使用，最多使用10％的CPU（跨所有内核）和50MB RAM\n* 将主机上的端口8090映射到web80端口\n* 指示web容器通过称为负载平衡网络共享端口8090 webnet。（在内部，集装箱本身将web端口发布到 80端口。）\n* webnet使用默认设置（这是一个负载平衡的覆盖网络）来定义网络。\n\n### 运行新的负载均衡应用\n\n* 初始化swarm : `docker swarm init`\n* 给应用取一个名字： `docker stack deploy -c docker-compose.yml getstartedlab`\n* 通过 `docker service ls` 可以看到 我们的单一服务堆栈在一个主机上运行我们部署映像的5个容器实例。通过 `docker service ps <serviceId>` 可以看到这个服务包含了5个容器，都有独立的 ID\n* 页面运行 8090 端口，不断的运行，会发现走了不通的容器 Hostname 显示的ID 一直在变化\n\n### 缩放应用\n\n* 更改docker-compose.yml的replicas值，保存更改并重新运行docker stack deploy命令来缩放应用程\n* 通过 `docker service ps <serviceId>` 可以看到这个服务包含容器的个数变化\n\n## Take down the app and the swarm\n\n* `docker stack rm getstartedlab`\n> This removes the app, but our one-node swarm is still up and running \n* `docker swarm leave --force`\n> Take down the swarm","source":"_posts/docker/docker serveice.md","raw":"---\ntitle: docker serveice\ndate: 2017-11-12 16:13:57\ntype: post\ntags: \n    - docker\ncategories: docker\n---\n\n# docker serveice\n\n> 扩展了应用程序并启用了负载平衡。\n\n## 分布式应用程序的层次结构\n\n* Stack  堆\n* services 服务\n* container  \n\n## 什么事 serveice\n\n在分布式应用程序中，应用程序的不同部分称为“服务”。例如，如果您想像一个视频共享站点，它可能包括一个用于在数据库中存储应用程序数据的服务，一个在后台进行视频转码的服务用户上传东西，前端服务等等。\n服务只是“生产中的容器”。一个服务只运行一个映像，但它编码映像运行的方式 - 应该使用哪些端口，容器应容器，集装箱该运行多少副本，以便服务具有所需的容量，以及等等。扩展服务会更改运行该软件的容器实例的数量，并在该过程中为服务分配更多的计算资源。\n\n## docker-compose.yml编写\n\n一个docker-compose.yml文件是一个YAML文件，它定义了Docker容器在生产过程中的行为。\n\n```yml\nversion: \"3\"\nservices:\n  web:\n# 将 60.205.206.164:8001/test:1.2 替换成你的 image ~~REPOSITORY：TAG~~\n    image: 60.205.206.164:8001/test:1.2\n    deploy:\n      replicas: 5\n      resources:\n        limits:\n          cpus: \"0.1\"\n          memory: 50M\n      restart_policy:\n        condition: on-failure\n    ports:\n      - \"8090:80\"\n    networks:\n      - webnet\nnetworks:\n  webnet:\n```\n\n## Docker执行以下操作\n\n* 从仓库中拉取 60.205.206.164:8001/test:1.2 这个 image\n* 运行该映像的5个实例作为调用的服务web，限制每个实例使用，最多使用10％的CPU（跨所有内核）和50MB RAM\n* 将主机上的端口8090映射到web80端口\n* 指示web容器通过称为负载平衡网络共享端口8090 webnet。（在内部，集装箱本身将web端口发布到 80端口。）\n* webnet使用默认设置（这是一个负载平衡的覆盖网络）来定义网络。\n\n### 运行新的负载均衡应用\n\n* 初始化swarm : `docker swarm init`\n* 给应用取一个名字： `docker stack deploy -c docker-compose.yml getstartedlab`\n* 通过 `docker service ls` 可以看到 我们的单一服务堆栈在一个主机上运行我们部署映像的5个容器实例。通过 `docker service ps <serviceId>` 可以看到这个服务包含了5个容器，都有独立的 ID\n* 页面运行 8090 端口，不断的运行，会发现走了不通的容器 Hostname 显示的ID 一直在变化\n\n### 缩放应用\n\n* 更改docker-compose.yml的replicas值，保存更改并重新运行docker stack deploy命令来缩放应用程\n* 通过 `docker service ps <serviceId>` 可以看到这个服务包含容器的个数变化\n\n## Take down the app and the swarm\n\n* `docker stack rm getstartedlab`\n> This removes the app, but our one-node swarm is still up and running \n* `docker swarm leave --force`\n> Take down the swarm","slug":"docker/docker serveice","published":1,"updated":"2018-11-16T02:49:34.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonx65s6000di8usj1x0elj7","content":"<h1 id=\"docker-serveice\"><a href=\"#docker-serveice\" class=\"headerlink\" title=\"docker serveice\"></a>docker serveice</h1><blockquote>\n<p>扩展了应用程序并启用了负载平衡。</p>\n</blockquote>\n<h2 id=\"分布式应用程序的层次结构\"><a href=\"#分布式应用程序的层次结构\" class=\"headerlink\" title=\"分布式应用程序的层次结构\"></a>分布式应用程序的层次结构</h2><ul>\n<li>Stack  堆</li>\n<li>services 服务</li>\n<li>container  </li>\n</ul>\n<h2 id=\"什么事-serveice\"><a href=\"#什么事-serveice\" class=\"headerlink\" title=\"什么事 serveice\"></a>什么事 serveice</h2><p>在分布式应用程序中，应用程序的不同部分称为“服务”。例如，如果您想像一个视频共享站点，它可能包括一个用于在数据库中存储应用程序数据的服务，一个在后台进行视频转码的服务用户上传东西，前端服务等等。<br>服务只是“生产中的容器”。一个服务只运行一个映像，但它编码映像运行的方式 - 应该使用哪些端口，容器应容器，集装箱该运行多少副本，以便服务具有所需的容量，以及等等。扩展服务会更改运行该软件的容器实例的数量，并在该过程中为服务分配更多的计算资源。</p>\n<h2 id=\"docker-compose-yml编写\"><a href=\"#docker-compose-yml编写\" class=\"headerlink\" title=\"docker-compose.yml编写\"></a>docker-compose.yml编写</h2><p>一个docker-compose.yml文件是一个YAML文件，它定义了Docker容器在生产过程中的行为。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\"><span class=\"comment\"># 将 60.205.206.164:8001/test:1.2 替换成你的 image ~~REPOSITORY：TAG~~</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"number\">60.205</span><span class=\"number\">.206</span><span class=\"number\">.164</span><span class=\"string\">:8001/test:1.2</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      replicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">      resources:</span></span><br><span class=\"line\"><span class=\"attr\">        limits:</span></span><br><span class=\"line\"><span class=\"attr\">          cpus:</span> <span class=\"string\">\"0.1\"</span></span><br><span class=\"line\"><span class=\"attr\">          memory:</span> <span class=\"number\">50</span><span class=\"string\">M</span></span><br><span class=\"line\"><span class=\"attr\">      restart_policy:</span></span><br><span class=\"line\"><span class=\"attr\">        condition:</span> <span class=\"string\">on-failure</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8090:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  webnet:</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Docker执行以下操作\"><a href=\"#Docker执行以下操作\" class=\"headerlink\" title=\"Docker执行以下操作\"></a>Docker执行以下操作</h2><ul>\n<li>从仓库中拉取 60.205.206.164:8001/test:1.2 这个 image</li>\n<li>运行该映像的5个实例作为调用的服务web，限制每个实例使用，最多使用10％的CPU（跨所有内核）和50MB RAM</li>\n<li>将主机上的端口8090映射到web80端口</li>\n<li>指示web容器通过称为负载平衡网络共享端口8090 webnet。（在内部，集装箱本身将web端口发布到 80端口。）</li>\n<li>webnet使用默认设置（这是一个负载平衡的覆盖网络）来定义网络。</li>\n</ul>\n<h3 id=\"运行新的负载均衡应用\"><a href=\"#运行新的负载均衡应用\" class=\"headerlink\" title=\"运行新的负载均衡应用\"></a>运行新的负载均衡应用</h3><ul>\n<li>初始化swarm : <code>docker swarm init</code></li>\n<li>给应用取一个名字： <code>docker stack deploy -c docker-compose.yml getstartedlab</code></li>\n<li>通过 <code>docker service ls</code> 可以看到 我们的单一服务堆栈在一个主机上运行我们部署映像的5个容器实例。通过 <code>docker service ps &lt;serviceId&gt;</code> 可以看到这个服务包含了5个容器，都有独立的 ID</li>\n<li>页面运行 8090 端口，不断的运行，会发现走了不通的容器 Hostname 显示的ID 一直在变化</li>\n</ul>\n<h3 id=\"缩放应用\"><a href=\"#缩放应用\" class=\"headerlink\" title=\"缩放应用\"></a>缩放应用</h3><ul>\n<li>更改docker-compose.yml的replicas值，保存更改并重新运行docker stack deploy命令来缩放应用程</li>\n<li>通过 <code>docker service ps &lt;serviceId&gt;</code> 可以看到这个服务包含容器的个数变化</li>\n</ul>\n<h2 id=\"Take-down-the-app-and-the-swarm\"><a href=\"#Take-down-the-app-and-the-swarm\" class=\"headerlink\" title=\"Take down the app and the swarm\"></a>Take down the app and the swarm</h2><ul>\n<li><code>docker stack rm getstartedlab</code><blockquote>\n<p>This removes the app, but our one-node swarm is still up and running </p>\n</blockquote>\n</li>\n<li><code>docker swarm leave --force</code><blockquote>\n<p>Take down the swarm</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker-serveice\"><a href=\"#docker-serveice\" class=\"headerlink\" title=\"docker serveice\"></a>docker serveice</h1><blockquote>\n<p>扩展了应用程序并启用了负载平衡。</p>\n</blockquote>\n<h2 id=\"分布式应用程序的层次结构\"><a href=\"#分布式应用程序的层次结构\" class=\"headerlink\" title=\"分布式应用程序的层次结构\"></a>分布式应用程序的层次结构</h2><ul>\n<li>Stack  堆</li>\n<li>services 服务</li>\n<li>container  </li>\n</ul>\n<h2 id=\"什么事-serveice\"><a href=\"#什么事-serveice\" class=\"headerlink\" title=\"什么事 serveice\"></a>什么事 serveice</h2><p>在分布式应用程序中，应用程序的不同部分称为“服务”。例如，如果您想像一个视频共享站点，它可能包括一个用于在数据库中存储应用程序数据的服务，一个在后台进行视频转码的服务用户上传东西，前端服务等等。<br>服务只是“生产中的容器”。一个服务只运行一个映像，但它编码映像运行的方式 - 应该使用哪些端口，容器应容器，集装箱该运行多少副本，以便服务具有所需的容量，以及等等。扩展服务会更改运行该软件的容器实例的数量，并在该过程中为服务分配更多的计算资源。</p>\n<h2 id=\"docker-compose-yml编写\"><a href=\"#docker-compose-yml编写\" class=\"headerlink\" title=\"docker-compose.yml编写\"></a>docker-compose.yml编写</h2><p>一个docker-compose.yml文件是一个YAML文件，它定义了Docker容器在生产过程中的行为。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\"><span class=\"comment\"># 将 60.205.206.164:8001/test:1.2 替换成你的 image ~~REPOSITORY：TAG~~</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"number\">60.205</span><span class=\"number\">.206</span><span class=\"number\">.164</span><span class=\"string\">:8001/test:1.2</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      replicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">      resources:</span></span><br><span class=\"line\"><span class=\"attr\">        limits:</span></span><br><span class=\"line\"><span class=\"attr\">          cpus:</span> <span class=\"string\">\"0.1\"</span></span><br><span class=\"line\"><span class=\"attr\">          memory:</span> <span class=\"number\">50</span><span class=\"string\">M</span></span><br><span class=\"line\"><span class=\"attr\">      restart_policy:</span></span><br><span class=\"line\"><span class=\"attr\">        condition:</span> <span class=\"string\">on-failure</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8090:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  webnet:</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Docker执行以下操作\"><a href=\"#Docker执行以下操作\" class=\"headerlink\" title=\"Docker执行以下操作\"></a>Docker执行以下操作</h2><ul>\n<li>从仓库中拉取 60.205.206.164:8001/test:1.2 这个 image</li>\n<li>运行该映像的5个实例作为调用的服务web，限制每个实例使用，最多使用10％的CPU（跨所有内核）和50MB RAM</li>\n<li>将主机上的端口8090映射到web80端口</li>\n<li>指示web容器通过称为负载平衡网络共享端口8090 webnet。（在内部，集装箱本身将web端口发布到 80端口。）</li>\n<li>webnet使用默认设置（这是一个负载平衡的覆盖网络）来定义网络。</li>\n</ul>\n<h3 id=\"运行新的负载均衡应用\"><a href=\"#运行新的负载均衡应用\" class=\"headerlink\" title=\"运行新的负载均衡应用\"></a>运行新的负载均衡应用</h3><ul>\n<li>初始化swarm : <code>docker swarm init</code></li>\n<li>给应用取一个名字： <code>docker stack deploy -c docker-compose.yml getstartedlab</code></li>\n<li>通过 <code>docker service ls</code> 可以看到 我们的单一服务堆栈在一个主机上运行我们部署映像的5个容器实例。通过 <code>docker service ps &lt;serviceId&gt;</code> 可以看到这个服务包含了5个容器，都有独立的 ID</li>\n<li>页面运行 8090 端口，不断的运行，会发现走了不通的容器 Hostname 显示的ID 一直在变化</li>\n</ul>\n<h3 id=\"缩放应用\"><a href=\"#缩放应用\" class=\"headerlink\" title=\"缩放应用\"></a>缩放应用</h3><ul>\n<li>更改docker-compose.yml的replicas值，保存更改并重新运行docker stack deploy命令来缩放应用程</li>\n<li>通过 <code>docker service ps &lt;serviceId&gt;</code> 可以看到这个服务包含容器的个数变化</li>\n</ul>\n<h2 id=\"Take-down-the-app-and-the-swarm\"><a href=\"#Take-down-the-app-and-the-swarm\" class=\"headerlink\" title=\"Take down the app and the swarm\"></a>Take down the app and the swarm</h2><ul>\n<li><code>docker stack rm getstartedlab</code><blockquote>\n<p>This removes the app, but our one-node swarm is still up and running </p>\n</blockquote>\n</li>\n<li><code>docker swarm leave --force</code><blockquote>\n<p>Take down the swarm</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Dockerfiles的最佳实践","date":"2017-11-16T11:13:57.000Z","type":"post","_content":"\n# 编写Dockerfiles的最佳做法\n\nDocker可以通过从Dockerfile包含所有命令的文本文件中读取指令来自动构建图像 ，以便构建给定图像所需的顺序。\n\n## 一般准则和建议\n\n### 容器应该是精简的\n\n### 使用.dockerignore文件\n\n在大多数情况下，最好将每个Dockerfile放在一个空目录中。然后，仅添加构建Dockerfile所需的文件。为了增加构建的性能，您可以通过.dockerignore向该目录添加文件来排除文件和目录。此文件支持类似于.gitignore文件的排除模式。\n\n#### 避免安装不必要的包\n\n为了减少复杂性，依赖性，文件大小和构建时间，您应该避免安装额外的或不必要的包\n\n#### 容器单纯化\n\n将应用程序分解成多个容器可以更轻松地水平扩展和重新使用容器。例如，Web应用程序堆栈可能由三个独立的容器组成，每个容器具有自己独特的映像，以解耦的方式管理Web应用程序，数据库和内存中缓存。尽可能地判断容器是否干净，模块化。\n如果容器相互依赖，则可以使用Docker容器网络 来确保这些容器可以通信。\n\n#### 最小化层数\n\n你需要找到`dockerfile` 可用性(长期可维护性)之间的平衡,并最大限度地减少其使用的层数。\n\n#### 排序多行参数\n\n只要有可能，通过以字母数字排序多行参数来缓解以后的更改。这将帮助您避免重复的包，并使列表更容易更新。这也使得PR更容易阅读和审查。在反斜杠（`\\`）之前添加一个空格。\n\n```dockerfile\nRUN apt-get update && apt-get install -y \\\n  bzr \\\n  cvs \\\n  git \\\n  mercurial \\\n  subversion\n```\n\n#### 构建缓存\n\n在构建映像的过程中，Docker将Dockerfile按照指定的顺序逐步执行每个指令。随着每条指令的检查，Docker将在其缓存中查找可以重用的现有映像，而不是创建一个新的（重复）映像。用`--no-cache=true`该`docker build`命令上,将不会使用缓存\n何时会找到匹配的`image`\n\n* 从已经在缓存中的父图像开始，将下一条指令与从该基础图像导出的所有子图像进行比较，以查看其中一个是否使用完全相同的指令构建。如果没有，则缓存无效。\n* 在大多数情况下，简单地比较Dockerfile与其中一个子图像的指令是足够的。但是，某些说明需要更多的检查和解释。\n* 对于ADD和COPY指令，检查图像中文件的内容，并为每个文件计算校验和。在这些校验和中不考虑文件的最后修改和最后访问的时间。在缓存查找期间，将校验和与现有映像中的校验和进行比较。如果文件（如内容和元数据）中有任何变化，则缓存无效。\n* 除了ADD和COPY命令之外，缓存检查不会查看容器中的文件来确定缓存匹配。例如，当处理RUN apt-get -y update命令时，将不会检查在容器中更新的文件以确定是否存在高速缓存命中。在这种情况下，只有命令字符串本身将用于查找匹配。\n\n一旦缓存无效，所有后续Dockerfile命令将生成新的映像，并且高速缓存将不被使用。\n\n### Dockerfile指令\n\n[x] FROM\n[x] LABEL\n[x] RUN\n[x] APT-GET\n[x] USING PIPES\n[x] CMD\n[x] EXPOSE\n[x] ENV\n[x] ADD or COPY\n[x] ENTRYPOINT\n[x] VOLUME\n[x] USER\n[x] WORKDIR\n[x] ONBUILD\n\n#### FROM\n\n只要有可能，使用现有的官方存储库作为您的图像的基础。\n\n#### LABEL\n\n您可以为图像添加标签,` (空格)`, `\"` 等字符需要转义\n\n```Dockerfile\n# Set one or more individual labels\nLABEL com.example.version=\"0.0.1-beta\"\nLABEL vendor=\"ACME Incorporated\"\nLABEL com.example.release-date=\"2015-02-12\"\nLABEL com.example.version.is-production=\"\"\n# Set multiple labels on one line\nLABEL com.example.version=\"0.0.1-beta\" com.example.release-date=\"2015-02-12\"\n\n# Set multiple labels at once, using line-continuation characters to break long lines\nLABEL vendor=ACME\\ Incorporated \\\n      com.example.is-beta= \\\n      com.example.is-production=\"\" \\\n      com.example.version=\"0.0.1-beta\" \\\n      com.example.release-date=\"2015-02-12\"\n```\n\n#### RUN\n\n为了使您Dockerfile更易于阅读，可理解和可维护，可以将RUN多个行分隔开，用反斜杠分隔的长整型或复杂语句。\n\n#### APT-GET\n\n可能最常见的用例RUN是应用程序`apt-get`。该 `RUN apt-get`命令用来安装软件包\n避免，`RUN apt-get upgrade`或者`dist-upgrade`父系image中的许多“必需”程序包将无法在非特权的容器内升级\n\n```dockerfile\nRUN apt-get update && apt-get install -y \\\n        package-bar \\\n        package-baz \\\n        package-foo\n```\n\napt-get update在RUN语句中单独使用会导致缓存问题和后续apt-get install指令失败,例如:\n\n```dockerfile\nFROM ubuntu:14.04\nRUN apt-get update\nRUN apt-get install -y curl\n```\n\n构建图像后，所有层都在Docker缓存中。假设你以后apt-get install通过添加额外的包来修改：\n\n```dockerfile\nFROM ubuntu:14.04\nRUN apt-get update\nRUN apt-get install -y curl nginx\n```\n\nDocker将初始化和修改的指令看作是相同的，并重用先前步骤中的缓存。结果apt-get update是不执行，因为构建使用缓存的版本。因为apt-get update没有运行，你的构建可能会有一个过时的版本curl和nginx 包。\n使用`RUN apt-get update && apt-get install -y`确保您的`Docker文件`安装最新的软件包版本，无需进一步的编码或手动干预。这种技术被称为`“缓存破坏”`。您还可以通过指定软件包版本来实现缓存清除。这被称为版本固定，版本固定强制构建以检索特定版本，而不管缓存中有什么。这种技术还可以减少由于所需软件包中意外的更改导致的故障。例如：\n\n```dockerfile\nRUN apt-get update && apt-get install -y \\\n        package-bar \\\n        package-baz \\\n        package-foo=1.3.*\n```\n\n下是一个格式正确的RUN指导，显示所有apt-get\n\n```dockerfile\nRUN apt-get update && apt-get install -y \\\n    aufs-tools \\\n    automake \\\n    build-essential \\\n    curl \\\n    dpkg-sig \\\n    libcap-dev \\\n    libsqlite3-dev \\\n    mercurial \\\n    reprepro \\\n    ruby1.9.1 \\\n    ruby1.9.1-dev \\\n    s3cmd=1.1.* \\\n && rm -rf /var/lib/apt/lists/*\n```\n\n#### USING PIPES\n\n一些RUN命令取决于使用管道字符（`|`）将一个命令的输出管道传输到另一个命令的能力\n\n```dockerfile\nRUN wget -O - https://some.site | wc -l > /number\n```\n\n* Docker使用/bin/sh -c解释器执行这些命令，该解释器仅评估管道中最后一个操作的退出代码以确定成功。在上面的示例中，只要wc -l命令成功，即使wget命令失败，此构建步骤也可以成功并生成新映像。\n* 您希望命令由于管道中任何阶段的错误而失败，请先set -o pipefail &&确定一个意外的错误会阻止构建从无意中成功。\n\n```dockerfile\nRUN set -o pipefail && wget -O - https://some.site | wc -l > /number\n```\n\n> `注意`：并非所有的shell都支持该`-o pipefail`选项。在这种情况下（例如`dash shell`，它是基于`Debian`的映像的默认`shell`），请考虑使用`exec`形式`RUN `来显式选择一个支持该`pipefail`选项的shell 。\n\n```dockerfile\nRUN [\"/bin/bash\", \"-c\", \"set -o pipefail && wget -O - https://some.site | wc -l > /number\"]\n```\n\n#### CMD\n\n`CMD`指令应用于运行图像包含的软件以及任何参数。\n如果图像用于服务，例如Apache和Rails，则可以运行类似的操作` CMD [\"apache2\",\"-DFOREGROUND\"]`。这种形式的指令是推荐用于任何基于服务的图像。\n`CMD`应该给出一个交互式的`shell`，比如`bash`，`python`和`perl`。例如，`CMD [\"perl\", \"-de0\"]`，`CMD [\"python\"]`，或 `CMD [“php”, “-a”]`。使用此表单意味着当您执行类似的操作时`docker run -it python`，您将被放入可用的`shell`中，随时可以使用。\n\n#### EXPOSE\n\n`EXPOSE`指令指示容器将侦听连接的端口.例如，包含Apache Web服务器EXPOSE 80的映像将使用，而包含MongoDB的映像将使用EXPOSE 27017等等\n\n#### ENV\n\n为了使新的软件更容易运行，您可以使用它`ENV`来更新`PATH`容器安装的软件的 环境变量。例如，`ENV PATH /usr/local/nginx/bin:$PATH`将确保`CMD [“nginx”]` 只是工作。\n该ENV指令对于提供特定于要集中化的服务的必需环境变量也很有用，例如Postgres's PGDATA。\n最后，ENV也可以用来设置常用的版本号，使得版本颠覆更容易维\n\n```dockerfile\nENV PG_MAJOR 9.3\nENV PG_VERSION 9.3.4\nRUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress && …\nENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH\n```\n\n#### ADD or COPY\n\n`ADD`  和 `COPY` 的功能有点类似,但是一般优先采用`COPY `, 因为它更加透明.\nCOPY只支持将本地文件基本复制到容器中，同时ADD具有一些不是立即显而易见的功能（如本地仅提取和远程URL支持）。因此，最好的用途ADD是将本地`tar`文件自动提取到图像中，如同 `ADD rootfs.tar.xz /`。\n因为图像大小很重要，ADD因此强烈不鼓励使用远程URL提取包; 你应该使用curl或wget替代。这样，您可以删除在解压后不再需要的文件，而不必在图像中添加另一个图层.\n\n##### 错误实例\n\n```dockerfile\nADD http://example.com/big.tar.xz /usr/src/things/\nRUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things\nRUN make -C /usr/src/things all\n```\n\n##### 正确实例\n\n```dockerfile\nRUN mkdir -p /usr/src/things \\\n    && curl -SL http://example.com/big.tar.xz \\\n    | tar -xJC /usr/src/things \\\n    && make -C /usr/src/things all\n```\n\n#### ENTRYPOINT\n\n#### VOLUME\n\n该VOLUME指令应用于公开您的docker容器创建的任何数据库存储区域，配置存储或文件/文件夹。强烈建议您使用图像VOLUME的任何可变和/或用户可维修的部分。\n\n#### USER\n\n#### WORKDIR\n\n为了清晰可靠，您应该永远为您使用绝对路径 WORKDIR。此外，您应该使用，WORKDIR而不是增加的说明，如RUN cd … && do-something难以阅读，排除故障和维护\n\n#### ONBUILD\n\n`ONBUILD`命令在当前`Dockerfile`构建完成后执行。 ONBUILD在导出FROM当前图像的任何子图像中执行。将该ONBUILD命令视为父母Dockerfile给予孩子的指示Dockerfile。\nDocker构建`ONBUILD`在子节点`Dockerfile`中的任何命令之前执行命令。\n放入ADD或COPY放入时要小心ONBUILD。如果新版本的上下文缺少添加的资源，“onbuild”映像将会严重失败。如上所述，添加单独的标签将有助于通过允许Dockerfile作者做出选择来缓解这一点\n","source":"_posts/docker/makeDockerfile.md","raw":"---\ntitle: Dockerfiles的最佳实践\ndate: 2017-11-16 19:13:57\ntype: post\ntags: \n    - docker\n    - 入门\ncategories: docker\n---\n\n# 编写Dockerfiles的最佳做法\n\nDocker可以通过从Dockerfile包含所有命令的文本文件中读取指令来自动构建图像 ，以便构建给定图像所需的顺序。\n\n## 一般准则和建议\n\n### 容器应该是精简的\n\n### 使用.dockerignore文件\n\n在大多数情况下，最好将每个Dockerfile放在一个空目录中。然后，仅添加构建Dockerfile所需的文件。为了增加构建的性能，您可以通过.dockerignore向该目录添加文件来排除文件和目录。此文件支持类似于.gitignore文件的排除模式。\n\n#### 避免安装不必要的包\n\n为了减少复杂性，依赖性，文件大小和构建时间，您应该避免安装额外的或不必要的包\n\n#### 容器单纯化\n\n将应用程序分解成多个容器可以更轻松地水平扩展和重新使用容器。例如，Web应用程序堆栈可能由三个独立的容器组成，每个容器具有自己独特的映像，以解耦的方式管理Web应用程序，数据库和内存中缓存。尽可能地判断容器是否干净，模块化。\n如果容器相互依赖，则可以使用Docker容器网络 来确保这些容器可以通信。\n\n#### 最小化层数\n\n你需要找到`dockerfile` 可用性(长期可维护性)之间的平衡,并最大限度地减少其使用的层数。\n\n#### 排序多行参数\n\n只要有可能，通过以字母数字排序多行参数来缓解以后的更改。这将帮助您避免重复的包，并使列表更容易更新。这也使得PR更容易阅读和审查。在反斜杠（`\\`）之前添加一个空格。\n\n```dockerfile\nRUN apt-get update && apt-get install -y \\\n  bzr \\\n  cvs \\\n  git \\\n  mercurial \\\n  subversion\n```\n\n#### 构建缓存\n\n在构建映像的过程中，Docker将Dockerfile按照指定的顺序逐步执行每个指令。随着每条指令的检查，Docker将在其缓存中查找可以重用的现有映像，而不是创建一个新的（重复）映像。用`--no-cache=true`该`docker build`命令上,将不会使用缓存\n何时会找到匹配的`image`\n\n* 从已经在缓存中的父图像开始，将下一条指令与从该基础图像导出的所有子图像进行比较，以查看其中一个是否使用完全相同的指令构建。如果没有，则缓存无效。\n* 在大多数情况下，简单地比较Dockerfile与其中一个子图像的指令是足够的。但是，某些说明需要更多的检查和解释。\n* 对于ADD和COPY指令，检查图像中文件的内容，并为每个文件计算校验和。在这些校验和中不考虑文件的最后修改和最后访问的时间。在缓存查找期间，将校验和与现有映像中的校验和进行比较。如果文件（如内容和元数据）中有任何变化，则缓存无效。\n* 除了ADD和COPY命令之外，缓存检查不会查看容器中的文件来确定缓存匹配。例如，当处理RUN apt-get -y update命令时，将不会检查在容器中更新的文件以确定是否存在高速缓存命中。在这种情况下，只有命令字符串本身将用于查找匹配。\n\n一旦缓存无效，所有后续Dockerfile命令将生成新的映像，并且高速缓存将不被使用。\n\n### Dockerfile指令\n\n[x] FROM\n[x] LABEL\n[x] RUN\n[x] APT-GET\n[x] USING PIPES\n[x] CMD\n[x] EXPOSE\n[x] ENV\n[x] ADD or COPY\n[x] ENTRYPOINT\n[x] VOLUME\n[x] USER\n[x] WORKDIR\n[x] ONBUILD\n\n#### FROM\n\n只要有可能，使用现有的官方存储库作为您的图像的基础。\n\n#### LABEL\n\n您可以为图像添加标签,` (空格)`, `\"` 等字符需要转义\n\n```Dockerfile\n# Set one or more individual labels\nLABEL com.example.version=\"0.0.1-beta\"\nLABEL vendor=\"ACME Incorporated\"\nLABEL com.example.release-date=\"2015-02-12\"\nLABEL com.example.version.is-production=\"\"\n# Set multiple labels on one line\nLABEL com.example.version=\"0.0.1-beta\" com.example.release-date=\"2015-02-12\"\n\n# Set multiple labels at once, using line-continuation characters to break long lines\nLABEL vendor=ACME\\ Incorporated \\\n      com.example.is-beta= \\\n      com.example.is-production=\"\" \\\n      com.example.version=\"0.0.1-beta\" \\\n      com.example.release-date=\"2015-02-12\"\n```\n\n#### RUN\n\n为了使您Dockerfile更易于阅读，可理解和可维护，可以将RUN多个行分隔开，用反斜杠分隔的长整型或复杂语句。\n\n#### APT-GET\n\n可能最常见的用例RUN是应用程序`apt-get`。该 `RUN apt-get`命令用来安装软件包\n避免，`RUN apt-get upgrade`或者`dist-upgrade`父系image中的许多“必需”程序包将无法在非特权的容器内升级\n\n```dockerfile\nRUN apt-get update && apt-get install -y \\\n        package-bar \\\n        package-baz \\\n        package-foo\n```\n\napt-get update在RUN语句中单独使用会导致缓存问题和后续apt-get install指令失败,例如:\n\n```dockerfile\nFROM ubuntu:14.04\nRUN apt-get update\nRUN apt-get install -y curl\n```\n\n构建图像后，所有层都在Docker缓存中。假设你以后apt-get install通过添加额外的包来修改：\n\n```dockerfile\nFROM ubuntu:14.04\nRUN apt-get update\nRUN apt-get install -y curl nginx\n```\n\nDocker将初始化和修改的指令看作是相同的，并重用先前步骤中的缓存。结果apt-get update是不执行，因为构建使用缓存的版本。因为apt-get update没有运行，你的构建可能会有一个过时的版本curl和nginx 包。\n使用`RUN apt-get update && apt-get install -y`确保您的`Docker文件`安装最新的软件包版本，无需进一步的编码或手动干预。这种技术被称为`“缓存破坏”`。您还可以通过指定软件包版本来实现缓存清除。这被称为版本固定，版本固定强制构建以检索特定版本，而不管缓存中有什么。这种技术还可以减少由于所需软件包中意外的更改导致的故障。例如：\n\n```dockerfile\nRUN apt-get update && apt-get install -y \\\n        package-bar \\\n        package-baz \\\n        package-foo=1.3.*\n```\n\n下是一个格式正确的RUN指导，显示所有apt-get\n\n```dockerfile\nRUN apt-get update && apt-get install -y \\\n    aufs-tools \\\n    automake \\\n    build-essential \\\n    curl \\\n    dpkg-sig \\\n    libcap-dev \\\n    libsqlite3-dev \\\n    mercurial \\\n    reprepro \\\n    ruby1.9.1 \\\n    ruby1.9.1-dev \\\n    s3cmd=1.1.* \\\n && rm -rf /var/lib/apt/lists/*\n```\n\n#### USING PIPES\n\n一些RUN命令取决于使用管道字符（`|`）将一个命令的输出管道传输到另一个命令的能力\n\n```dockerfile\nRUN wget -O - https://some.site | wc -l > /number\n```\n\n* Docker使用/bin/sh -c解释器执行这些命令，该解释器仅评估管道中最后一个操作的退出代码以确定成功。在上面的示例中，只要wc -l命令成功，即使wget命令失败，此构建步骤也可以成功并生成新映像。\n* 您希望命令由于管道中任何阶段的错误而失败，请先set -o pipefail &&确定一个意外的错误会阻止构建从无意中成功。\n\n```dockerfile\nRUN set -o pipefail && wget -O - https://some.site | wc -l > /number\n```\n\n> `注意`：并非所有的shell都支持该`-o pipefail`选项。在这种情况下（例如`dash shell`，它是基于`Debian`的映像的默认`shell`），请考虑使用`exec`形式`RUN `来显式选择一个支持该`pipefail`选项的shell 。\n\n```dockerfile\nRUN [\"/bin/bash\", \"-c\", \"set -o pipefail && wget -O - https://some.site | wc -l > /number\"]\n```\n\n#### CMD\n\n`CMD`指令应用于运行图像包含的软件以及任何参数。\n如果图像用于服务，例如Apache和Rails，则可以运行类似的操作` CMD [\"apache2\",\"-DFOREGROUND\"]`。这种形式的指令是推荐用于任何基于服务的图像。\n`CMD`应该给出一个交互式的`shell`，比如`bash`，`python`和`perl`。例如，`CMD [\"perl\", \"-de0\"]`，`CMD [\"python\"]`，或 `CMD [“php”, “-a”]`。使用此表单意味着当您执行类似的操作时`docker run -it python`，您将被放入可用的`shell`中，随时可以使用。\n\n#### EXPOSE\n\n`EXPOSE`指令指示容器将侦听连接的端口.例如，包含Apache Web服务器EXPOSE 80的映像将使用，而包含MongoDB的映像将使用EXPOSE 27017等等\n\n#### ENV\n\n为了使新的软件更容易运行，您可以使用它`ENV`来更新`PATH`容器安装的软件的 环境变量。例如，`ENV PATH /usr/local/nginx/bin:$PATH`将确保`CMD [“nginx”]` 只是工作。\n该ENV指令对于提供特定于要集中化的服务的必需环境变量也很有用，例如Postgres's PGDATA。\n最后，ENV也可以用来设置常用的版本号，使得版本颠覆更容易维\n\n```dockerfile\nENV PG_MAJOR 9.3\nENV PG_VERSION 9.3.4\nRUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress && …\nENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH\n```\n\n#### ADD or COPY\n\n`ADD`  和 `COPY` 的功能有点类似,但是一般优先采用`COPY `, 因为它更加透明.\nCOPY只支持将本地文件基本复制到容器中，同时ADD具有一些不是立即显而易见的功能（如本地仅提取和远程URL支持）。因此，最好的用途ADD是将本地`tar`文件自动提取到图像中，如同 `ADD rootfs.tar.xz /`。\n因为图像大小很重要，ADD因此强烈不鼓励使用远程URL提取包; 你应该使用curl或wget替代。这样，您可以删除在解压后不再需要的文件，而不必在图像中添加另一个图层.\n\n##### 错误实例\n\n```dockerfile\nADD http://example.com/big.tar.xz /usr/src/things/\nRUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things\nRUN make -C /usr/src/things all\n```\n\n##### 正确实例\n\n```dockerfile\nRUN mkdir -p /usr/src/things \\\n    && curl -SL http://example.com/big.tar.xz \\\n    | tar -xJC /usr/src/things \\\n    && make -C /usr/src/things all\n```\n\n#### ENTRYPOINT\n\n#### VOLUME\n\n该VOLUME指令应用于公开您的docker容器创建的任何数据库存储区域，配置存储或文件/文件夹。强烈建议您使用图像VOLUME的任何可变和/或用户可维修的部分。\n\n#### USER\n\n#### WORKDIR\n\n为了清晰可靠，您应该永远为您使用绝对路径 WORKDIR。此外，您应该使用，WORKDIR而不是增加的说明，如RUN cd … && do-something难以阅读，排除故障和维护\n\n#### ONBUILD\n\n`ONBUILD`命令在当前`Dockerfile`构建完成后执行。 ONBUILD在导出FROM当前图像的任何子图像中执行。将该ONBUILD命令视为父母Dockerfile给予孩子的指示Dockerfile。\nDocker构建`ONBUILD`在子节点`Dockerfile`中的任何命令之前执行命令。\n放入ADD或COPY放入时要小心ONBUILD。如果新版本的上下文缺少添加的资源，“onbuild”映像将会严重失败。如上所述，添加单独的标签将有助于通过允许Dockerfile作者做出选择来缓解这一点\n","slug":"docker/makeDockerfile","published":1,"updated":"2018-11-16T09:51:06.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonx65sp000ii8usrqt4v0wb","content":"<h1 id=\"编写Dockerfiles的最佳做法\"><a href=\"#编写Dockerfiles的最佳做法\" class=\"headerlink\" title=\"编写Dockerfiles的最佳做法\"></a>编写Dockerfiles的最佳做法</h1><p>Docker可以通过从Dockerfile包含所有命令的文本文件中读取指令来自动构建图像 ，以便构建给定图像所需的顺序。</p>\n<h2 id=\"一般准则和建议\"><a href=\"#一般准则和建议\" class=\"headerlink\" title=\"一般准则和建议\"></a>一般准则和建议</h2><h3 id=\"容器应该是精简的\"><a href=\"#容器应该是精简的\" class=\"headerlink\" title=\"容器应该是精简的\"></a>容器应该是精简的</h3><h3 id=\"使用-dockerignore文件\"><a href=\"#使用-dockerignore文件\" class=\"headerlink\" title=\"使用.dockerignore文件\"></a>使用.dockerignore文件</h3><p>在大多数情况下，最好将每个Dockerfile放在一个空目录中。然后，仅添加构建Dockerfile所需的文件。为了增加构建的性能，您可以通过.dockerignore向该目录添加文件来排除文件和目录。此文件支持类似于.gitignore文件的排除模式。</p>\n<h4 id=\"避免安装不必要的包\"><a href=\"#避免安装不必要的包\" class=\"headerlink\" title=\"避免安装不必要的包\"></a>避免安装不必要的包</h4><p>为了减少复杂性，依赖性，文件大小和构建时间，您应该避免安装额外的或不必要的包</p>\n<h4 id=\"容器单纯化\"><a href=\"#容器单纯化\" class=\"headerlink\" title=\"容器单纯化\"></a>容器单纯化</h4><p>将应用程序分解成多个容器可以更轻松地水平扩展和重新使用容器。例如，Web应用程序堆栈可能由三个独立的容器组成，每个容器具有自己独特的映像，以解耦的方式管理Web应用程序，数据库和内存中缓存。尽可能地判断容器是否干净，模块化。<br>如果容器相互依赖，则可以使用Docker容器网络 来确保这些容器可以通信。</p>\n<h4 id=\"最小化层数\"><a href=\"#最小化层数\" class=\"headerlink\" title=\"最小化层数\"></a>最小化层数</h4><p>你需要找到<code>dockerfile</code> 可用性(长期可维护性)之间的平衡,并最大限度地减少其使用的层数。</p>\n<h4 id=\"排序多行参数\"><a href=\"#排序多行参数\" class=\"headerlink\" title=\"排序多行参数\"></a>排序多行参数</h4><p>只要有可能，通过以字母数字排序多行参数来缓解以后的更改。这将帮助您避免重复的包，并使列表更容易更新。这也使得PR更容易阅读和审查。在反斜杠（<code>\\</code>）之前添加一个空格。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y \\</span></span><br><span class=\"line\"><span class=\"bash\">  bzr \\</span></span><br><span class=\"line\"><span class=\"bash\">  cvs \\</span></span><br><span class=\"line\"><span class=\"bash\">  git \\</span></span><br><span class=\"line\"><span class=\"bash\">  mercurial \\</span></span><br><span class=\"line\"><span class=\"bash\">  subversion</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构建缓存\"><a href=\"#构建缓存\" class=\"headerlink\" title=\"构建缓存\"></a>构建缓存</h4><p>在构建映像的过程中，Docker将Dockerfile按照指定的顺序逐步执行每个指令。随着每条指令的检查，Docker将在其缓存中查找可以重用的现有映像，而不是创建一个新的（重复）映像。用<code>--no-cache=true</code>该<code>docker build</code>命令上,将不会使用缓存<br>何时会找到匹配的<code>image</code></p>\n<ul>\n<li>从已经在缓存中的父图像开始，将下一条指令与从该基础图像导出的所有子图像进行比较，以查看其中一个是否使用完全相同的指令构建。如果没有，则缓存无效。</li>\n<li>在大多数情况下，简单地比较Dockerfile与其中一个子图像的指令是足够的。但是，某些说明需要更多的检查和解释。</li>\n<li>对于ADD和COPY指令，检查图像中文件的内容，并为每个文件计算校验和。在这些校验和中不考虑文件的最后修改和最后访问的时间。在缓存查找期间，将校验和与现有映像中的校验和进行比较。如果文件（如内容和元数据）中有任何变化，则缓存无效。</li>\n<li>除了ADD和COPY命令之外，缓存检查不会查看容器中的文件来确定缓存匹配。例如，当处理RUN apt-get -y update命令时，将不会检查在容器中更新的文件以确定是否存在高速缓存命中。在这种情况下，只有命令字符串本身将用于查找匹配。</li>\n</ul>\n<p>一旦缓存无效，所有后续Dockerfile命令将生成新的映像，并且高速缓存将不被使用。</p>\n<h3 id=\"Dockerfile指令\"><a href=\"#Dockerfile指令\" class=\"headerlink\" title=\"Dockerfile指令\"></a>Dockerfile指令</h3><p>[x] FROM<br>[x] LABEL<br>[x] RUN<br>[x] APT-GET<br>[x] USING PIPES<br>[x] CMD<br>[x] EXPOSE<br>[x] ENV<br>[x] ADD or COPY<br>[x] ENTRYPOINT<br>[x] VOLUME<br>[x] USER<br>[x] WORKDIR<br>[x] ONBUILD</p>\n<h4 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h4><p>只要有可能，使用现有的官方存储库作为您的图像的基础。</p>\n<h4 id=\"LABEL\"><a href=\"#LABEL\" class=\"headerlink\" title=\"LABEL\"></a>LABEL</h4><p>您可以为图像添加标签,<code>(空格)</code>, <code>&quot;</code> 等字符需要转义</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set one or more individual labels</span></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span><span class=\"bash\"> com.example.version=<span class=\"string\">\"0.0.1-beta\"</span></span></span><br><span class=\"line\"><span class=\"bash\">LABEL vendor=<span class=\"string\">\"ACME Incorporated\"</span></span></span><br><span class=\"line\"><span class=\"bash\">LABEL com.example.release-date=<span class=\"string\">\"2015-02-12\"</span></span></span><br><span class=\"line\"><span class=\"bash\">LABEL com.example.version.is-production=<span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Set multiple labels on one line</span></span></span><br><span class=\"line\"><span class=\"bash\">LABEL com.example.version=<span class=\"string\">\"0.0.1-beta\"</span> com.example.release-date=<span class=\"string\">\"2015-02-12\"</span></span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Set multiple labels at once, using line-continuation characters to break long lines</span></span></span><br><span class=\"line\"><span class=\"bash\">LABEL vendor=ACME\\ Incorporated \\</span></span><br><span class=\"line\"><span class=\"bash\">      com.example.is-beta= \\</span></span><br><span class=\"line\"><span class=\"bash\">      com.example.is-production=<span class=\"string\">\"\"</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">      com.example.version=<span class=\"string\">\"0.0.1-beta\"</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">      com.example.release-date=<span class=\"string\">\"2015-02-12\"</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h4><p>为了使您Dockerfile更易于阅读，可理解和可维护，可以将RUN多个行分隔开，用反斜杠分隔的长整型或复杂语句。</p>\n<h4 id=\"APT-GET\"><a href=\"#APT-GET\" class=\"headerlink\" title=\"APT-GET\"></a>APT-GET</h4><p>可能最常见的用例RUN是应用程序<code>apt-get</code>。该 <code>RUN apt-get</code>命令用来安装软件包<br>避免，<code>RUN apt-get upgrade</code>或者<code>dist-upgrade</code>父系image中的许多“必需”程序包将无法在非特权的容器内升级</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-bar \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-baz \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-foo</span></span><br></pre></td></tr></table></figure>\n<p>apt-get update在RUN语句中单独使用会导致缓存问题和后续apt-get install指令失败,例如:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">14.04</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"bash\">RUN apt-get install -y curl</span></span><br></pre></td></tr></table></figure>\n<p>构建图像后，所有层都在Docker缓存中。假设你以后apt-get install通过添加额外的包来修改：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">14.04</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"bash\">RUN apt-get install -y curl nginx</span></span><br></pre></td></tr></table></figure>\n<p>Docker将初始化和修改的指令看作是相同的，并重用先前步骤中的缓存。结果apt-get update是不执行，因为构建使用缓存的版本。因为apt-get update没有运行，你的构建可能会有一个过时的版本curl和nginx 包。<br>使用<code>RUN apt-get update &amp;&amp; apt-get install -y</code>确保您的<code>Docker文件</code>安装最新的软件包版本，无需进一步的编码或手动干预。这种技术被称为<code>“缓存破坏”</code>。您还可以通过指定软件包版本来实现缓存清除。这被称为版本固定，版本固定强制构建以检索特定版本，而不管缓存中有什么。这种技术还可以减少由于所需软件包中意外的更改导致的故障。例如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-bar \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-baz \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-foo=1.3.*</span></span><br></pre></td></tr></table></figure>\n<p>下是一个格式正确的RUN指导，显示所有apt-get</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y \\</span></span><br><span class=\"line\"><span class=\"bash\">    aufs-tools \\</span></span><br><span class=\"line\"><span class=\"bash\">    automake \\</span></span><br><span class=\"line\"><span class=\"bash\">    build-essential \\</span></span><br><span class=\"line\"><span class=\"bash\">    curl \\</span></span><br><span class=\"line\"><span class=\"bash\">    dpkg-sig \\</span></span><br><span class=\"line\"><span class=\"bash\">    libcap-dev \\</span></span><br><span class=\"line\"><span class=\"bash\">    libsqlite3-dev \\</span></span><br><span class=\"line\"><span class=\"bash\">    mercurial \\</span></span><br><span class=\"line\"><span class=\"bash\">    reprepro \\</span></span><br><span class=\"line\"><span class=\"bash\">    ruby1.9.1 \\</span></span><br><span class=\"line\"><span class=\"bash\">    ruby1.9.1-dev \\</span></span><br><span class=\"line\"><span class=\"bash\">    s3cmd=1.1.* \\</span></span><br><span class=\"line\"><span class=\"bash\"> &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"USING-PIPES\"><a href=\"#USING-PIPES\" class=\"headerlink\" title=\"USING PIPES\"></a>USING PIPES</h4><p>一些RUN命令取决于使用管道字符（<code>|</code>）将一个命令的输出管道传输到另一个命令的能力</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> wget -O - https://some.site | wc -l &gt; /number</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Docker使用/bin/sh -c解释器执行这些命令，该解释器仅评估管道中最后一个操作的退出代码以确定成功。在上面的示例中，只要wc -l命令成功，即使wget命令失败，此构建步骤也可以成功并生成新映像。</li>\n<li>您希望命令由于管道中任何阶段的错误而失败，请先set -o pipefail &amp;&amp;确定一个意外的错误会阻止构建从无意中成功。</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">set</span> -o pipefail &amp;&amp; wget -O - https://some.site | wc -l &gt; /number</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>注意</code>：并非所有的shell都支持该<code>-o pipefail</code>选项。在这种情况下（例如<code>dash shell</code>，它是基于<code>Debian</code>的映像的默认<code>shell</code>），请考虑使用<code>exec</code>形式<code>RUN</code>来显式选择一个支持该<code>pipefail</code>选项的shell 。</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [<span class=\"string\">\"/bin/bash\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"set -o pipefail &amp;&amp; wget -O - https://some.site | wc -l &gt; /number\"</span>]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h4><p><code>CMD</code>指令应用于运行图像包含的软件以及任何参数。<br>如果图像用于服务，例如Apache和Rails，则可以运行类似的操作<code>CMD [&quot;apache2&quot;,&quot;-DFOREGROUND&quot;]</code>。这种形式的指令是推荐用于任何基于服务的图像。<br><code>CMD</code>应该给出一个交互式的<code>shell</code>，比如<code>bash</code>，<code>python</code>和<code>perl</code>。例如，<code>CMD [&quot;perl&quot;, &quot;-de0&quot;]</code>，<code>CMD [&quot;python&quot;]</code>，或 <code>CMD [“php”, “-a”]</code>。使用此表单意味着当您执行类似的操作时<code>docker run -it python</code>，您将被放入可用的<code>shell</code>中，随时可以使用。</p>\n<h4 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h4><p><code>EXPOSE</code>指令指示容器将侦听连接的端口.例如，包含Apache Web服务器EXPOSE 80的映像将使用，而包含MongoDB的映像将使用EXPOSE 27017等等</p>\n<h4 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h4><p>为了使新的软件更容易运行，您可以使用它<code>ENV</code>来更新<code>PATH</code>容器安装的软件的 环境变量。例如，<code>ENV PATH /usr/local/nginx/bin:$PATH</code>将确保<code>CMD [“nginx”]</code> 只是工作。<br>该ENV指令对于提供特定于要集中化的服务的必需环境变量也很有用，例如Postgres’s PGDATA。<br>最后，ENV也可以用来设置常用的版本号，使得版本颠覆更容易维</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ENV</span> PG_MAJOR <span class=\"number\">9.3</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PG_VERSION <span class=\"number\">9.3</span>.<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> curl -SL http://example.com/postgres-<span class=\"variable\">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span></span><br><span class=\"line\"><span class=\"bash\">ENV PATH /usr/<span class=\"built_in\">local</span>/postgres-<span class=\"variable\">$PG_MAJOR</span>/bin:<span class=\"variable\">$PATH</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"ADD-or-COPY\"><a href=\"#ADD-or-COPY\" class=\"headerlink\" title=\"ADD or COPY\"></a>ADD or COPY</h4><p><code>ADD</code>  和 <code>COPY</code> 的功能有点类似,但是一般优先采用<code>COPY</code>, 因为它更加透明.<br>COPY只支持将本地文件基本复制到容器中，同时ADD具有一些不是立即显而易见的功能（如本地仅提取和远程URL支持）。因此，最好的用途ADD是将本地<code>tar</code>文件自动提取到图像中，如同 <code>ADD rootfs.tar.xz /</code>。<br>因为图像大小很重要，ADD因此强烈不鼓励使用远程URL提取包; 你应该使用curl或wget替代。这样，您可以删除在解压后不再需要的文件，而不必在图像中添加另一个图层.</p>\n<h5 id=\"错误实例\"><a href=\"#错误实例\" class=\"headerlink\" title=\"错误实例\"></a>错误实例</h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> http://example.com/big.tar.xz /usr/src/things/</span></span><br><span class=\"line\"><span class=\"bash\">RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things</span></span><br><span class=\"line\"><span class=\"bash\">RUN make -C /usr/src/things all</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"正确实例\"><a href=\"#正确实例\" class=\"headerlink\" title=\"正确实例\"></a>正确实例</h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir -p /usr/src/things \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; curl -SL http://example.com/big.tar.xz \\</span></span><br><span class=\"line\"><span class=\"bash\">    | tar -xJC /usr/src/things \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; make -C /usr/src/things all</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h4><h4 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h4><p>该VOLUME指令应用于公开您的docker容器创建的任何数据库存储区域，配置存储或文件/文件夹。强烈建议您使用图像VOLUME的任何可变和/或用户可维修的部分。</p>\n<h4 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h4><h4 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h4><p>为了清晰可靠，您应该永远为您使用绝对路径 WORKDIR。此外，您应该使用，WORKDIR而不是增加的说明，如RUN cd … &amp;&amp; do-something难以阅读，排除故障和维护</p>\n<h4 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h4><p><code>ONBUILD</code>命令在当前<code>Dockerfile</code>构建完成后执行。 ONBUILD在导出FROM当前图像的任何子图像中执行。将该ONBUILD命令视为父母Dockerfile给予孩子的指示Dockerfile。<br>Docker构建<code>ONBUILD</code>在子节点<code>Dockerfile</code>中的任何命令之前执行命令。<br>放入ADD或COPY放入时要小心ONBUILD。如果新版本的上下文缺少添加的资源，“onbuild”映像将会严重失败。如上所述，添加单独的标签将有助于通过允许Dockerfile作者做出选择来缓解这一点</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"编写Dockerfiles的最佳做法\"><a href=\"#编写Dockerfiles的最佳做法\" class=\"headerlink\" title=\"编写Dockerfiles的最佳做法\"></a>编写Dockerfiles的最佳做法</h1><p>Docker可以通过从Dockerfile包含所有命令的文本文件中读取指令来自动构建图像 ，以便构建给定图像所需的顺序。</p>\n<h2 id=\"一般准则和建议\"><a href=\"#一般准则和建议\" class=\"headerlink\" title=\"一般准则和建议\"></a>一般准则和建议</h2><h3 id=\"容器应该是精简的\"><a href=\"#容器应该是精简的\" class=\"headerlink\" title=\"容器应该是精简的\"></a>容器应该是精简的</h3><h3 id=\"使用-dockerignore文件\"><a href=\"#使用-dockerignore文件\" class=\"headerlink\" title=\"使用.dockerignore文件\"></a>使用.dockerignore文件</h3><p>在大多数情况下，最好将每个Dockerfile放在一个空目录中。然后，仅添加构建Dockerfile所需的文件。为了增加构建的性能，您可以通过.dockerignore向该目录添加文件来排除文件和目录。此文件支持类似于.gitignore文件的排除模式。</p>\n<h4 id=\"避免安装不必要的包\"><a href=\"#避免安装不必要的包\" class=\"headerlink\" title=\"避免安装不必要的包\"></a>避免安装不必要的包</h4><p>为了减少复杂性，依赖性，文件大小和构建时间，您应该避免安装额外的或不必要的包</p>\n<h4 id=\"容器单纯化\"><a href=\"#容器单纯化\" class=\"headerlink\" title=\"容器单纯化\"></a>容器单纯化</h4><p>将应用程序分解成多个容器可以更轻松地水平扩展和重新使用容器。例如，Web应用程序堆栈可能由三个独立的容器组成，每个容器具有自己独特的映像，以解耦的方式管理Web应用程序，数据库和内存中缓存。尽可能地判断容器是否干净，模块化。<br>如果容器相互依赖，则可以使用Docker容器网络 来确保这些容器可以通信。</p>\n<h4 id=\"最小化层数\"><a href=\"#最小化层数\" class=\"headerlink\" title=\"最小化层数\"></a>最小化层数</h4><p>你需要找到<code>dockerfile</code> 可用性(长期可维护性)之间的平衡,并最大限度地减少其使用的层数。</p>\n<h4 id=\"排序多行参数\"><a href=\"#排序多行参数\" class=\"headerlink\" title=\"排序多行参数\"></a>排序多行参数</h4><p>只要有可能，通过以字母数字排序多行参数来缓解以后的更改。这将帮助您避免重复的包，并使列表更容易更新。这也使得PR更容易阅读和审查。在反斜杠（<code>\\</code>）之前添加一个空格。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y \\</span></span><br><span class=\"line\"><span class=\"bash\">  bzr \\</span></span><br><span class=\"line\"><span class=\"bash\">  cvs \\</span></span><br><span class=\"line\"><span class=\"bash\">  git \\</span></span><br><span class=\"line\"><span class=\"bash\">  mercurial \\</span></span><br><span class=\"line\"><span class=\"bash\">  subversion</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构建缓存\"><a href=\"#构建缓存\" class=\"headerlink\" title=\"构建缓存\"></a>构建缓存</h4><p>在构建映像的过程中，Docker将Dockerfile按照指定的顺序逐步执行每个指令。随着每条指令的检查，Docker将在其缓存中查找可以重用的现有映像，而不是创建一个新的（重复）映像。用<code>--no-cache=true</code>该<code>docker build</code>命令上,将不会使用缓存<br>何时会找到匹配的<code>image</code></p>\n<ul>\n<li>从已经在缓存中的父图像开始，将下一条指令与从该基础图像导出的所有子图像进行比较，以查看其中一个是否使用完全相同的指令构建。如果没有，则缓存无效。</li>\n<li>在大多数情况下，简单地比较Dockerfile与其中一个子图像的指令是足够的。但是，某些说明需要更多的检查和解释。</li>\n<li>对于ADD和COPY指令，检查图像中文件的内容，并为每个文件计算校验和。在这些校验和中不考虑文件的最后修改和最后访问的时间。在缓存查找期间，将校验和与现有映像中的校验和进行比较。如果文件（如内容和元数据）中有任何变化，则缓存无效。</li>\n<li>除了ADD和COPY命令之外，缓存检查不会查看容器中的文件来确定缓存匹配。例如，当处理RUN apt-get -y update命令时，将不会检查在容器中更新的文件以确定是否存在高速缓存命中。在这种情况下，只有命令字符串本身将用于查找匹配。</li>\n</ul>\n<p>一旦缓存无效，所有后续Dockerfile命令将生成新的映像，并且高速缓存将不被使用。</p>\n<h3 id=\"Dockerfile指令\"><a href=\"#Dockerfile指令\" class=\"headerlink\" title=\"Dockerfile指令\"></a>Dockerfile指令</h3><p>[x] FROM<br>[x] LABEL<br>[x] RUN<br>[x] APT-GET<br>[x] USING PIPES<br>[x] CMD<br>[x] EXPOSE<br>[x] ENV<br>[x] ADD or COPY<br>[x] ENTRYPOINT<br>[x] VOLUME<br>[x] USER<br>[x] WORKDIR<br>[x] ONBUILD</p>\n<h4 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h4><p>只要有可能，使用现有的官方存储库作为您的图像的基础。</p>\n<h4 id=\"LABEL\"><a href=\"#LABEL\" class=\"headerlink\" title=\"LABEL\"></a>LABEL</h4><p>您可以为图像添加标签,<code>(空格)</code>, <code>&quot;</code> 等字符需要转义</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set one or more individual labels</span></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span><span class=\"bash\"> com.example.version=<span class=\"string\">\"0.0.1-beta\"</span></span></span><br><span class=\"line\"><span class=\"bash\">LABEL vendor=<span class=\"string\">\"ACME Incorporated\"</span></span></span><br><span class=\"line\"><span class=\"bash\">LABEL com.example.release-date=<span class=\"string\">\"2015-02-12\"</span></span></span><br><span class=\"line\"><span class=\"bash\">LABEL com.example.version.is-production=<span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Set multiple labels on one line</span></span></span><br><span class=\"line\"><span class=\"bash\">LABEL com.example.version=<span class=\"string\">\"0.0.1-beta\"</span> com.example.release-date=<span class=\"string\">\"2015-02-12\"</span></span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Set multiple labels at once, using line-continuation characters to break long lines</span></span></span><br><span class=\"line\"><span class=\"bash\">LABEL vendor=ACME\\ Incorporated \\</span></span><br><span class=\"line\"><span class=\"bash\">      com.example.is-beta= \\</span></span><br><span class=\"line\"><span class=\"bash\">      com.example.is-production=<span class=\"string\">\"\"</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">      com.example.version=<span class=\"string\">\"0.0.1-beta\"</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">      com.example.release-date=<span class=\"string\">\"2015-02-12\"</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h4><p>为了使您Dockerfile更易于阅读，可理解和可维护，可以将RUN多个行分隔开，用反斜杠分隔的长整型或复杂语句。</p>\n<h4 id=\"APT-GET\"><a href=\"#APT-GET\" class=\"headerlink\" title=\"APT-GET\"></a>APT-GET</h4><p>可能最常见的用例RUN是应用程序<code>apt-get</code>。该 <code>RUN apt-get</code>命令用来安装软件包<br>避免，<code>RUN apt-get upgrade</code>或者<code>dist-upgrade</code>父系image中的许多“必需”程序包将无法在非特权的容器内升级</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-bar \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-baz \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-foo</span></span><br></pre></td></tr></table></figure>\n<p>apt-get update在RUN语句中单独使用会导致缓存问题和后续apt-get install指令失败,例如:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">14.04</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"bash\">RUN apt-get install -y curl</span></span><br></pre></td></tr></table></figure>\n<p>构建图像后，所有层都在Docker缓存中。假设你以后apt-get install通过添加额外的包来修改：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">14.04</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"bash\">RUN apt-get install -y curl nginx</span></span><br></pre></td></tr></table></figure>\n<p>Docker将初始化和修改的指令看作是相同的，并重用先前步骤中的缓存。结果apt-get update是不执行，因为构建使用缓存的版本。因为apt-get update没有运行，你的构建可能会有一个过时的版本curl和nginx 包。<br>使用<code>RUN apt-get update &amp;&amp; apt-get install -y</code>确保您的<code>Docker文件</code>安装最新的软件包版本，无需进一步的编码或手动干预。这种技术被称为<code>“缓存破坏”</code>。您还可以通过指定软件包版本来实现缓存清除。这被称为版本固定，版本固定强制构建以检索特定版本，而不管缓存中有什么。这种技术还可以减少由于所需软件包中意外的更改导致的故障。例如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-bar \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-baz \\</span></span><br><span class=\"line\"><span class=\"bash\">        package-foo=1.3.*</span></span><br></pre></td></tr></table></figure>\n<p>下是一个格式正确的RUN指导，显示所有apt-get</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y \\</span></span><br><span class=\"line\"><span class=\"bash\">    aufs-tools \\</span></span><br><span class=\"line\"><span class=\"bash\">    automake \\</span></span><br><span class=\"line\"><span class=\"bash\">    build-essential \\</span></span><br><span class=\"line\"><span class=\"bash\">    curl \\</span></span><br><span class=\"line\"><span class=\"bash\">    dpkg-sig \\</span></span><br><span class=\"line\"><span class=\"bash\">    libcap-dev \\</span></span><br><span class=\"line\"><span class=\"bash\">    libsqlite3-dev \\</span></span><br><span class=\"line\"><span class=\"bash\">    mercurial \\</span></span><br><span class=\"line\"><span class=\"bash\">    reprepro \\</span></span><br><span class=\"line\"><span class=\"bash\">    ruby1.9.1 \\</span></span><br><span class=\"line\"><span class=\"bash\">    ruby1.9.1-dev \\</span></span><br><span class=\"line\"><span class=\"bash\">    s3cmd=1.1.* \\</span></span><br><span class=\"line\"><span class=\"bash\"> &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"USING-PIPES\"><a href=\"#USING-PIPES\" class=\"headerlink\" title=\"USING PIPES\"></a>USING PIPES</h4><p>一些RUN命令取决于使用管道字符（<code>|</code>）将一个命令的输出管道传输到另一个命令的能力</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> wget -O - https://some.site | wc -l &gt; /number</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Docker使用/bin/sh -c解释器执行这些命令，该解释器仅评估管道中最后一个操作的退出代码以确定成功。在上面的示例中，只要wc -l命令成功，即使wget命令失败，此构建步骤也可以成功并生成新映像。</li>\n<li>您希望命令由于管道中任何阶段的错误而失败，请先set -o pipefail &amp;&amp;确定一个意外的错误会阻止构建从无意中成功。</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">set</span> -o pipefail &amp;&amp; wget -O - https://some.site | wc -l &gt; /number</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>注意</code>：并非所有的shell都支持该<code>-o pipefail</code>选项。在这种情况下（例如<code>dash shell</code>，它是基于<code>Debian</code>的映像的默认<code>shell</code>），请考虑使用<code>exec</code>形式<code>RUN</code>来显式选择一个支持该<code>pipefail</code>选项的shell 。</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [<span class=\"string\">\"/bin/bash\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"set -o pipefail &amp;&amp; wget -O - https://some.site | wc -l &gt; /number\"</span>]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h4><p><code>CMD</code>指令应用于运行图像包含的软件以及任何参数。<br>如果图像用于服务，例如Apache和Rails，则可以运行类似的操作<code>CMD [&quot;apache2&quot;,&quot;-DFOREGROUND&quot;]</code>。这种形式的指令是推荐用于任何基于服务的图像。<br><code>CMD</code>应该给出一个交互式的<code>shell</code>，比如<code>bash</code>，<code>python</code>和<code>perl</code>。例如，<code>CMD [&quot;perl&quot;, &quot;-de0&quot;]</code>，<code>CMD [&quot;python&quot;]</code>，或 <code>CMD [“php”, “-a”]</code>。使用此表单意味着当您执行类似的操作时<code>docker run -it python</code>，您将被放入可用的<code>shell</code>中，随时可以使用。</p>\n<h4 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h4><p><code>EXPOSE</code>指令指示容器将侦听连接的端口.例如，包含Apache Web服务器EXPOSE 80的映像将使用，而包含MongoDB的映像将使用EXPOSE 27017等等</p>\n<h4 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h4><p>为了使新的软件更容易运行，您可以使用它<code>ENV</code>来更新<code>PATH</code>容器安装的软件的 环境变量。例如，<code>ENV PATH /usr/local/nginx/bin:$PATH</code>将确保<code>CMD [“nginx”]</code> 只是工作。<br>该ENV指令对于提供特定于要集中化的服务的必需环境变量也很有用，例如Postgres’s PGDATA。<br>最后，ENV也可以用来设置常用的版本号，使得版本颠覆更容易维</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ENV</span> PG_MAJOR <span class=\"number\">9.3</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PG_VERSION <span class=\"number\">9.3</span>.<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> curl -SL http://example.com/postgres-<span class=\"variable\">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span></span><br><span class=\"line\"><span class=\"bash\">ENV PATH /usr/<span class=\"built_in\">local</span>/postgres-<span class=\"variable\">$PG_MAJOR</span>/bin:<span class=\"variable\">$PATH</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"ADD-or-COPY\"><a href=\"#ADD-or-COPY\" class=\"headerlink\" title=\"ADD or COPY\"></a>ADD or COPY</h4><p><code>ADD</code>  和 <code>COPY</code> 的功能有点类似,但是一般优先采用<code>COPY</code>, 因为它更加透明.<br>COPY只支持将本地文件基本复制到容器中，同时ADD具有一些不是立即显而易见的功能（如本地仅提取和远程URL支持）。因此，最好的用途ADD是将本地<code>tar</code>文件自动提取到图像中，如同 <code>ADD rootfs.tar.xz /</code>。<br>因为图像大小很重要，ADD因此强烈不鼓励使用远程URL提取包; 你应该使用curl或wget替代。这样，您可以删除在解压后不再需要的文件，而不必在图像中添加另一个图层.</p>\n<h5 id=\"错误实例\"><a href=\"#错误实例\" class=\"headerlink\" title=\"错误实例\"></a>错误实例</h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> http://example.com/big.tar.xz /usr/src/things/</span></span><br><span class=\"line\"><span class=\"bash\">RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things</span></span><br><span class=\"line\"><span class=\"bash\">RUN make -C /usr/src/things all</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"正确实例\"><a href=\"#正确实例\" class=\"headerlink\" title=\"正确实例\"></a>正确实例</h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir -p /usr/src/things \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; curl -SL http://example.com/big.tar.xz \\</span></span><br><span class=\"line\"><span class=\"bash\">    | tar -xJC /usr/src/things \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; make -C /usr/src/things all</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h4><h4 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h4><p>该VOLUME指令应用于公开您的docker容器创建的任何数据库存储区域，配置存储或文件/文件夹。强烈建议您使用图像VOLUME的任何可变和/或用户可维修的部分。</p>\n<h4 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h4><h4 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h4><p>为了清晰可靠，您应该永远为您使用绝对路径 WORKDIR。此外，您应该使用，WORKDIR而不是增加的说明，如RUN cd … &amp;&amp; do-something难以阅读，排除故障和维护</p>\n<h4 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h4><p><code>ONBUILD</code>命令在当前<code>Dockerfile</code>构建完成后执行。 ONBUILD在导出FROM当前图像的任何子图像中执行。将该ONBUILD命令视为父母Dockerfile给予孩子的指示Dockerfile。<br>Docker构建<code>ONBUILD</code>在子节点<code>Dockerfile</code>中的任何命令之前执行命令。<br>放入ADD或COPY放入时要小心ONBUILD。如果新版本的上下文缺少添加的资源，“onbuild”映像将会严重失败。如上所述，添加单独的标签将有助于通过允许Dockerfile作者做出选择来缓解这一点</p>\n"},{"title":"Docker安装","date":"2017-11-10T08:13:57.000Z","type":"post","_content":"\n# Docker安装\n\n## Ubuntu 14.04 16.04 (使用apt-get进行安装)\n\n- Step 1: 安装必要的一些系统工具\n\n```shell\n  sudo apt-get update\n  sudo apt-get -y install apt-transport-https ca-certificates\n  curl software-properties-common\n```\n\n- Step 2: 安装GPG证书\n\n```shell\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n- Step 3: 写入软件源信息\n\n```shell\n sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n- Step 4: 更新并安装Docker-CE\n\n```shell\n  sudo apt-get -y update\n  sudo apt-get -y install docker-ce \n```\n\n### 安装指定版本的Docker-CE:\n\n- Step 1: 查找Docker-CE的版本:\n\n```shell\napt-cache madison docker-ce # docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages\ndocker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages\n```\n\n- Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)\n\n```shell\nsudo apt-get -y install docker-ce=[VERSION]\n```\n\n- Step 3: 安装最新版本的Docker-CE:\n\n```shell\n sudo apt-get -y install docker-ce\n```\n\n## CentOS 7 (使用yum进行安装)\n\n- step 1: 安装必要的一些系统工具\n\n```shell\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n- Step 2: 添加软件源信息\n\n```shell\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n- Step 3: 更新并安装 Docker-CE\n\n```shell\nsudo yum makecache fast\nsudo yum -y install docker-ce\n```\n\n- Step 4: 开启Docker服务\n\n```shell\n  sudo service docker start\n```\n\n### 安装指定版本的Docker-CE\n\n- Step 1: 查找Docker-CE的版本\n\n```shell\n yum list docker-ce.x86_64 --showduplicates | sort -r\n Loading mirror speeds from cached hostfile\n Loaded plugins: branch, fastestmirror, langpacks\n docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable\n docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable\n docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable\n Available Packages\n```\n\n- Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)\n\n```shell\nsudo yum -y install docker-ce-[VERSION]\n```\n\n- 安装校验 查看docker信息\n\n```shell\ndocker version\n```\n\n- 运行一个简单的  docker image。  会输出一个 hello world!\n\n```shell\ndocker run 'hello-world'\n```","source":"_posts/docker/Docker安装.md","raw":"---\ntitle: Docker安装\ndate: 2017-11-10 16:13:57\ntype: post\ntags: \n    - docker\ncategories: docker\n---\n\n# Docker安装\n\n## Ubuntu 14.04 16.04 (使用apt-get进行安装)\n\n- Step 1: 安装必要的一些系统工具\n\n```shell\n  sudo apt-get update\n  sudo apt-get -y install apt-transport-https ca-certificates\n  curl software-properties-common\n```\n\n- Step 2: 安装GPG证书\n\n```shell\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n- Step 3: 写入软件源信息\n\n```shell\n sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n- Step 4: 更新并安装Docker-CE\n\n```shell\n  sudo apt-get -y update\n  sudo apt-get -y install docker-ce \n```\n\n### 安装指定版本的Docker-CE:\n\n- Step 1: 查找Docker-CE的版本:\n\n```shell\napt-cache madison docker-ce # docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages\ndocker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages\n```\n\n- Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)\n\n```shell\nsudo apt-get -y install docker-ce=[VERSION]\n```\n\n- Step 3: 安装最新版本的Docker-CE:\n\n```shell\n sudo apt-get -y install docker-ce\n```\n\n## CentOS 7 (使用yum进行安装)\n\n- step 1: 安装必要的一些系统工具\n\n```shell\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n- Step 2: 添加软件源信息\n\n```shell\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n- Step 3: 更新并安装 Docker-CE\n\n```shell\nsudo yum makecache fast\nsudo yum -y install docker-ce\n```\n\n- Step 4: 开启Docker服务\n\n```shell\n  sudo service docker start\n```\n\n### 安装指定版本的Docker-CE\n\n- Step 1: 查找Docker-CE的版本\n\n```shell\n yum list docker-ce.x86_64 --showduplicates | sort -r\n Loading mirror speeds from cached hostfile\n Loaded plugins: branch, fastestmirror, langpacks\n docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable\n docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable\n docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable\n Available Packages\n```\n\n- Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)\n\n```shell\nsudo yum -y install docker-ce-[VERSION]\n```\n\n- 安装校验 查看docker信息\n\n```shell\ndocker version\n```\n\n- 运行一个简单的  docker image。  会输出一个 hello world!\n\n```shell\ndocker run 'hello-world'\n```","slug":"docker/Docker安装","published":1,"updated":"2018-11-16T02:28:19.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonx65ss000li8uscf8f1tou","content":"<h1 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h1><h2 id=\"Ubuntu-14-04-16-04-使用apt-get进行安装\"><a href=\"#Ubuntu-14-04-16-04-使用apt-get进行安装\" class=\"headerlink\" title=\"Ubuntu 14.04 16.04 (使用apt-get进行安装)\"></a>Ubuntu 14.04 16.04 (使用apt-get进行安装)</h2><ul>\n<li>Step 1: 安装必要的一些系统工具</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y install apt-transport-https ca-certificates</span><br><span class=\"line\">curl software-properties-common</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 2: 安装GPG证书</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 3: 写入软件源信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 4: 更新并安装Docker-CE</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y update</span><br><span class=\"line\">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装指定版本的Docker-CE\"><a href=\"#安装指定版本的Docker-CE\" class=\"headerlink\" title=\"安装指定版本的Docker-CE:\"></a>安装指定版本的Docker-CE:</h3><ul>\n<li>Step 1: 查找Docker-CE的版本:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache madison docker-ce # docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><br><span class=\"line\">docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install docker-ce=[VERSION]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 3: 安装最新版本的Docker-CE:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>\n<h2 id=\"CentOS-7-使用yum进行安装\"><a href=\"#CentOS-7-使用yum进行安装\" class=\"headerlink\" title=\"CentOS 7 (使用yum进行安装)\"></a>CentOS 7 (使用yum进行安装)</h2><ul>\n<li>step 1: 安装必要的一些系统工具</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 2: 添加软件源信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 3: 更新并安装 Docker-CE</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 4: 开启Docker服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service docker start</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装指定版本的Docker-CE-1\"><a href=\"#安装指定版本的Docker-CE-1\" class=\"headerlink\" title=\"安装指定版本的Docker-CE\"></a>安装指定版本的Docker-CE</h3><ul>\n<li>Step 1: 查找Docker-CE的版本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">Loaded plugins: branch, fastestmirror, langpacks</span><br><span class=\"line\">docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable</span><br><span class=\"line\">Available Packages</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install docker-ce-[VERSION]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装校验 查看docker信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行一个简单的  docker image。  会输出一个 hello world!</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run 'hello-world'</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h1><h2 id=\"Ubuntu-14-04-16-04-使用apt-get进行安装\"><a href=\"#Ubuntu-14-04-16-04-使用apt-get进行安装\" class=\"headerlink\" title=\"Ubuntu 14.04 16.04 (使用apt-get进行安装)\"></a>Ubuntu 14.04 16.04 (使用apt-get进行安装)</h2><ul>\n<li>Step 1: 安装必要的一些系统工具</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y install apt-transport-https ca-certificates</span><br><span class=\"line\">curl software-properties-common</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 2: 安装GPG证书</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 3: 写入软件源信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 4: 更新并安装Docker-CE</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y update</span><br><span class=\"line\">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装指定版本的Docker-CE\"><a href=\"#安装指定版本的Docker-CE\" class=\"headerlink\" title=\"安装指定版本的Docker-CE:\"></a>安装指定版本的Docker-CE:</h3><ul>\n<li>Step 1: 查找Docker-CE的版本:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache madison docker-ce # docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><br><span class=\"line\">docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install docker-ce=[VERSION]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 3: 安装最新版本的Docker-CE:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>\n<h2 id=\"CentOS-7-使用yum进行安装\"><a href=\"#CentOS-7-使用yum进行安装\" class=\"headerlink\" title=\"CentOS 7 (使用yum进行安装)\"></a>CentOS 7 (使用yum进行安装)</h2><ul>\n<li>step 1: 安装必要的一些系统工具</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 2: 添加软件源信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 3: 更新并安装 Docker-CE</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 4: 开启Docker服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service docker start</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装指定版本的Docker-CE-1\"><a href=\"#安装指定版本的Docker-CE-1\" class=\"headerlink\" title=\"安装指定版本的Docker-CE\"></a>安装指定版本的Docker-CE</h3><ul>\n<li>Step 1: 查找Docker-CE的版本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">Loaded plugins: branch, fastestmirror, langpacks</span><br><span class=\"line\">docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable</span><br><span class=\"line\">Available Packages</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install docker-ce-[VERSION]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装校验 查看docker信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行一个简单的  docker image。  会输出一个 hello world!</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run 'hello-world'</span><br></pre></td></tr></table></figure>"},{"title":"docker stack","date":"2017-11-14T08:13:57.000Z","type":"post","_content":"\n# docker stack\n\n> 将到达分布式应用程序层次结构的顶部：堆栈。堆栈是一组相互关联的服务，共享依赖关系，并且可以协调一致。单个堆栈能够定义和协调整个应用程序的功能（尽管非常复杂的应用程序可能希望使用多个堆栈）。\n\n## 添加新服务并重新部署\n\n很容易为我们的docker-compose.yml文件添加服务。首先，我们添加一个免费的可视化服务，让我们看看我们的群集如何调度容器。\n\n1. `docker-compose.yml` 在编辑器中打开并将其内容替换为以下内容。请务必更换 `username/repo:tag` 您的图像细节。\n\n```yml\nversion: \"3\"\nservices:\n  web:\n    # replace username/repo:tag with your name and image details\n    image: username/repo:tag\n    deploy:\n      replicas: 5\n      restart_policy:\n        condition: on-failure\n      resources:\n        limits:\n          cpus: \"0.1\"\n          memory: 50M\n    ports:\n      - \"80:80\"\n    networks:\n      - webnet\n  visualizer:\n    image: dockersamples/visualizer:stable\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n    networks:\n      - webnet\nnetworks:\n  webnet:\n```\n\n这里唯一新的是对等服务web，命名visualizer。您将在这里看到两个新的东西：一个volumes关键字，让可视化程序访问Docker的主机套接字文件以及一个placement关键字，确保这个服务只能运行在群组管理器上，而不是工作人员。这是因为由Docker创建的开源项目构建的这个容器显示了在图中以群集运行的Docker服务。\n\n2. 确保你的shell被配置为通话myvm1（全部的例子在这里）。\n\n- 运行docker-machine ls列出机器，并确保您已连接到myvm1，如下星号所示。\n- 如果需要，重新运行docker-machine env myvm1，然后运行给定的命令配置shell。\n\n在Mac或Linux上，命令是：`eval $(docker-machine env myvm1)`\n\n在Windows上，命令是：`& \"C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker-machine.exe\" env myvm1 | Invoke-Expression`\n\n1. docker stack deploy在管理员上重新运行命令，任何需要更新的服务将被更新：\n\n```bash\n$ docker stack deploy -c docker-compose.yml getstartedlab\nUpdating service getstartedlab_web (id: angi1bf5e4to03qu9f93trnxm)\nUpdating service getstartedlab_visualizer (id: l9mnwkeq2jiononb5ihz9u7a4)\n```\n\n1. 看看可视化器。\n\n您在Compose文件中看到在visualizer端口8080上运行docker-machine ls。通过运行获取其中一个节点的IP地址。转到8080端口的IP地址，您将看到可视化运行：\n![docker stack1](docker stack/docker stack1.png)\n\n单个副本visualizer正如您所期望的那样在管理器上运行，并且5个实例web分布在群集中。您可以通过运行`docker stack ps <stack>`以下方式来证实这种可视化:\n\n```bash\n docker stack ps getstartedlab\n```\n\n可视化器是一种独立的服务，可以在包含在堆栈中的任何应用程序中运行。它不依赖于其他任何东西。现在让我们创建一个确实具有依赖性的服务：Redis服务将提供一个访客计数器。\n\n## 数据\n\n让我们再次浏览相同的工作流程，添加一个用于存储应用数据的Redis数据库。\n\n1. 保存这个新docker-compose.yml文件，最后添加一个Redis服务。请务必更换username/repo:tag您的图像细节。\n\n```yml\nversion: \"3\"\nservices:\n  web:\n    # replace username/repo:tag with your name and image details\n    image: username/repo:tag\n    deploy:\n      replicas: 5\n      restart_policy:\n        condition: on-failure\n      resources:\n        limits:\n          cpus: \"0.1\"\n          memory: 50M\n    ports:\n      - \"80:80\"\n    networks:\n      - webnet\n  visualizer:\n    image: dockersamples/visualizer:stable\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n    networks:\n      - webnet\n  redis:\n    image: redis\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - /home/docker/data:/data\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n    command: redis-server --appendonly yes\n    networks:\n      - webnet\nnetworks:\n  webnet:\n```\n\nRedis在Docker图书馆有一个官方形象，并且被赋予了简短的image名字`redis`，所以`username/repo`在这里没有符号。Redis端口6379已由Redis预配置为从容器暴露给主机，在我们的撰写文件中，我们将其从主机公开到世界各地，因此您可以输入任何您的IP地址节点进入Redis Desktop Manager并管理此Redis实例，如果您这样选择。\n\n最重要的是，在`redis`规范中有几件事情使数据在这个堆栈的部署之间保持不变：\n\n- redis 总是在经理上运行，所以它总是使用相同的文件系统。\n- redis访问主机文件系统中的任意目录/data，这是Redis存储数据的位置。\n  \n在一起，这是在您的主机的物理文件系统中为Redis数据创建“真相的根源”。没有这个，Redis会将其数据存储 /data在容器的文件系统内，如果容器被重新部署，那么它将被清除。\n\n这个真理的来源有两个部分：\n\n- 您放置在Redis服务上的放置约束，确保它始终使用相同的主机。\n- 您创建的卷允许容器访问./data（在主机上）为/data（在Redis容器内）。当容器来回走动时，存储在./data指定主机上的文件将持续存在，从而实现连续性。\n  \n您已准备好部署新的Redis使用堆栈。\n\n1. `./data` 在管理器上创建一个目录：\n\n```bash\ndocker-machine ssh myvm1 \"mkdir ./data\"\n```\n\n1. 确保你的shell被配置为通话myvm1。\n\n- 运行docker-machine ls列出机器，并确保您已连接到myvm1，如下星号所示。\n- 如果需要，重新运行docker-machine env myvm1，然后运行给定的命令配置shell。\n\n  在Mac或Linux上，命令是：`eval $(docker-machine env myvm1)`\n  在Windows上，命令是：`& \"C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker-machine.exe\" env myvm1 | Invoke-Expression`\n\n2. 再运行docker stack deploy一次\n\n```bash\ndocker stack deploy -c docker-compose.yml getstartedlab\n```\n\n3. 运行docker service ls以验证三个服务是否按预期运行。\n\n```bash\n$ docker service ls\nID                  NAME                       MODE                REPLICAS            IMAGE                             PORTS\nx7uij6xb4foj        getstartedlab_redis        replicated          1/1                 redis:latest                      *:6379->6379/tcp\nn5rvhm52ykq7        getstartedlab_visualizer   replicated          1/1                 dockersamples/visualizer:stable   *:8080->8080/tcp\nmifd433bti1d        getstartedlab_web          replicated          5/5                 orangesnap/getstarted:latest    *:80->80/tcp\n```\n\n1. 检查您的一个节点（例如`http://192.168.99.101`）的网页，您将看到访客计数器的结果，该计数器现在已存在，并存储有关Redis的信息。\n\n![docker-redis](docker stack/docker-redis.png)\n\n另外，检查可视化在上的任一节点的IP地址端口8080，你会看到redis与一起运行服务web和visualizer服务。\n\n![docker stack2](docker stack/docker stack2.png)","source":"_posts/docker/docker stack.md","raw":"---\ntitle: docker stack\ndate: 2017-11-14 16:13:57\ntype: post\ntags: \n    - docker\ncategories: docker\n---\n\n# docker stack\n\n> 将到达分布式应用程序层次结构的顶部：堆栈。堆栈是一组相互关联的服务，共享依赖关系，并且可以协调一致。单个堆栈能够定义和协调整个应用程序的功能（尽管非常复杂的应用程序可能希望使用多个堆栈）。\n\n## 添加新服务并重新部署\n\n很容易为我们的docker-compose.yml文件添加服务。首先，我们添加一个免费的可视化服务，让我们看看我们的群集如何调度容器。\n\n1. `docker-compose.yml` 在编辑器中打开并将其内容替换为以下内容。请务必更换 `username/repo:tag` 您的图像细节。\n\n```yml\nversion: \"3\"\nservices:\n  web:\n    # replace username/repo:tag with your name and image details\n    image: username/repo:tag\n    deploy:\n      replicas: 5\n      restart_policy:\n        condition: on-failure\n      resources:\n        limits:\n          cpus: \"0.1\"\n          memory: 50M\n    ports:\n      - \"80:80\"\n    networks:\n      - webnet\n  visualizer:\n    image: dockersamples/visualizer:stable\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n    networks:\n      - webnet\nnetworks:\n  webnet:\n```\n\n这里唯一新的是对等服务web，命名visualizer。您将在这里看到两个新的东西：一个volumes关键字，让可视化程序访问Docker的主机套接字文件以及一个placement关键字，确保这个服务只能运行在群组管理器上，而不是工作人员。这是因为由Docker创建的开源项目构建的这个容器显示了在图中以群集运行的Docker服务。\n\n2. 确保你的shell被配置为通话myvm1（全部的例子在这里）。\n\n- 运行docker-machine ls列出机器，并确保您已连接到myvm1，如下星号所示。\n- 如果需要，重新运行docker-machine env myvm1，然后运行给定的命令配置shell。\n\n在Mac或Linux上，命令是：`eval $(docker-machine env myvm1)`\n\n在Windows上，命令是：`& \"C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker-machine.exe\" env myvm1 | Invoke-Expression`\n\n1. docker stack deploy在管理员上重新运行命令，任何需要更新的服务将被更新：\n\n```bash\n$ docker stack deploy -c docker-compose.yml getstartedlab\nUpdating service getstartedlab_web (id: angi1bf5e4to03qu9f93trnxm)\nUpdating service getstartedlab_visualizer (id: l9mnwkeq2jiononb5ihz9u7a4)\n```\n\n1. 看看可视化器。\n\n您在Compose文件中看到在visualizer端口8080上运行docker-machine ls。通过运行获取其中一个节点的IP地址。转到8080端口的IP地址，您将看到可视化运行：\n![docker stack1](docker stack/docker stack1.png)\n\n单个副本visualizer正如您所期望的那样在管理器上运行，并且5个实例web分布在群集中。您可以通过运行`docker stack ps <stack>`以下方式来证实这种可视化:\n\n```bash\n docker stack ps getstartedlab\n```\n\n可视化器是一种独立的服务，可以在包含在堆栈中的任何应用程序中运行。它不依赖于其他任何东西。现在让我们创建一个确实具有依赖性的服务：Redis服务将提供一个访客计数器。\n\n## 数据\n\n让我们再次浏览相同的工作流程，添加一个用于存储应用数据的Redis数据库。\n\n1. 保存这个新docker-compose.yml文件，最后添加一个Redis服务。请务必更换username/repo:tag您的图像细节。\n\n```yml\nversion: \"3\"\nservices:\n  web:\n    # replace username/repo:tag with your name and image details\n    image: username/repo:tag\n    deploy:\n      replicas: 5\n      restart_policy:\n        condition: on-failure\n      resources:\n        limits:\n          cpus: \"0.1\"\n          memory: 50M\n    ports:\n      - \"80:80\"\n    networks:\n      - webnet\n  visualizer:\n    image: dockersamples/visualizer:stable\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n    networks:\n      - webnet\n  redis:\n    image: redis\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - /home/docker/data:/data\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n    command: redis-server --appendonly yes\n    networks:\n      - webnet\nnetworks:\n  webnet:\n```\n\nRedis在Docker图书馆有一个官方形象，并且被赋予了简短的image名字`redis`，所以`username/repo`在这里没有符号。Redis端口6379已由Redis预配置为从容器暴露给主机，在我们的撰写文件中，我们将其从主机公开到世界各地，因此您可以输入任何您的IP地址节点进入Redis Desktop Manager并管理此Redis实例，如果您这样选择。\n\n最重要的是，在`redis`规范中有几件事情使数据在这个堆栈的部署之间保持不变：\n\n- redis 总是在经理上运行，所以它总是使用相同的文件系统。\n- redis访问主机文件系统中的任意目录/data，这是Redis存储数据的位置。\n  \n在一起，这是在您的主机的物理文件系统中为Redis数据创建“真相的根源”。没有这个，Redis会将其数据存储 /data在容器的文件系统内，如果容器被重新部署，那么它将被清除。\n\n这个真理的来源有两个部分：\n\n- 您放置在Redis服务上的放置约束，确保它始终使用相同的主机。\n- 您创建的卷允许容器访问./data（在主机上）为/data（在Redis容器内）。当容器来回走动时，存储在./data指定主机上的文件将持续存在，从而实现连续性。\n  \n您已准备好部署新的Redis使用堆栈。\n\n1. `./data` 在管理器上创建一个目录：\n\n```bash\ndocker-machine ssh myvm1 \"mkdir ./data\"\n```\n\n1. 确保你的shell被配置为通话myvm1。\n\n- 运行docker-machine ls列出机器，并确保您已连接到myvm1，如下星号所示。\n- 如果需要，重新运行docker-machine env myvm1，然后运行给定的命令配置shell。\n\n  在Mac或Linux上，命令是：`eval $(docker-machine env myvm1)`\n  在Windows上，命令是：`& \"C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker-machine.exe\" env myvm1 | Invoke-Expression`\n\n2. 再运行docker stack deploy一次\n\n```bash\ndocker stack deploy -c docker-compose.yml getstartedlab\n```\n\n3. 运行docker service ls以验证三个服务是否按预期运行。\n\n```bash\n$ docker service ls\nID                  NAME                       MODE                REPLICAS            IMAGE                             PORTS\nx7uij6xb4foj        getstartedlab_redis        replicated          1/1                 redis:latest                      *:6379->6379/tcp\nn5rvhm52ykq7        getstartedlab_visualizer   replicated          1/1                 dockersamples/visualizer:stable   *:8080->8080/tcp\nmifd433bti1d        getstartedlab_web          replicated          5/5                 orangesnap/getstarted:latest    *:80->80/tcp\n```\n\n1. 检查您的一个节点（例如`http://192.168.99.101`）的网页，您将看到访客计数器的结果，该计数器现在已存在，并存储有关Redis的信息。\n\n![docker-redis](docker stack/docker-redis.png)\n\n另外，检查可视化在上的任一节点的IP地址端口8080，你会看到redis与一起运行服务web和visualizer服务。\n\n![docker stack2](docker stack/docker stack2.png)","slug":"docker/docker stack","published":1,"updated":"2018-11-16T03:27:45.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonx65sw000qi8uso9pmeti1","content":"<h1 id=\"docker-stack\"><a href=\"#docker-stack\" class=\"headerlink\" title=\"docker stack\"></a>docker stack</h1><blockquote>\n<p>将到达分布式应用程序层次结构的顶部：堆栈。堆栈是一组相互关联的服务，共享依赖关系，并且可以协调一致。单个堆栈能够定义和协调整个应用程序的功能（尽管非常复杂的应用程序可能希望使用多个堆栈）。</p>\n</blockquote>\n<h2 id=\"添加新服务并重新部署\"><a href=\"#添加新服务并重新部署\" class=\"headerlink\" title=\"添加新服务并重新部署\"></a>添加新服务并重新部署</h2><p>很容易为我们的docker-compose.yml文件添加服务。首先，我们添加一个免费的可视化服务，让我们看看我们的群集如何调度容器。</p>\n<ol>\n<li><code>docker-compose.yml</code> 在编辑器中打开并将其内容替换为以下内容。请务必更换 <code>username/repo:tag</code> 您的图像细节。</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\">    <span class=\"comment\"># replace username/repo:tag with your name and image details</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">username/repo:tag</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      replicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">      restart_policy:</span></span><br><span class=\"line\"><span class=\"attr\">        condition:</span> <span class=\"string\">on-failure</span></span><br><span class=\"line\"><span class=\"attr\">      resources:</span></span><br><span class=\"line\"><span class=\"attr\">        limits:</span></span><br><span class=\"line\"><span class=\"attr\">          cpus:</span> <span class=\"string\">\"0.1\"</span></span><br><span class=\"line\"><span class=\"attr\">          memory:</span> <span class=\"number\">50</span><span class=\"string\">M</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">  visualizer:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">dockersamples/visualizer:stable</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8080:8080\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      placement:</span></span><br><span class=\"line\"><span class=\"attr\">        constraints:</span> <span class=\"string\">[node.role</span> <span class=\"string\">==</span> <span class=\"string\">manager]</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  webnet:</span></span><br></pre></td></tr></table></figure>\n<p>这里唯一新的是对等服务web，命名visualizer。您将在这里看到两个新的东西：一个volumes关键字，让可视化程序访问Docker的主机套接字文件以及一个placement关键字，确保这个服务只能运行在群组管理器上，而不是工作人员。这是因为由Docker创建的开源项目构建的这个容器显示了在图中以群集运行的Docker服务。</p>\n<ol start=\"2\">\n<li>确保你的shell被配置为通话myvm1（全部的例子在这里）。</li>\n</ol>\n<ul>\n<li>运行docker-machine ls列出机器，并确保您已连接到myvm1，如下星号所示。</li>\n<li>如果需要，重新运行docker-machine env myvm1，然后运行给定的命令配置shell。</li>\n</ul>\n<p>在Mac或Linux上，命令是：<code>eval $(docker-machine env myvm1)</code></p>\n<p>在Windows上，命令是：<code>&amp; &quot;C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker-machine.exe&quot; env myvm1 | Invoke-Expression</code></p>\n<ol>\n<li>docker stack deploy在管理员上重新运行命令，任何需要更新的服务将被更新：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stack deploy -c docker-compose.yml getstartedlab</span><br><span class=\"line\">Updating service getstartedlab_web (id: angi1bf5e4to03qu9f93trnxm)</span><br><span class=\"line\">Updating service getstartedlab_visualizer (id: l9mnwkeq2jiononb5ihz9u7a4)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>看看可视化器。</li>\n</ol>\n<p>您在Compose文件中看到在visualizer端口8080上运行docker-machine ls。通过运行获取其中一个节点的IP地址。转到8080端口的IP地址，您将看到可视化运行：<br><img src=\"/2017/11/14/docker/docker stack/docker stack1.png\" alt=\"docker stack1\"></p>\n<p>单个副本visualizer正如您所期望的那样在管理器上运行，并且5个实例web分布在群集中。您可以通过运行<code>docker stack ps &lt;stack&gt;</code>以下方式来证实这种可视化:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack ps getstartedlab</span><br></pre></td></tr></table></figure>\n<p>可视化器是一种独立的服务，可以在包含在堆栈中的任何应用程序中运行。它不依赖于其他任何东西。现在让我们创建一个确实具有依赖性的服务：Redis服务将提供一个访客计数器。</p>\n<h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2><p>让我们再次浏览相同的工作流程，添加一个用于存储应用数据的Redis数据库。</p>\n<ol>\n<li>保存这个新docker-compose.yml文件，最后添加一个Redis服务。请务必更换username/repo:tag您的图像细节。</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\">    <span class=\"comment\"># replace username/repo:tag with your name and image details</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">username/repo:tag</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      replicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">      restart_policy:</span></span><br><span class=\"line\"><span class=\"attr\">        condition:</span> <span class=\"string\">on-failure</span></span><br><span class=\"line\"><span class=\"attr\">      resources:</span></span><br><span class=\"line\"><span class=\"attr\">        limits:</span></span><br><span class=\"line\"><span class=\"attr\">          cpus:</span> <span class=\"string\">\"0.1\"</span></span><br><span class=\"line\"><span class=\"attr\">          memory:</span> <span class=\"number\">50</span><span class=\"string\">M</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">  visualizer:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">dockersamples/visualizer:stable</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8080:8080\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      placement:</span></span><br><span class=\"line\"><span class=\"attr\">        constraints:</span> <span class=\"string\">[node.role</span> <span class=\"string\">==</span> <span class=\"string\">manager]</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"6379:6379\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/home/docker/data:/data</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      placement:</span></span><br><span class=\"line\"><span class=\"attr\">        constraints:</span> <span class=\"string\">[node.role</span> <span class=\"string\">==</span> <span class=\"string\">manager]</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">redis-server</span> <span class=\"bullet\">--appendonly</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  webnet:</span></span><br></pre></td></tr></table></figure>\n<p>Redis在Docker图书馆有一个官方形象，并且被赋予了简短的image名字<code>redis</code>，所以<code>username/repo</code>在这里没有符号。Redis端口6379已由Redis预配置为从容器暴露给主机，在我们的撰写文件中，我们将其从主机公开到世界各地，因此您可以输入任何您的IP地址节点进入Redis Desktop Manager并管理此Redis实例，如果您这样选择。</p>\n<p>最重要的是，在<code>redis</code>规范中有几件事情使数据在这个堆栈的部署之间保持不变：</p>\n<ul>\n<li>redis 总是在经理上运行，所以它总是使用相同的文件系统。</li>\n<li>redis访问主机文件系统中的任意目录/data，这是Redis存储数据的位置。</li>\n</ul>\n<p>在一起，这是在您的主机的物理文件系统中为Redis数据创建“真相的根源”。没有这个，Redis会将其数据存储 /data在容器的文件系统内，如果容器被重新部署，那么它将被清除。</p>\n<p>这个真理的来源有两个部分：</p>\n<ul>\n<li>您放置在Redis服务上的放置约束，确保它始终使用相同的主机。</li>\n<li>您创建的卷允许容器访问./data（在主机上）为/data（在Redis容器内）。当容器来回走动时，存储在./data指定主机上的文件将持续存在，从而实现连续性。</li>\n</ul>\n<p>您已准备好部署新的Redis使用堆栈。</p>\n<ol>\n<li><code>./data</code> 在管理器上创建一个目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine ssh myvm1 <span class=\"string\">\"mkdir ./data\"</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>确保你的shell被配置为通话myvm1。</li>\n</ol>\n<ul>\n<li>运行docker-machine ls列出机器，并确保您已连接到myvm1，如下星号所示。</li>\n<li><p>如果需要，重新运行docker-machine env myvm1，然后运行给定的命令配置shell。</p>\n<p>在Mac或Linux上，命令是：<code>eval $(docker-machine env myvm1)</code><br>在Windows上，命令是：<code>&amp; &quot;C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker-machine.exe&quot; env myvm1 | Invoke-Expression</code></p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>再运行docker stack deploy一次</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>运行docker service ls以验证三个服务是否按预期运行。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ls</span><br><span class=\"line\">ID                  NAME                       MODE                REPLICAS            IMAGE                             PORTS</span><br><span class=\"line\">x7uij6xb4foj        getstartedlab_redis        replicated          1/1                 redis:latest                      *:6379-&gt;6379/tcp</span><br><span class=\"line\">n5rvhm52ykq7        getstartedlab_visualizer   replicated          1/1                 dockersamples/visualizer:stable   *:8080-&gt;8080/tcp</span><br><span class=\"line\">mifd433bti1d        getstartedlab_web          replicated          5/5                 orangesnap/getstarted:latest    *:80-&gt;80/tcp</span><br></pre></td></tr></table></figure>\n<ol>\n<li>检查您的一个节点（例如<code>http://192.168.99.101</code>）的网页，您将看到访客计数器的结果，该计数器现在已存在，并存储有关Redis的信息。</li>\n</ol>\n<p><img src=\"/2017/11/14/docker/docker stack/docker-redis.png\" alt=\"docker-redis\"></p>\n<p>另外，检查可视化在上的任一节点的IP地址端口8080，你会看到redis与一起运行服务web和visualizer服务。</p>\n<p><img src=\"/2017/11/14/docker/docker stack/docker stack2.png\" alt=\"docker stack2\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker-stack\"><a href=\"#docker-stack\" class=\"headerlink\" title=\"docker stack\"></a>docker stack</h1><blockquote>\n<p>将到达分布式应用程序层次结构的顶部：堆栈。堆栈是一组相互关联的服务，共享依赖关系，并且可以协调一致。单个堆栈能够定义和协调整个应用程序的功能（尽管非常复杂的应用程序可能希望使用多个堆栈）。</p>\n</blockquote>\n<h2 id=\"添加新服务并重新部署\"><a href=\"#添加新服务并重新部署\" class=\"headerlink\" title=\"添加新服务并重新部署\"></a>添加新服务并重新部署</h2><p>很容易为我们的docker-compose.yml文件添加服务。首先，我们添加一个免费的可视化服务，让我们看看我们的群集如何调度容器。</p>\n<ol>\n<li><code>docker-compose.yml</code> 在编辑器中打开并将其内容替换为以下内容。请务必更换 <code>username/repo:tag</code> 您的图像细节。</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\">    <span class=\"comment\"># replace username/repo:tag with your name and image details</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">username/repo:tag</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      replicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">      restart_policy:</span></span><br><span class=\"line\"><span class=\"attr\">        condition:</span> <span class=\"string\">on-failure</span></span><br><span class=\"line\"><span class=\"attr\">      resources:</span></span><br><span class=\"line\"><span class=\"attr\">        limits:</span></span><br><span class=\"line\"><span class=\"attr\">          cpus:</span> <span class=\"string\">\"0.1\"</span></span><br><span class=\"line\"><span class=\"attr\">          memory:</span> <span class=\"number\">50</span><span class=\"string\">M</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">  visualizer:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">dockersamples/visualizer:stable</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8080:8080\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      placement:</span></span><br><span class=\"line\"><span class=\"attr\">        constraints:</span> <span class=\"string\">[node.role</span> <span class=\"string\">==</span> <span class=\"string\">manager]</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  webnet:</span></span><br></pre></td></tr></table></figure>\n<p>这里唯一新的是对等服务web，命名visualizer。您将在这里看到两个新的东西：一个volumes关键字，让可视化程序访问Docker的主机套接字文件以及一个placement关键字，确保这个服务只能运行在群组管理器上，而不是工作人员。这是因为由Docker创建的开源项目构建的这个容器显示了在图中以群集运行的Docker服务。</p>\n<ol start=\"2\">\n<li>确保你的shell被配置为通话myvm1（全部的例子在这里）。</li>\n</ol>\n<ul>\n<li>运行docker-machine ls列出机器，并确保您已连接到myvm1，如下星号所示。</li>\n<li>如果需要，重新运行docker-machine env myvm1，然后运行给定的命令配置shell。</li>\n</ul>\n<p>在Mac或Linux上，命令是：<code>eval $(docker-machine env myvm1)</code></p>\n<p>在Windows上，命令是：<code>&amp; &quot;C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker-machine.exe&quot; env myvm1 | Invoke-Expression</code></p>\n<ol>\n<li>docker stack deploy在管理员上重新运行命令，任何需要更新的服务将被更新：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stack deploy -c docker-compose.yml getstartedlab</span><br><span class=\"line\">Updating service getstartedlab_web (id: angi1bf5e4to03qu9f93trnxm)</span><br><span class=\"line\">Updating service getstartedlab_visualizer (id: l9mnwkeq2jiononb5ihz9u7a4)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>看看可视化器。</li>\n</ol>\n<p>您在Compose文件中看到在visualizer端口8080上运行docker-machine ls。通过运行获取其中一个节点的IP地址。转到8080端口的IP地址，您将看到可视化运行：<br><img src=\"/2017/11/14/docker/docker stack/docker stack1.png\" alt=\"docker stack1\"></p>\n<p>单个副本visualizer正如您所期望的那样在管理器上运行，并且5个实例web分布在群集中。您可以通过运行<code>docker stack ps &lt;stack&gt;</code>以下方式来证实这种可视化:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack ps getstartedlab</span><br></pre></td></tr></table></figure>\n<p>可视化器是一种独立的服务，可以在包含在堆栈中的任何应用程序中运行。它不依赖于其他任何东西。现在让我们创建一个确实具有依赖性的服务：Redis服务将提供一个访客计数器。</p>\n<h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2><p>让我们再次浏览相同的工作流程，添加一个用于存储应用数据的Redis数据库。</p>\n<ol>\n<li>保存这个新docker-compose.yml文件，最后添加一个Redis服务。请务必更换username/repo:tag您的图像细节。</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\">    <span class=\"comment\"># replace username/repo:tag with your name and image details</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">username/repo:tag</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      replicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">      restart_policy:</span></span><br><span class=\"line\"><span class=\"attr\">        condition:</span> <span class=\"string\">on-failure</span></span><br><span class=\"line\"><span class=\"attr\">      resources:</span></span><br><span class=\"line\"><span class=\"attr\">        limits:</span></span><br><span class=\"line\"><span class=\"attr\">          cpus:</span> <span class=\"string\">\"0.1\"</span></span><br><span class=\"line\"><span class=\"attr\">          memory:</span> <span class=\"number\">50</span><span class=\"string\">M</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">  visualizer:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">dockersamples/visualizer:stable</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8080:8080\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      placement:</span></span><br><span class=\"line\"><span class=\"attr\">        constraints:</span> <span class=\"string\">[node.role</span> <span class=\"string\">==</span> <span class=\"string\">manager]</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"6379:6379\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/home/docker/data:/data</span></span><br><span class=\"line\"><span class=\"attr\">    deploy:</span></span><br><span class=\"line\"><span class=\"attr\">      placement:</span></span><br><span class=\"line\"><span class=\"attr\">        constraints:</span> <span class=\"string\">[node.role</span> <span class=\"string\">==</span> <span class=\"string\">manager]</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">redis-server</span> <span class=\"bullet\">--appendonly</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">webnet</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  webnet:</span></span><br></pre></td></tr></table></figure>\n<p>Redis在Docker图书馆有一个官方形象，并且被赋予了简短的image名字<code>redis</code>，所以<code>username/repo</code>在这里没有符号。Redis端口6379已由Redis预配置为从容器暴露给主机，在我们的撰写文件中，我们将其从主机公开到世界各地，因此您可以输入任何您的IP地址节点进入Redis Desktop Manager并管理此Redis实例，如果您这样选择。</p>\n<p>最重要的是，在<code>redis</code>规范中有几件事情使数据在这个堆栈的部署之间保持不变：</p>\n<ul>\n<li>redis 总是在经理上运行，所以它总是使用相同的文件系统。</li>\n<li>redis访问主机文件系统中的任意目录/data，这是Redis存储数据的位置。</li>\n</ul>\n<p>在一起，这是在您的主机的物理文件系统中为Redis数据创建“真相的根源”。没有这个，Redis会将其数据存储 /data在容器的文件系统内，如果容器被重新部署，那么它将被清除。</p>\n<p>这个真理的来源有两个部分：</p>\n<ul>\n<li>您放置在Redis服务上的放置约束，确保它始终使用相同的主机。</li>\n<li>您创建的卷允许容器访问./data（在主机上）为/data（在Redis容器内）。当容器来回走动时，存储在./data指定主机上的文件将持续存在，从而实现连续性。</li>\n</ul>\n<p>您已准备好部署新的Redis使用堆栈。</p>\n<ol>\n<li><code>./data</code> 在管理器上创建一个目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine ssh myvm1 <span class=\"string\">\"mkdir ./data\"</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>确保你的shell被配置为通话myvm1。</li>\n</ol>\n<ul>\n<li>运行docker-machine ls列出机器，并确保您已连接到myvm1，如下星号所示。</li>\n<li><p>如果需要，重新运行docker-machine env myvm1，然后运行给定的命令配置shell。</p>\n<p>在Mac或Linux上，命令是：<code>eval $(docker-machine env myvm1)</code><br>在Windows上，命令是：<code>&amp; &quot;C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker-machine.exe&quot; env myvm1 | Invoke-Expression</code></p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>再运行docker stack deploy一次</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>运行docker service ls以验证三个服务是否按预期运行。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ls</span><br><span class=\"line\">ID                  NAME                       MODE                REPLICAS            IMAGE                             PORTS</span><br><span class=\"line\">x7uij6xb4foj        getstartedlab_redis        replicated          1/1                 redis:latest                      *:6379-&gt;6379/tcp</span><br><span class=\"line\">n5rvhm52ykq7        getstartedlab_visualizer   replicated          1/1                 dockersamples/visualizer:stable   *:8080-&gt;8080/tcp</span><br><span class=\"line\">mifd433bti1d        getstartedlab_web          replicated          5/5                 orangesnap/getstarted:latest    *:80-&gt;80/tcp</span><br></pre></td></tr></table></figure>\n<ol>\n<li>检查您的一个节点（例如<code>http://192.168.99.101</code>）的网页，您将看到访客计数器的结果，该计数器现在已存在，并存储有关Redis的信息。</li>\n</ol>\n<p><img src=\"/2017/11/14/docker/docker stack/docker-redis.png\" alt=\"docker-redis\"></p>\n<p>另外，检查可视化在上的任一节点的IP地址端口8080，你会看到redis与一起运行服务web和visualizer服务。</p>\n<p><img src=\"/2017/11/14/docker/docker stack/docker stack2.png\" alt=\"docker stack2\"></p>\n"},{"layout":"post","title":"设计模式","date":"2018-11-19T06:02:42.000Z","_content":"\n# 设计模式\n\n设计模式（Design pattern）代表了`最佳的实践`，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n\n## 什么是GOF(四人帮，全拼 Gang of Four)？\n\n* 对接口编程而不是对实现编程。\n* 优先使用对象组合而不是继承。\n\n## 最佳的实践\n\n设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。\n\n## 设计模式的类型\n\n* 23中设计模式\n* 3大类 (创建型模式, 结构型模式, 行为型模式)\n\n### 创建型模式\n\n> 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活\n\n* [ ] 工厂模式\n* [ ] 抽象工厂模式\n* [ ] 单例模式\n* [ ] 建造者模式\n* [ ] 原型模式\n\n### 结构型模式\n\n> 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式\n\n* [ ] 适配器模式\n* [ ] 桥接模式\n* [ ] 过滤器模式\n* [ ] 组合模式\n* [ ] 装饰器模式\n* [ ] 外观模式\n* [ ] 享元模式\n* [ ] 代理模式\n\n### 行为型模式\n\n> 关注对象之间的通信\n\n* [ ] 责任模式\n* [ ] 命令模式\n* [ ] 解释器模式\n* [ ] 迭代器模式\n* [ ] 中介模式\n* [ ] 备忘录模式\n* [ ] 观察者模式\n* [ ] 状态模式\n* [ ] 空对象模式\n* [ ] 策略模式\n* [ ] 模板模式\n* [ ] 访问者模式\n\n### J2EE模式(补充)\n\n> 特别关注表示层,由 sun Java Center 鉴定\n\n* [ ] MVC模式\n* [ ] 业务代码模式\n* [ ] 组合实体模式\n* [ ] 数据访问对象模式\n* [ ] 前端控制器模式\n* [ ] 拦截过滤器模式\n* [ ] 服务定位模式\n* [ ] 传输对象模式\n","source":"_posts/java/design-pattern.md","raw":"---\nlayout: post\ntitle: 设计模式\ndate: 2018-11-19 14:02:42\ntags:\n    - java\n    - 设计模式\ncategories: java\n---\n\n# 设计模式\n\n设计模式（Design pattern）代表了`最佳的实践`，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n\n## 什么是GOF(四人帮，全拼 Gang of Four)？\n\n* 对接口编程而不是对实现编程。\n* 优先使用对象组合而不是继承。\n\n## 最佳的实践\n\n设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。\n\n## 设计模式的类型\n\n* 23中设计模式\n* 3大类 (创建型模式, 结构型模式, 行为型模式)\n\n### 创建型模式\n\n> 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活\n\n* [ ] 工厂模式\n* [ ] 抽象工厂模式\n* [ ] 单例模式\n* [ ] 建造者模式\n* [ ] 原型模式\n\n### 结构型模式\n\n> 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式\n\n* [ ] 适配器模式\n* [ ] 桥接模式\n* [ ] 过滤器模式\n* [ ] 组合模式\n* [ ] 装饰器模式\n* [ ] 外观模式\n* [ ] 享元模式\n* [ ] 代理模式\n\n### 行为型模式\n\n> 关注对象之间的通信\n\n* [ ] 责任模式\n* [ ] 命令模式\n* [ ] 解释器模式\n* [ ] 迭代器模式\n* [ ] 中介模式\n* [ ] 备忘录模式\n* [ ] 观察者模式\n* [ ] 状态模式\n* [ ] 空对象模式\n* [ ] 策略模式\n* [ ] 模板模式\n* [ ] 访问者模式\n\n### J2EE模式(补充)\n\n> 特别关注表示层,由 sun Java Center 鉴定\n\n* [ ] MVC模式\n* [ ] 业务代码模式\n* [ ] 组合实体模式\n* [ ] 数据访问对象模式\n* [ ] 前端控制器模式\n* [ ] 拦截过滤器模式\n* [ ] 服务定位模式\n* [ ] 传输对象模式\n","slug":"java/design-pattern","published":1,"updated":"2018-11-19T06:07:55.536Z","comments":1,"photos":[],"link":"","_id":"cjonx65sy000ti8usff14d7ud","content":"<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><p>设计模式（Design pattern）代表了<code>最佳的实践</code>，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\n<h2 id=\"什么是GOF-四人帮，全拼-Gang-of-Four-？\"><a href=\"#什么是GOF-四人帮，全拼-Gang-of-Four-？\" class=\"headerlink\" title=\"什么是GOF(四人帮，全拼 Gang of Four)？\"></a>什么是GOF(四人帮，全拼 Gang of Four)？</h2><ul>\n<li>对接口编程而不是对实现编程。</li>\n<li>优先使用对象组合而不是继承。</li>\n</ul>\n<h2 id=\"最佳的实践\"><a href=\"#最佳的实践\" class=\"headerlink\" title=\"最佳的实践\"></a>最佳的实践</h2><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p>\n<h2 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h2><ul>\n<li>23中设计模式</li>\n<li>3大类 (创建型模式, 结构型模式, 行为型模式)</li>\n</ul>\n<h3 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h3><blockquote>\n<p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活</p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 工厂模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 抽象工厂模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 单例模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 建造者模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 原型模式</li>\n</ul>\n<h3 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h3><blockquote>\n<p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式</p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 适配器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 桥接模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 过滤器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 组合模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 装饰器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 外观模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 享元模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 代理模式</li>\n</ul>\n<h3 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h3><blockquote>\n<p>关注对象之间的通信</p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 责任模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 命令模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 解释器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 迭代器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 中介模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 备忘录模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 观察者模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 状态模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 空对象模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 策略模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 模板模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 访问者模式</li>\n</ul>\n<h3 id=\"J2EE模式-补充\"><a href=\"#J2EE模式-补充\" class=\"headerlink\" title=\"J2EE模式(补充)\"></a>J2EE模式(补充)</h3><blockquote>\n<p>特别关注表示层,由 sun Java Center 鉴定</p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> MVC模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 业务代码模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 组合实体模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 数据访问对象模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 前端控制器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 拦截过滤器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 服务定位模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 传输对象模式</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><p>设计模式（Design pattern）代表了<code>最佳的实践</code>，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\n<h2 id=\"什么是GOF-四人帮，全拼-Gang-of-Four-？\"><a href=\"#什么是GOF-四人帮，全拼-Gang-of-Four-？\" class=\"headerlink\" title=\"什么是GOF(四人帮，全拼 Gang of Four)？\"></a>什么是GOF(四人帮，全拼 Gang of Four)？</h2><ul>\n<li>对接口编程而不是对实现编程。</li>\n<li>优先使用对象组合而不是继承。</li>\n</ul>\n<h2 id=\"最佳的实践\"><a href=\"#最佳的实践\" class=\"headerlink\" title=\"最佳的实践\"></a>最佳的实践</h2><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p>\n<h2 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h2><ul>\n<li>23中设计模式</li>\n<li>3大类 (创建型模式, 结构型模式, 行为型模式)</li>\n</ul>\n<h3 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h3><blockquote>\n<p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活</p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 工厂模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 抽象工厂模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 单例模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 建造者模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 原型模式</li>\n</ul>\n<h3 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h3><blockquote>\n<p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式</p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 适配器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 桥接模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 过滤器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 组合模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 装饰器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 外观模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 享元模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 代理模式</li>\n</ul>\n<h3 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h3><blockquote>\n<p>关注对象之间的通信</p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 责任模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 命令模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 解释器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 迭代器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 中介模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 备忘录模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 观察者模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 状态模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 空对象模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 策略模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 模板模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 访问者模式</li>\n</ul>\n<h3 id=\"J2EE模式-补充\"><a href=\"#J2EE模式-补充\" class=\"headerlink\" title=\"J2EE模式(补充)\"></a>J2EE模式(补充)</h3><blockquote>\n<p>特别关注表示层,由 sun Java Center 鉴定</p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> MVC模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 业务代码模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 组合实体模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 数据访问对象模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 前端控制器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 拦截过滤器模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 服务定位模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 传输对象模式</li>\n</ul>\n"},{"layout":"post","title":"异常","date":"2018-11-19T06:02:42.000Z","_content":"\n# 异常\n\n[http://blog.csdn.net/mccand1234/article/details/51579425](http://blog.csdn.net/mccand1234/article/details/51579425)","source":"_posts/java/exception.md","raw":"---\nlayout: post\ntitle: 异常\ndate: 2018-11-19 14:02:42\ntags:\n    - java\n    - 问题\ncategories: java\n---\n\n# 异常\n\n[http://blog.csdn.net/mccand1234/article/details/51579425](http://blog.csdn.net/mccand1234/article/details/51579425)","slug":"java/exception","published":1,"updated":"2018-11-19T06:11:11.583Z","comments":1,"photos":[],"link":"","_id":"cjonx65t2000yi8us3z8z7kys","content":"<h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><p><a href=\"http://blog.csdn.net/mccand1234/article/details/51579425\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/mccand1234/article/details/51579425</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><p><a href=\"http://blog.csdn.net/mccand1234/article/details/51579425\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/mccand1234/article/details/51579425</a></p>\n"},{"title":"docker简述","date":"2017-10-09T08:45:57.000Z","type":"post","_content":"\n# docker简述\n\n## VM & Docker\n\n> 一般都拿VM与docker做比较，但两者的两个不同的东西，从使用者的角度上看，感觉是一样\n\n### docker\n\n![docker](docker简述/docker.jpg)\n\n### VM\n\n![docker_VM](docker简述/docker_VM.jpg)\n\n## docker engine\n\n![docker engine](docker简述/docker engine.png)\n\n## Docker守护进程\n\nDocker守护程序（dockerd）监听Docker API请求并管理Docker对象，如图像，容器，网络和卷。守护进程还可以与其他守护进程通信以管理Docker服务\n\n## Docker客户端\n\nDocker client（docker）是许多Docker用户与Docker进行交互的主要方式。当您使用诸如docker run客户端之类的命令时dockerd，会发送这些命令。该docker命令使用Docker API。Docker客户端可以与多个守护进程通信。\n\n## Docker对象\n\n当您使用Docker时，您正在创建和使用图像，容器，网络，卷，插件和其他对象。本节简要介绍一些这些对象。\n\n## image\n\n一个图像是一个只读用于创建一个泊坞容器的指令模板。通常，图像是基于另一个图像，还有一些额外的定制.要创建自己的映像，您将创建一个 具有简单语法的Docker文件，用于定义创建映像所需的步骤并运行它。Dockerfile中的每条指令在图像中创建一个图层。当您更改Dockerfile并重建图像时，只有那些已更改的图层被重建。\n\n## 集装箱\n\n容器是图像的可运行实例。您可以使用Docker API或CLI创建，运行，停止，移动或删除容器。您可以将容器连接到一个或多个网络，将存储器连接到该网络，或者甚至根据其当前状态创建新映像。\n默认情况下，容器与其他容器及其主机相对较好地隔离。您可以控制容器的网络，存储或其他底层子系统与其他容器或主机之间的隔离。\n容器由其图像定义，以及您在创建或运行时提供的任何配置选项。当一个容器被移除时，对其中不存储在永久存储器中的状态的任何更改消失。\n\n## 服务\n\n服务允许你扩展在多个码头工人守护进程，而这一切的共同努力容器群有多个经理和工人。群集的每个成员都是Docker守护进程，守护进程使用Docker API进行通信。服务允许您定义所需的状态，例如在任何给定时间必须可用的服务的副本数。默认情况下，服务在所有工作节点之间进行负载平衡。对消费者来说，Docker服务似乎是一个单一的应用程序。Docker Engine支持Docker 1.12及更高版本的群集模式。\n\n## 命名空间\n\nDocker使用一种被称为namespaces提供称为容器的隔离工作空间的技术。运行容器时，Docker会为该容器创建一组 命名空间。\n这些命名空间提供了一个隔离层。容器的每个方面都在一个单独的命名空间中运行，其访问仅限于该命名空间。\nDocker Engine在Linux上使用以下命名空间：\n\n* 的pid命名空间：进程隔离（PID：进程ID）。\n* 该net命名空间：管理网络接口（NET：网络）。\n* 该ipc命名空间：管理访问IPC资源（IPC：进程间通信）。\n* 该mnt命名空间：管理文件系统挂载点（MNT：摩）。\n* 该uts命名空间：隔离内核和版本标识符。（UTS：Unix分时系统）","source":"_posts/docker/docker简述.md","raw":"---\ntitle: docker简述\ndate: 2017-10-09 16:45:57\ntype: post\ntags: \n    - docker\ncategories: docker\n---\n\n# docker简述\n\n## VM & Docker\n\n> 一般都拿VM与docker做比较，但两者的两个不同的东西，从使用者的角度上看，感觉是一样\n\n### docker\n\n![docker](docker简述/docker.jpg)\n\n### VM\n\n![docker_VM](docker简述/docker_VM.jpg)\n\n## docker engine\n\n![docker engine](docker简述/docker engine.png)\n\n## Docker守护进程\n\nDocker守护程序（dockerd）监听Docker API请求并管理Docker对象，如图像，容器，网络和卷。守护进程还可以与其他守护进程通信以管理Docker服务\n\n## Docker客户端\n\nDocker client（docker）是许多Docker用户与Docker进行交互的主要方式。当您使用诸如docker run客户端之类的命令时dockerd，会发送这些命令。该docker命令使用Docker API。Docker客户端可以与多个守护进程通信。\n\n## Docker对象\n\n当您使用Docker时，您正在创建和使用图像，容器，网络，卷，插件和其他对象。本节简要介绍一些这些对象。\n\n## image\n\n一个图像是一个只读用于创建一个泊坞容器的指令模板。通常，图像是基于另一个图像，还有一些额外的定制.要创建自己的映像，您将创建一个 具有简单语法的Docker文件，用于定义创建映像所需的步骤并运行它。Dockerfile中的每条指令在图像中创建一个图层。当您更改Dockerfile并重建图像时，只有那些已更改的图层被重建。\n\n## 集装箱\n\n容器是图像的可运行实例。您可以使用Docker API或CLI创建，运行，停止，移动或删除容器。您可以将容器连接到一个或多个网络，将存储器连接到该网络，或者甚至根据其当前状态创建新映像。\n默认情况下，容器与其他容器及其主机相对较好地隔离。您可以控制容器的网络，存储或其他底层子系统与其他容器或主机之间的隔离。\n容器由其图像定义，以及您在创建或运行时提供的任何配置选项。当一个容器被移除时，对其中不存储在永久存储器中的状态的任何更改消失。\n\n## 服务\n\n服务允许你扩展在多个码头工人守护进程，而这一切的共同努力容器群有多个经理和工人。群集的每个成员都是Docker守护进程，守护进程使用Docker API进行通信。服务允许您定义所需的状态，例如在任何给定时间必须可用的服务的副本数。默认情况下，服务在所有工作节点之间进行负载平衡。对消费者来说，Docker服务似乎是一个单一的应用程序。Docker Engine支持Docker 1.12及更高版本的群集模式。\n\n## 命名空间\n\nDocker使用一种被称为namespaces提供称为容器的隔离工作空间的技术。运行容器时，Docker会为该容器创建一组 命名空间。\n这些命名空间提供了一个隔离层。容器的每个方面都在一个单独的命名空间中运行，其访问仅限于该命名空间。\nDocker Engine在Linux上使用以下命名空间：\n\n* 的pid命名空间：进程隔离（PID：进程ID）。\n* 该net命名空间：管理网络接口（NET：网络）。\n* 该ipc命名空间：管理访问IPC资源（IPC：进程间通信）。\n* 该mnt命名空间：管理文件系统挂载点（MNT：摩）。\n* 该uts命名空间：隔离内核和版本标识符。（UTS：Unix分时系统）","slug":"docker/docker简述","published":1,"updated":"2018-11-16T03:21:13.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonx65t40011i8usfo0l0pkk","content":"<h1 id=\"docker简述\"><a href=\"#docker简述\" class=\"headerlink\" title=\"docker简述\"></a>docker简述</h1><h2 id=\"VM-amp-Docker\"><a href=\"#VM-amp-Docker\" class=\"headerlink\" title=\"VM &amp; Docker\"></a>VM &amp; Docker</h2><blockquote>\n<p>一般都拿VM与docker做比较，但两者的两个不同的东西，从使用者的角度上看，感觉是一样</p>\n</blockquote>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><p><img src=\"/2017/10/09/docker/docker简述/docker.jpg\" alt=\"docker\"></p>\n<h3 id=\"VM\"><a href=\"#VM\" class=\"headerlink\" title=\"VM\"></a>VM</h3><p><img src=\"/2017/10/09/docker/docker简述/docker_VM.jpg\" alt=\"docker_VM\"></p>\n<h2 id=\"docker-engine\"><a href=\"#docker-engine\" class=\"headerlink\" title=\"docker engine\"></a>docker engine</h2><p><img src=\"/2017/10/09/docker/docker简述/docker engine.png\" alt=\"docker engine\"></p>\n<h2 id=\"Docker守护进程\"><a href=\"#Docker守护进程\" class=\"headerlink\" title=\"Docker守护进程\"></a>Docker守护进程</h2><p>Docker守护程序（dockerd）监听Docker API请求并管理Docker对象，如图像，容器，网络和卷。守护进程还可以与其他守护进程通信以管理Docker服务</p>\n<h2 id=\"Docker客户端\"><a href=\"#Docker客户端\" class=\"headerlink\" title=\"Docker客户端\"></a>Docker客户端</h2><p>Docker client（docker）是许多Docker用户与Docker进行交互的主要方式。当您使用诸如docker run客户端之类的命令时dockerd，会发送这些命令。该docker命令使用Docker API。Docker客户端可以与多个守护进程通信。</p>\n<h2 id=\"Docker对象\"><a href=\"#Docker对象\" class=\"headerlink\" title=\"Docker对象\"></a>Docker对象</h2><p>当您使用Docker时，您正在创建和使用图像，容器，网络，卷，插件和其他对象。本节简要介绍一些这些对象。</p>\n<h2 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h2><p>一个图像是一个只读用于创建一个泊坞容器的指令模板。通常，图像是基于另一个图像，还有一些额外的定制.要创建自己的映像，您将创建一个 具有简单语法的Docker文件，用于定义创建映像所需的步骤并运行它。Dockerfile中的每条指令在图像中创建一个图层。当您更改Dockerfile并重建图像时，只有那些已更改的图层被重建。</p>\n<h2 id=\"集装箱\"><a href=\"#集装箱\" class=\"headerlink\" title=\"集装箱\"></a>集装箱</h2><p>容器是图像的可运行实例。您可以使用Docker API或CLI创建，运行，停止，移动或删除容器。您可以将容器连接到一个或多个网络，将存储器连接到该网络，或者甚至根据其当前状态创建新映像。<br>默认情况下，容器与其他容器及其主机相对较好地隔离。您可以控制容器的网络，存储或其他底层子系统与其他容器或主机之间的隔离。<br>容器由其图像定义，以及您在创建或运行时提供的任何配置选项。当一个容器被移除时，对其中不存储在永久存储器中的状态的任何更改消失。</p>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><p>服务允许你扩展在多个码头工人守护进程，而这一切的共同努力容器群有多个经理和工人。群集的每个成员都是Docker守护进程，守护进程使用Docker API进行通信。服务允许您定义所需的状态，例如在任何给定时间必须可用的服务的副本数。默认情况下，服务在所有工作节点之间进行负载平衡。对消费者来说，Docker服务似乎是一个单一的应用程序。Docker Engine支持Docker 1.12及更高版本的群集模式。</p>\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>Docker使用一种被称为namespaces提供称为容器的隔离工作空间的技术。运行容器时，Docker会为该容器创建一组 命名空间。<br>这些命名空间提供了一个隔离层。容器的每个方面都在一个单独的命名空间中运行，其访问仅限于该命名空间。<br>Docker Engine在Linux上使用以下命名空间：</p>\n<ul>\n<li>的pid命名空间：进程隔离（PID：进程ID）。</li>\n<li>该net命名空间：管理网络接口（NET：网络）。</li>\n<li>该ipc命名空间：管理访问IPC资源（IPC：进程间通信）。</li>\n<li>该mnt命名空间：管理文件系统挂载点（MNT：摩）。</li>\n<li>该uts命名空间：隔离内核和版本标识符。（UTS：Unix分时系统）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker简述\"><a href=\"#docker简述\" class=\"headerlink\" title=\"docker简述\"></a>docker简述</h1><h2 id=\"VM-amp-Docker\"><a href=\"#VM-amp-Docker\" class=\"headerlink\" title=\"VM &amp; Docker\"></a>VM &amp; Docker</h2><blockquote>\n<p>一般都拿VM与docker做比较，但两者的两个不同的东西，从使用者的角度上看，感觉是一样</p>\n</blockquote>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><p><img src=\"/2017/10/09/docker/docker简述/docker.jpg\" alt=\"docker\"></p>\n<h3 id=\"VM\"><a href=\"#VM\" class=\"headerlink\" title=\"VM\"></a>VM</h3><p><img src=\"/2017/10/09/docker/docker简述/docker_VM.jpg\" alt=\"docker_VM\"></p>\n<h2 id=\"docker-engine\"><a href=\"#docker-engine\" class=\"headerlink\" title=\"docker engine\"></a>docker engine</h2><p><img src=\"/2017/10/09/docker/docker简述/docker engine.png\" alt=\"docker engine\"></p>\n<h2 id=\"Docker守护进程\"><a href=\"#Docker守护进程\" class=\"headerlink\" title=\"Docker守护进程\"></a>Docker守护进程</h2><p>Docker守护程序（dockerd）监听Docker API请求并管理Docker对象，如图像，容器，网络和卷。守护进程还可以与其他守护进程通信以管理Docker服务</p>\n<h2 id=\"Docker客户端\"><a href=\"#Docker客户端\" class=\"headerlink\" title=\"Docker客户端\"></a>Docker客户端</h2><p>Docker client（docker）是许多Docker用户与Docker进行交互的主要方式。当您使用诸如docker run客户端之类的命令时dockerd，会发送这些命令。该docker命令使用Docker API。Docker客户端可以与多个守护进程通信。</p>\n<h2 id=\"Docker对象\"><a href=\"#Docker对象\" class=\"headerlink\" title=\"Docker对象\"></a>Docker对象</h2><p>当您使用Docker时，您正在创建和使用图像，容器，网络，卷，插件和其他对象。本节简要介绍一些这些对象。</p>\n<h2 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h2><p>一个图像是一个只读用于创建一个泊坞容器的指令模板。通常，图像是基于另一个图像，还有一些额外的定制.要创建自己的映像，您将创建一个 具有简单语法的Docker文件，用于定义创建映像所需的步骤并运行它。Dockerfile中的每条指令在图像中创建一个图层。当您更改Dockerfile并重建图像时，只有那些已更改的图层被重建。</p>\n<h2 id=\"集装箱\"><a href=\"#集装箱\" class=\"headerlink\" title=\"集装箱\"></a>集装箱</h2><p>容器是图像的可运行实例。您可以使用Docker API或CLI创建，运行，停止，移动或删除容器。您可以将容器连接到一个或多个网络，将存储器连接到该网络，或者甚至根据其当前状态创建新映像。<br>默认情况下，容器与其他容器及其主机相对较好地隔离。您可以控制容器的网络，存储或其他底层子系统与其他容器或主机之间的隔离。<br>容器由其图像定义，以及您在创建或运行时提供的任何配置选项。当一个容器被移除时，对其中不存储在永久存储器中的状态的任何更改消失。</p>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><p>服务允许你扩展在多个码头工人守护进程，而这一切的共同努力容器群有多个经理和工人。群集的每个成员都是Docker守护进程，守护进程使用Docker API进行通信。服务允许您定义所需的状态，例如在任何给定时间必须可用的服务的副本数。默认情况下，服务在所有工作节点之间进行负载平衡。对消费者来说，Docker服务似乎是一个单一的应用程序。Docker Engine支持Docker 1.12及更高版本的群集模式。</p>\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>Docker使用一种被称为namespaces提供称为容器的隔离工作空间的技术。运行容器时，Docker会为该容器创建一组 命名空间。<br>这些命名空间提供了一个隔离层。容器的每个方面都在一个单独的命名空间中运行，其访问仅限于该命名空间。<br>Docker Engine在Linux上使用以下命名空间：</p>\n<ul>\n<li>的pid命名空间：进程隔离（PID：进程ID）。</li>\n<li>该net命名空间：管理网络接口（NET：网络）。</li>\n<li>该ipc命名空间：管理访问IPC资源（IPC：进程间通信）。</li>\n<li>该mnt命名空间：管理文件系统挂载点（MNT：摩）。</li>\n<li>该uts命名空间：隔离内核和版本标识符。（UTS：Unix分时系统）</li>\n</ul>\n"},{"layout":"post","title":"问题列表","date":"2018-11-19T06:02:42.000Z","_content":"\n# 问题列表\n\n> 平时工作中遇到的问题以及解决办法\n\n* [x] 计算时差问题\n* [x] 静态Map，Set用作存储并发\n* [x] 获取 `spring.profile.active` 用户\n\n## 计算时差问题\n\nStopWatch 类提供计时器\n\n```java\n//获取并启动\nStopWatch sw = StopWatch.createStarted();\n  = >\nStopWatch sw = new StopWatch();\nsw.start();\n\n//获取时间\nsw.getTime();\nor\nsw.getTime(TimeUnit.MINUTES);  //TimeUnit表示不同时间形式\n```\n\n## 静态Map，Set用作存储并发\n\n采用 `ConcurrentHashMap` 替 `HashMap`\n类似 `ConcurrentSkipListSet` 替换 `HashSet`\n\n```java\nMap map = new ConcurrentHashMap();\nSet<String> set = new ConcurrentSkipListSet<>();\n```\n\n* `ConcurrentHashMap`代码中可以看出，它引入了一个“分段锁”的概念，具体可以理解为把一个大的Map拆分成N个小的`HashTable`，根据`key.hashCode()`来决定把key放到哪个HashTable中。\n* 在`ConcurrentHashMap`中，就是把Map分成了N个`Segment`，`put`和`get`的时候，都是现根据`key.hashCode()`算出放到哪个`Segment`中。\n\n## 获取 `spring.profile.active` 用户","source":"_posts/java/problem.md","raw":"---\nlayout: post\ntitle: 问题列表\ndate: 2018-11-19 14:02:42\ntags:\n    - java\n    - 问题\ncategories: java\n---\n\n# 问题列表\n\n> 平时工作中遇到的问题以及解决办法\n\n* [x] 计算时差问题\n* [x] 静态Map，Set用作存储并发\n* [x] 获取 `spring.profile.active` 用户\n\n## 计算时差问题\n\nStopWatch 类提供计时器\n\n```java\n//获取并启动\nStopWatch sw = StopWatch.createStarted();\n  = >\nStopWatch sw = new StopWatch();\nsw.start();\n\n//获取时间\nsw.getTime();\nor\nsw.getTime(TimeUnit.MINUTES);  //TimeUnit表示不同时间形式\n```\n\n## 静态Map，Set用作存储并发\n\n采用 `ConcurrentHashMap` 替 `HashMap`\n类似 `ConcurrentSkipListSet` 替换 `HashSet`\n\n```java\nMap map = new ConcurrentHashMap();\nSet<String> set = new ConcurrentSkipListSet<>();\n```\n\n* `ConcurrentHashMap`代码中可以看出，它引入了一个“分段锁”的概念，具体可以理解为把一个大的Map拆分成N个小的`HashTable`，根据`key.hashCode()`来决定把key放到哪个HashTable中。\n* 在`ConcurrentHashMap`中，就是把Map分成了N个`Segment`，`put`和`get`的时候，都是现根据`key.hashCode()`算出放到哪个`Segment`中。\n\n## 获取 `spring.profile.active` 用户","slug":"java/problem","published":1,"updated":"2018-11-19T06:09:42.175Z","comments":1,"photos":[],"link":"","_id":"cjonx65t70014i8usi088ebla","content":"<h1 id=\"问题列表\"><a href=\"#问题列表\" class=\"headerlink\" title=\"问题列表\"></a>问题列表</h1><blockquote>\n<p>平时工作中遇到的问题以及解决办法</p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 计算时差问题</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 静态Map，Set用作存储并发</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 获取 <code>spring.profile.active</code> 用户</li>\n</ul>\n<h2 id=\"计算时差问题\"><a href=\"#计算时差问题\" class=\"headerlink\" title=\"计算时差问题\"></a>计算时差问题</h2><p>StopWatch 类提供计时器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取并启动</span></span><br><span class=\"line\">StopWatch sw = StopWatch.createStarted();</span><br><span class=\"line\">  = &gt;</span><br><span class=\"line\">StopWatch sw = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">sw.start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取时间</span></span><br><span class=\"line\">sw.getTime();</span><br><span class=\"line\">or</span><br><span class=\"line\">sw.getTime(TimeUnit.MINUTES);  <span class=\"comment\">//TimeUnit表示不同时间形式</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"静态Map，Set用作存储并发\"><a href=\"#静态Map，Set用作存储并发\" class=\"headerlink\" title=\"静态Map，Set用作存储并发\"></a>静态Map，Set用作存储并发</h2><p>采用 <code>ConcurrentHashMap</code> 替 <code>HashMap</code><br>类似 <code>ConcurrentSkipListSet</code> 替换 <code>HashSet</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map map = <span class=\"keyword\">new</span> ConcurrentHashMap();</span><br><span class=\"line\">Set&lt;String&gt; set = <span class=\"keyword\">new</span> ConcurrentSkipListSet&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>ConcurrentHashMap</code>代码中可以看出，它引入了一个“分段锁”的概念，具体可以理解为把一个大的Map拆分成N个小的<code>HashTable</code>，根据<code>key.hashCode()</code>来决定把key放到哪个HashTable中。</li>\n<li>在<code>ConcurrentHashMap</code>中，就是把Map分成了N个<code>Segment</code>，<code>put</code>和<code>get</code>的时候，都是现根据<code>key.hashCode()</code>算出放到哪个<code>Segment</code>中。</li>\n</ul>\n<h2 id=\"获取-spring-profile-active-用户\"><a href=\"#获取-spring-profile-active-用户\" class=\"headerlink\" title=\"获取 spring.profile.active 用户\"></a>获取 <code>spring.profile.active</code> 用户</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"问题列表\"><a href=\"#问题列表\" class=\"headerlink\" title=\"问题列表\"></a>问题列表</h1><blockquote>\n<p>平时工作中遇到的问题以及解决办法</p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 计算时差问题</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 静态Map，Set用作存储并发</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 获取 <code>spring.profile.active</code> 用户</li>\n</ul>\n<h2 id=\"计算时差问题\"><a href=\"#计算时差问题\" class=\"headerlink\" title=\"计算时差问题\"></a>计算时差问题</h2><p>StopWatch 类提供计时器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取并启动</span></span><br><span class=\"line\">StopWatch sw = StopWatch.createStarted();</span><br><span class=\"line\">  = &gt;</span><br><span class=\"line\">StopWatch sw = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">sw.start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取时间</span></span><br><span class=\"line\">sw.getTime();</span><br><span class=\"line\">or</span><br><span class=\"line\">sw.getTime(TimeUnit.MINUTES);  <span class=\"comment\">//TimeUnit表示不同时间形式</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"静态Map，Set用作存储并发\"><a href=\"#静态Map，Set用作存储并发\" class=\"headerlink\" title=\"静态Map，Set用作存储并发\"></a>静态Map，Set用作存储并发</h2><p>采用 <code>ConcurrentHashMap</code> 替 <code>HashMap</code><br>类似 <code>ConcurrentSkipListSet</code> 替换 <code>HashSet</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map map = <span class=\"keyword\">new</span> ConcurrentHashMap();</span><br><span class=\"line\">Set&lt;String&gt; set = <span class=\"keyword\">new</span> ConcurrentSkipListSet&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>ConcurrentHashMap</code>代码中可以看出，它引入了一个“分段锁”的概念，具体可以理解为把一个大的Map拆分成N个小的<code>HashTable</code>，根据<code>key.hashCode()</code>来决定把key放到哪个HashTable中。</li>\n<li>在<code>ConcurrentHashMap</code>中，就是把Map分成了N个<code>Segment</code>，<code>put</code>和<code>get</code>的时候，都是现根据<code>key.hashCode()</code>算出放到哪个<code>Segment</code>中。</li>\n</ul>\n<h2 id=\"获取-spring-profile-active-用户\"><a href=\"#获取-spring-profile-active-用户\" class=\"headerlink\" title=\"获取 spring.profile.active 用户\"></a>获取 <code>spring.profile.active</code> 用户</h2>"},{"layout":"post","title":"spring boot 默认配置项","date":"2018-11-19T05:57:54.000Z","_content":"\n# spring boot 默认配置项\n\nCOMMON SPRING BOOT PROPERTIES\nThis sample file is provided as a guideline. Do NOT copy it in its\nentirety to your own application. \n\n---\n\n`CORE PROPERTIES`\n\n---\n\n# SPRING CONFIG (ConfigFileApplicationListener)\n\nspring.config.name= # config file name (default to 'application')\nspring.config.location= # location of config file\n\n# PROFILES\n\nspring.profiles= # comma list of active profiles\n\n# APPLICATION SETTINGS (SpringApplication)\n\nspring.main.sources=\nspring.main.web-environment= # detect by default\nspring.main.show-banner=true\nspring.main....= # see class for all properties\n\n# LOGGING\n\nlogging.path=/var/logs\nlogging.file=myapp.log\nlogging.config=\n\n# IDENTITY (ContextIdApplicationContextInitializer)\n\nspring.application.name=\nspring.application.index=\n\n# EMBEDDED SERVER CONFIGURATION (ServerProperties)\n\nserver.port=8080\nserver.address= # bind to a specific NIC\nserver.session-timeout= # session timeout in seconds\nserver.context-path= # the context path, defaults to '/'\nserver.servlet-path= # the servlet path, defaults to '/'\nserver.tomcat.access-log-pattern= # log pattern of the access log\nserver.tomcat.access-log-enabled=false # is access logging enabled\nserver.tomcat.protocol-header=x-forwarded-proto # ssl forward headers\nserver.tomcat.remote-ip-header=x-forwarded-for\nserver.tomcat.basedir=/tmp # base dir (usually not needed, defaults to tmp)\nserver.tomcat.background-processor-delay=30; # in seconds\nserver.tomcat.max-threads = 0 # number of threads in protocol handler\nserver.tomcat.uri-encoding = UTF-8 # character encoding to use for URL decoding\n\n# SPRING MVC (HttpMapperProperties)\n\nhttp.mappers.json-pretty-print=false # pretty print JSON\nhttp.mappers.json-sort-keys=false # sort keys\nspring.mvc.locale= # set fixed locale, e.g. en_UK\nspring.mvc.date-format= # set fixed date format, e.g. dd/MM/yyyy\nspring.mvc.message-codes-resolver-format= # PREFIX_ERROR_CODE / POSTFIX_ERROR_CODE\nspring.view.prefix= # MVC view prefix\nspring.view.suffix= # ... and suffix\nspring.resources.cache-period= # cache timeouts in headers sent to browser\nspring.resources.add-mappings=true # if default mappings should be added\n\n# THYMELEAF (ThymeleafAutoConfiguration)\n\nspring.thymeleaf.prefix=classpath:/templates/\nspring.thymeleaf.suffix=.html\nspring.thymeleaf.mode=HTML5\nspring.thymeleaf.encoding=UTF-8\nspring.thymeleaf.content-type=text/html # ;charset=`<encoding>` is added\nspring.thymeleaf.cache=true # set to false for hot refresh\n\n# FREEMARKER (FreeMarkerAutoConfiguration)\n\nspring.freemarker.allowRequestOverride=false\nspring.freemarker.allowSessionOverride=false\nspring.freemarker.cache=true\nspring.freemarker.checkTemplateLocation=true\nspring.freemarker.contentType=text/html\nspring.freemarker.exposeRequestAttributes=false\nspring.freemarker.exposeSessionAttributes=false\nspring.freemarker.exposeSpringMacroHelpers=false\nspring.freemarker.prefix=\nspring.freemarker.requestContextAttribute=\nspring.freemarker.settings.*=\nspring.freemarker.suffix=.ftl\nspring.freemarker.templateEncoding=UTF-8\nspring.freemarker.templateLoaderPath=classpath:/templates/\nspring.freemarker.viewNames= # whitelist of view names that can be resolved\n\n# GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)\n\nspring.groovy.template.allowRequestOverride=false\nspring.groovy.template.allowSessionOverride=false\nspring.groovy.template.cache=true\nspring.groovy.template.configuration.*= # See Groovy's TemplateConfiguration\nspring.groovy.template.contentType=text/html\nspring.groovy.template.prefix=classpath:/templates/\nspring.groovy.template.suffix=.tpl\nspring.groovy.template.templateEncoding=UTF-8\nspring.groovy.template.viewNames= # whitelist of view names that can be resolved\n\n# VELOCITY TEMPLATES (VelocityAutoConfiguration)\n\nspring.velocity.allowRequestOverride=false\nspring.velocity.allowSessionOverride=false\nspring.velocity.cache=true\nspring.velocity.checkTemplateLocation=true\nspring.velocity.contentType=text/html\nspring.velocity.dateToolAttribute=\nspring.velocity.exposeRequestAttributes=false\nspring.velocity.exposeSessionAttributes=false\nspring.velocity.exposeSpringMacroHelpers=false\nspring.velocity.numberToolAttribute=\nspring.velocity.prefix=\nspring.velocity.properties.*=\nspring.velocity.requestContextAttribute=\nspring.velocity.resourceLoaderPath=classpath:/templates/\nspring.velocity.suffix=.vm\nspring.velocity.templateEncoding=UTF-8\nspring.velocity.viewNames= # whitelist of view names that can be resolved\n\n# INTERNATIONALIZATION (MessageSourceAutoConfiguration)\n\nspring.messages.basename=messages\nspring.messages.cacheSeconds=-1\nspring.messages.encoding=UTF-8\n\n\n# SECURITY (SecurityProperties)\n\nsecurity.user.name=user # login username\nsecurity.user.password= # login password\nsecurity.user.role=USER # role assigned to the user\nsecurity.require-ssl=false # advanced settings ...\nsecurity.enable-csrf=false\nsecurity.basic.enabled=true\nsecurity.basic.realm=Spring\nsecurity.basic.path= # /**\nsecurity.headers.xss=false\nsecurity.headers.cache=false\nsecurity.headers.frame=false\nsecurity.headers.contentType=false\nsecurity.headers.hsts=all # none / domain / all\nsecurity.sessions=stateless # always / never / if_required / stateless\nsecurity.ignored=false\n\n# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)\n\nspring.datasource.name= # name of the data source\nspring.datasource.initialize=true # populate using data.sql\nspring.datasource.schema= # a schema (DDL) script resource reference\nspring.datasource.data= # a data (DML) script resource reference\nspring.datasource.platform= # the platform to use in the schema resource (schema-${platform}.sql)\nspring.datasource.continueOnError=false # continue even if can't be initialized\nspring.datasource.separator=; # statement separator in SQL initialization scripts\nspring.datasource.driverClassName= # JDBC Settings...\nspring.datasource.url=\nspring.datasource.username=\nspring.datasource.password=\nspring.datasource.max-active=100 # Advanced configuration...\nspring.datasource.max-idle=8\nspring.datasource.min-idle=8\nspring.datasource.initial-size=10\nspring.datasource.validation-query=\nspring.datasource.test-on-borrow=false\nspring.datasource.test-on-return=false\nspring.datasource.test-while-idle=\nspring.datasource.time-between-eviction-runs-millis=\nspring.datasource.min-evictable-idle-time-millis=\nspring.datasource.max-wait-millis=\n\n# MONGODB (MongoProperties)\n\nspring.data.mongodb.host= # the db host\nspring.data.mongodb.port=27017 # the connection port (defaults to 27107)\nspring.data.mongodb.uri=mongodb://localhost/test # connection URL\nspring.data.mongo.repositories.enabled=true # if spring data repository support is enabled\n\n# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)\n\nspring.jpa.properties.*= # properties to set on the JPA connection\nspring.jpa.openInView=true\nspring.jpa.show-sql=true\nspring.jpa.database-platform=\nspring.jpa.database=\nspring.jpa.generate-ddl=false # ignored by Hibernate, might be useful for other vendors\nspring.jpa.hibernate.naming-strategy= # naming classname\nspring.jpa.hibernate.ddl-auto= # defaults to create-drop for embedded dbs\nspring.data.jpa.repositories.enabled=true # if spring data repository support is enabled\n\n# SOLR (SolrProperties})\n\nspring.data.solr.host=http://127.0.0.1:8983/solr\nspring.data.solr.zkHost=\nspring.data.solr.repositories.enabled=true # if spring data repository support is enabled\n\n# ELASTICSEARCH (ElasticsearchProperties})\n\nspring.data.elasticsearch.cluster-name= # The cluster name (defaults to elasticsearch)\nspring.data.elasticsearch.cluster-nodes= # The address(es) of the server node (comma-separated; if not specified starts a client node)\nspring.data.elasticsearch.local=true # if local mode should be used with client nodes\nspring.data.elasticsearch.repositories.enabled=true # if spring data repository support is enabled\n\n\n\n# FLYWAY (FlywayProperties)\n\nflyway.locations=classpath:db/migrations # locations of migrations scripts\nflyway.schemas= # schemas to update\nflyway.initVersion= 1 # version to start migration\nflyway.prefix=V\nflyway.suffix=.sql\nflyway.enabled=true\nflyway.url= # JDBC url if you want Flyway to create its own DataSource\nflyway.user= # JDBC username if you want Flyway to create its own DataSource\nflyway.password= # JDBC password if you want Flyway to create its own DataSource\n\n# LIQUIBASE (LiquibaseProperties)\n\nliquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml\nliquibase.contexts= # runtime contexts to use\nliquibase.default-schema= # default database schema to use\nliquibase.drop-first=false\nliquibase.enabled=true\n\n# JMX\n\nspring.jmx.enabled=true # Expose MBeans from Spring\n\n# RABBIT (RabbitProperties)\n\nspring.rabbitmq.host= # connection host\nspring.rabbitmq.port= # connection port\nspring.rabbitmq.addresses= # connection addresses (e.g. myhost:9999,otherhost:1111)\nspring.rabbitmq.username= # login user\nspring.rabbitmq.password= # login password\nspring.rabbitmq.virtualhost=\nspring.rabbitmq.dynamic=\n\n# REDIS (RedisProperties)\n\nspring.redis.host=localhost # server host\nspring.redis.password= # server password\nspring.redis.port=6379 # connection port\nspring.redis.pool.max-idle=8 # pool settings ...\nspring.redis.pool.min-idle=0\nspring.redis.pool.max-active=8\nspring.redis.pool.max-wait=-1\n\n# ACTIVEMQ (ActiveMQProperties)\n\nspring.activemq.broker-url=tcp://localhost:61616 # connection URL\nspring.activemq.user=\nspring.activemq.password=\nspring.activemq.in-memory=true # broker kind to create if no broker-url is specified\nspring.activemq.pooled=false\n\n# HornetQ (HornetQProperties)\n\nspring.hornetq.mode= # connection mode (native, embedded)\nspring.hornetq.host=localhost # hornetQ host (native mode)\nspring.hornetq.port=5445 # hornetQ port (native mode)\nspring.hornetq.embedded.enabled=true # if the embedded server is enabled (needs hornetq-jms-server.jar)\nspring.hornetq.embedded.serverId= # auto-generated id of the embedded server (integer)\nspring.hornetq.embedded.persistent=false # message persistence\nspring.hornetq.embedded.data-directory= # location of data content (when persistence is enabled)\nspring.hornetq.embedded.queues= # comma separate queues to create on startup\nspring.hornetq.embedded.topics= # comma separate topics to create on startup\nspring.hornetq.embedded.cluster-password= # customer password (randomly generated by default)\n\n# JMS (JmsProperties)\n\nspring.jms.pub-sub-domain= # false for queue (default), true for topic\n\n# SPRING BATCH (BatchDatabaseInitializer)\n\nspring.batch.job.names=job1,job2\nspring.batch.job.enabled=true\nspring.batch.initializer.enabled=true\nspring.batch.schema= # batch schema to load\n\n# AOP\n\nspring.aop.auto=\nspring.aop.proxy-target-class=\n\n# FILE ENCODING (FileEncodingApplicationListener)\n\nspring.mandatory-file-encoding=false\n\n# SPRING SOCIAL (SocialWebAutoConfiguration)\n\nspring.social.auto-connection-views=true # Set to true for default connection views or false if you provide your own\n\n# SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)\n\nspring.social.facebook.app-id= # your application's Facebook App ID\nspring.social.facebook.app-secret= # your application's Facebook App Secret\n\n# SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)\n\nspring.social.linkedin.app-id= # your application's LinkedIn App ID\nspring.social.linkedin.app-secret= # your application's LinkedIn App Secret\n\n# SPRING SOCIAL TWITTER (TwitterAutoConfiguration)\n\nspring.social.twitter.app-id= # your application's Twitter App ID\nspring.social.twitter.app-secret= # your application's Twitter App Secret\n\n# SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)\n\nspring.mobile.sitepreference.enabled=true # enabled by default\n\n# SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)\n\nspring.mobile.devicedelegatingviewresolver.enabled=true # disabled by default\nspring.mobile.devicedelegatingviewresolver.normalPrefix=\nspring.mobile.devicedelegatingviewresolver.normalSuffix=\nspring.mobile.devicedelegatingviewresolver.mobilePrefix=mobile/\nspring.mobile.devicedelegatingviewresolver.mobileSuffix=\nspring.mobile.devicedelegatingviewresolver.tabletPrefix=tablet/\nspring.mobile.devicedelegatingviewresolver.tabletSuffix=\n\n---\n\nACTUATOR PROPERTIES\n\n---\n\n# MANAGEMENT HTTP SERVER (ManagementServerProperties)\n\nmanagement.port= # defaults to 'server.port'\nmanagement.address= # bind to a specific NIC\nmanagement.contextPath= # default to '/'\n\n# ENDPOINTS (AbstractEndpoint subclasses)\n\nendpoints.autoconfig.id=autoconfig\nendpoints.autoconfig.sensitive=true\nendpoints.autoconfig.enabled=true\nendpoints.beans.id=beans\nendpoints.beans.sensitive=true\nendpoints.beans.enabled=true\nendpoints.configprops.id=configprops\nendpoints.configprops.sensitive=true\nendpoints.configprops.enabled=true\nendpoints.configprops.keys-to-sanitize=password,secret\nendpoints.dump.id=dump\nendpoints.dump.sensitive=true\nendpoints.dump.enabled=true\nendpoints.env.id=env\nendpoints.env.sensitive=true\nendpoints.env.enabled=true\nendpoints.health.id=health\nendpoints.health.sensitive=false\nendpoints.health.enabled=true\nendpoints.info.id=info\nendpoints.info.sensitive=false\nendpoints.info.enabled=true\nendpoints.metrics.id=metrics\nendpoints.metrics.sensitive=true\nendpoints.metrics.enabled=true\nendpoints.shutdown.id=shutdown\nendpoints.shutdown.sensitive=true\nendpoints.shutdown.enabled=false\nendpoints.trace.id=trace\nendpoints.trace.sensitive=true\nendpoints.trace.enabled=true\n\n# MVC ONLY ENDPOINTS\n\nendpoints.jolokia.path=jolokia\nendpoints.jolokia.sensitive=true\nendpoints.jolokia.enabled=true # when using Jolokia\nendpoints.error.path=/error\n\n# JMX ENDPOINT (EndpointMBeanExportProperties)\n\nendpoints.jmx.enabled=true\nendpoints.jmx.domain= # the JMX domain, defaults to 'org.springboot'\nendpoints.jmx.unique-names=false\nendpoints.jmx.enabled=true\nendpoints.jmx.staticNames=\n\n# JOLOKIA (JolokiaProperties)\n\njolokia.config.*= # See Jolokia manual\n\n# REMOTE SHELL\n\nshell.auth=simple # jaas, key, simple, spring\nshell.command-refresh-interval=-1\nshell.command-path-pattern= # classpath*:/commands/**, classpath*:/crash/commands/**\nshell.config-path-patterns= # classpath*:/crash/*\nshell.disabled-plugins=false # don't expose plugins\nshell.ssh.enabled= # ssh settings ...\nshell.ssh.keyPath=\nshell.ssh.port=\nshell.telnet.enabled= # telnet settings ...\nshell.telnet.port=\nshell.auth.jaas.domain= # authentication settings ...\nshell.auth.key.path=\nshell.auth.simple.user.name=\nshell.auth.simple.user.password=\nshell.auth.spring.roles=\n\n# GIT INFO\n\nspring.git.properties= # resource ref to generated git info properties file","source":"_posts/springboot/boot-default-config.md","raw":"---\nlayout: post\ntitle: spring boot 默认配置项\ndate: 2018-11-19 13:57:54\ntags: \n    - java\n    - springboot\ncategories: springboot\n---\n\n# spring boot 默认配置项\n\nCOMMON SPRING BOOT PROPERTIES\nThis sample file is provided as a guideline. Do NOT copy it in its\nentirety to your own application. \n\n---\n\n`CORE PROPERTIES`\n\n---\n\n# SPRING CONFIG (ConfigFileApplicationListener)\n\nspring.config.name= # config file name (default to 'application')\nspring.config.location= # location of config file\n\n# PROFILES\n\nspring.profiles= # comma list of active profiles\n\n# APPLICATION SETTINGS (SpringApplication)\n\nspring.main.sources=\nspring.main.web-environment= # detect by default\nspring.main.show-banner=true\nspring.main....= # see class for all properties\n\n# LOGGING\n\nlogging.path=/var/logs\nlogging.file=myapp.log\nlogging.config=\n\n# IDENTITY (ContextIdApplicationContextInitializer)\n\nspring.application.name=\nspring.application.index=\n\n# EMBEDDED SERVER CONFIGURATION (ServerProperties)\n\nserver.port=8080\nserver.address= # bind to a specific NIC\nserver.session-timeout= # session timeout in seconds\nserver.context-path= # the context path, defaults to '/'\nserver.servlet-path= # the servlet path, defaults to '/'\nserver.tomcat.access-log-pattern= # log pattern of the access log\nserver.tomcat.access-log-enabled=false # is access logging enabled\nserver.tomcat.protocol-header=x-forwarded-proto # ssl forward headers\nserver.tomcat.remote-ip-header=x-forwarded-for\nserver.tomcat.basedir=/tmp # base dir (usually not needed, defaults to tmp)\nserver.tomcat.background-processor-delay=30; # in seconds\nserver.tomcat.max-threads = 0 # number of threads in protocol handler\nserver.tomcat.uri-encoding = UTF-8 # character encoding to use for URL decoding\n\n# SPRING MVC (HttpMapperProperties)\n\nhttp.mappers.json-pretty-print=false # pretty print JSON\nhttp.mappers.json-sort-keys=false # sort keys\nspring.mvc.locale= # set fixed locale, e.g. en_UK\nspring.mvc.date-format= # set fixed date format, e.g. dd/MM/yyyy\nspring.mvc.message-codes-resolver-format= # PREFIX_ERROR_CODE / POSTFIX_ERROR_CODE\nspring.view.prefix= # MVC view prefix\nspring.view.suffix= # ... and suffix\nspring.resources.cache-period= # cache timeouts in headers sent to browser\nspring.resources.add-mappings=true # if default mappings should be added\n\n# THYMELEAF (ThymeleafAutoConfiguration)\n\nspring.thymeleaf.prefix=classpath:/templates/\nspring.thymeleaf.suffix=.html\nspring.thymeleaf.mode=HTML5\nspring.thymeleaf.encoding=UTF-8\nspring.thymeleaf.content-type=text/html # ;charset=`<encoding>` is added\nspring.thymeleaf.cache=true # set to false for hot refresh\n\n# FREEMARKER (FreeMarkerAutoConfiguration)\n\nspring.freemarker.allowRequestOverride=false\nspring.freemarker.allowSessionOverride=false\nspring.freemarker.cache=true\nspring.freemarker.checkTemplateLocation=true\nspring.freemarker.contentType=text/html\nspring.freemarker.exposeRequestAttributes=false\nspring.freemarker.exposeSessionAttributes=false\nspring.freemarker.exposeSpringMacroHelpers=false\nspring.freemarker.prefix=\nspring.freemarker.requestContextAttribute=\nspring.freemarker.settings.*=\nspring.freemarker.suffix=.ftl\nspring.freemarker.templateEncoding=UTF-8\nspring.freemarker.templateLoaderPath=classpath:/templates/\nspring.freemarker.viewNames= # whitelist of view names that can be resolved\n\n# GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)\n\nspring.groovy.template.allowRequestOverride=false\nspring.groovy.template.allowSessionOverride=false\nspring.groovy.template.cache=true\nspring.groovy.template.configuration.*= # See Groovy's TemplateConfiguration\nspring.groovy.template.contentType=text/html\nspring.groovy.template.prefix=classpath:/templates/\nspring.groovy.template.suffix=.tpl\nspring.groovy.template.templateEncoding=UTF-8\nspring.groovy.template.viewNames= # whitelist of view names that can be resolved\n\n# VELOCITY TEMPLATES (VelocityAutoConfiguration)\n\nspring.velocity.allowRequestOverride=false\nspring.velocity.allowSessionOverride=false\nspring.velocity.cache=true\nspring.velocity.checkTemplateLocation=true\nspring.velocity.contentType=text/html\nspring.velocity.dateToolAttribute=\nspring.velocity.exposeRequestAttributes=false\nspring.velocity.exposeSessionAttributes=false\nspring.velocity.exposeSpringMacroHelpers=false\nspring.velocity.numberToolAttribute=\nspring.velocity.prefix=\nspring.velocity.properties.*=\nspring.velocity.requestContextAttribute=\nspring.velocity.resourceLoaderPath=classpath:/templates/\nspring.velocity.suffix=.vm\nspring.velocity.templateEncoding=UTF-8\nspring.velocity.viewNames= # whitelist of view names that can be resolved\n\n# INTERNATIONALIZATION (MessageSourceAutoConfiguration)\n\nspring.messages.basename=messages\nspring.messages.cacheSeconds=-1\nspring.messages.encoding=UTF-8\n\n\n# SECURITY (SecurityProperties)\n\nsecurity.user.name=user # login username\nsecurity.user.password= # login password\nsecurity.user.role=USER # role assigned to the user\nsecurity.require-ssl=false # advanced settings ...\nsecurity.enable-csrf=false\nsecurity.basic.enabled=true\nsecurity.basic.realm=Spring\nsecurity.basic.path= # /**\nsecurity.headers.xss=false\nsecurity.headers.cache=false\nsecurity.headers.frame=false\nsecurity.headers.contentType=false\nsecurity.headers.hsts=all # none / domain / all\nsecurity.sessions=stateless # always / never / if_required / stateless\nsecurity.ignored=false\n\n# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)\n\nspring.datasource.name= # name of the data source\nspring.datasource.initialize=true # populate using data.sql\nspring.datasource.schema= # a schema (DDL) script resource reference\nspring.datasource.data= # a data (DML) script resource reference\nspring.datasource.platform= # the platform to use in the schema resource (schema-${platform}.sql)\nspring.datasource.continueOnError=false # continue even if can't be initialized\nspring.datasource.separator=; # statement separator in SQL initialization scripts\nspring.datasource.driverClassName= # JDBC Settings...\nspring.datasource.url=\nspring.datasource.username=\nspring.datasource.password=\nspring.datasource.max-active=100 # Advanced configuration...\nspring.datasource.max-idle=8\nspring.datasource.min-idle=8\nspring.datasource.initial-size=10\nspring.datasource.validation-query=\nspring.datasource.test-on-borrow=false\nspring.datasource.test-on-return=false\nspring.datasource.test-while-idle=\nspring.datasource.time-between-eviction-runs-millis=\nspring.datasource.min-evictable-idle-time-millis=\nspring.datasource.max-wait-millis=\n\n# MONGODB (MongoProperties)\n\nspring.data.mongodb.host= # the db host\nspring.data.mongodb.port=27017 # the connection port (defaults to 27107)\nspring.data.mongodb.uri=mongodb://localhost/test # connection URL\nspring.data.mongo.repositories.enabled=true # if spring data repository support is enabled\n\n# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)\n\nspring.jpa.properties.*= # properties to set on the JPA connection\nspring.jpa.openInView=true\nspring.jpa.show-sql=true\nspring.jpa.database-platform=\nspring.jpa.database=\nspring.jpa.generate-ddl=false # ignored by Hibernate, might be useful for other vendors\nspring.jpa.hibernate.naming-strategy= # naming classname\nspring.jpa.hibernate.ddl-auto= # defaults to create-drop for embedded dbs\nspring.data.jpa.repositories.enabled=true # if spring data repository support is enabled\n\n# SOLR (SolrProperties})\n\nspring.data.solr.host=http://127.0.0.1:8983/solr\nspring.data.solr.zkHost=\nspring.data.solr.repositories.enabled=true # if spring data repository support is enabled\n\n# ELASTICSEARCH (ElasticsearchProperties})\n\nspring.data.elasticsearch.cluster-name= # The cluster name (defaults to elasticsearch)\nspring.data.elasticsearch.cluster-nodes= # The address(es) of the server node (comma-separated; if not specified starts a client node)\nspring.data.elasticsearch.local=true # if local mode should be used with client nodes\nspring.data.elasticsearch.repositories.enabled=true # if spring data repository support is enabled\n\n\n\n# FLYWAY (FlywayProperties)\n\nflyway.locations=classpath:db/migrations # locations of migrations scripts\nflyway.schemas= # schemas to update\nflyway.initVersion= 1 # version to start migration\nflyway.prefix=V\nflyway.suffix=.sql\nflyway.enabled=true\nflyway.url= # JDBC url if you want Flyway to create its own DataSource\nflyway.user= # JDBC username if you want Flyway to create its own DataSource\nflyway.password= # JDBC password if you want Flyway to create its own DataSource\n\n# LIQUIBASE (LiquibaseProperties)\n\nliquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml\nliquibase.contexts= # runtime contexts to use\nliquibase.default-schema= # default database schema to use\nliquibase.drop-first=false\nliquibase.enabled=true\n\n# JMX\n\nspring.jmx.enabled=true # Expose MBeans from Spring\n\n# RABBIT (RabbitProperties)\n\nspring.rabbitmq.host= # connection host\nspring.rabbitmq.port= # connection port\nspring.rabbitmq.addresses= # connection addresses (e.g. myhost:9999,otherhost:1111)\nspring.rabbitmq.username= # login user\nspring.rabbitmq.password= # login password\nspring.rabbitmq.virtualhost=\nspring.rabbitmq.dynamic=\n\n# REDIS (RedisProperties)\n\nspring.redis.host=localhost # server host\nspring.redis.password= # server password\nspring.redis.port=6379 # connection port\nspring.redis.pool.max-idle=8 # pool settings ...\nspring.redis.pool.min-idle=0\nspring.redis.pool.max-active=8\nspring.redis.pool.max-wait=-1\n\n# ACTIVEMQ (ActiveMQProperties)\n\nspring.activemq.broker-url=tcp://localhost:61616 # connection URL\nspring.activemq.user=\nspring.activemq.password=\nspring.activemq.in-memory=true # broker kind to create if no broker-url is specified\nspring.activemq.pooled=false\n\n# HornetQ (HornetQProperties)\n\nspring.hornetq.mode= # connection mode (native, embedded)\nspring.hornetq.host=localhost # hornetQ host (native mode)\nspring.hornetq.port=5445 # hornetQ port (native mode)\nspring.hornetq.embedded.enabled=true # if the embedded server is enabled (needs hornetq-jms-server.jar)\nspring.hornetq.embedded.serverId= # auto-generated id of the embedded server (integer)\nspring.hornetq.embedded.persistent=false # message persistence\nspring.hornetq.embedded.data-directory= # location of data content (when persistence is enabled)\nspring.hornetq.embedded.queues= # comma separate queues to create on startup\nspring.hornetq.embedded.topics= # comma separate topics to create on startup\nspring.hornetq.embedded.cluster-password= # customer password (randomly generated by default)\n\n# JMS (JmsProperties)\n\nspring.jms.pub-sub-domain= # false for queue (default), true for topic\n\n# SPRING BATCH (BatchDatabaseInitializer)\n\nspring.batch.job.names=job1,job2\nspring.batch.job.enabled=true\nspring.batch.initializer.enabled=true\nspring.batch.schema= # batch schema to load\n\n# AOP\n\nspring.aop.auto=\nspring.aop.proxy-target-class=\n\n# FILE ENCODING (FileEncodingApplicationListener)\n\nspring.mandatory-file-encoding=false\n\n# SPRING SOCIAL (SocialWebAutoConfiguration)\n\nspring.social.auto-connection-views=true # Set to true for default connection views or false if you provide your own\n\n# SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)\n\nspring.social.facebook.app-id= # your application's Facebook App ID\nspring.social.facebook.app-secret= # your application's Facebook App Secret\n\n# SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)\n\nspring.social.linkedin.app-id= # your application's LinkedIn App ID\nspring.social.linkedin.app-secret= # your application's LinkedIn App Secret\n\n# SPRING SOCIAL TWITTER (TwitterAutoConfiguration)\n\nspring.social.twitter.app-id= # your application's Twitter App ID\nspring.social.twitter.app-secret= # your application's Twitter App Secret\n\n# SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)\n\nspring.mobile.sitepreference.enabled=true # enabled by default\n\n# SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)\n\nspring.mobile.devicedelegatingviewresolver.enabled=true # disabled by default\nspring.mobile.devicedelegatingviewresolver.normalPrefix=\nspring.mobile.devicedelegatingviewresolver.normalSuffix=\nspring.mobile.devicedelegatingviewresolver.mobilePrefix=mobile/\nspring.mobile.devicedelegatingviewresolver.mobileSuffix=\nspring.mobile.devicedelegatingviewresolver.tabletPrefix=tablet/\nspring.mobile.devicedelegatingviewresolver.tabletSuffix=\n\n---\n\nACTUATOR PROPERTIES\n\n---\n\n# MANAGEMENT HTTP SERVER (ManagementServerProperties)\n\nmanagement.port= # defaults to 'server.port'\nmanagement.address= # bind to a specific NIC\nmanagement.contextPath= # default to '/'\n\n# ENDPOINTS (AbstractEndpoint subclasses)\n\nendpoints.autoconfig.id=autoconfig\nendpoints.autoconfig.sensitive=true\nendpoints.autoconfig.enabled=true\nendpoints.beans.id=beans\nendpoints.beans.sensitive=true\nendpoints.beans.enabled=true\nendpoints.configprops.id=configprops\nendpoints.configprops.sensitive=true\nendpoints.configprops.enabled=true\nendpoints.configprops.keys-to-sanitize=password,secret\nendpoints.dump.id=dump\nendpoints.dump.sensitive=true\nendpoints.dump.enabled=true\nendpoints.env.id=env\nendpoints.env.sensitive=true\nendpoints.env.enabled=true\nendpoints.health.id=health\nendpoints.health.sensitive=false\nendpoints.health.enabled=true\nendpoints.info.id=info\nendpoints.info.sensitive=false\nendpoints.info.enabled=true\nendpoints.metrics.id=metrics\nendpoints.metrics.sensitive=true\nendpoints.metrics.enabled=true\nendpoints.shutdown.id=shutdown\nendpoints.shutdown.sensitive=true\nendpoints.shutdown.enabled=false\nendpoints.trace.id=trace\nendpoints.trace.sensitive=true\nendpoints.trace.enabled=true\n\n# MVC ONLY ENDPOINTS\n\nendpoints.jolokia.path=jolokia\nendpoints.jolokia.sensitive=true\nendpoints.jolokia.enabled=true # when using Jolokia\nendpoints.error.path=/error\n\n# JMX ENDPOINT (EndpointMBeanExportProperties)\n\nendpoints.jmx.enabled=true\nendpoints.jmx.domain= # the JMX domain, defaults to 'org.springboot'\nendpoints.jmx.unique-names=false\nendpoints.jmx.enabled=true\nendpoints.jmx.staticNames=\n\n# JOLOKIA (JolokiaProperties)\n\njolokia.config.*= # See Jolokia manual\n\n# REMOTE SHELL\n\nshell.auth=simple # jaas, key, simple, spring\nshell.command-refresh-interval=-1\nshell.command-path-pattern= # classpath*:/commands/**, classpath*:/crash/commands/**\nshell.config-path-patterns= # classpath*:/crash/*\nshell.disabled-plugins=false # don't expose plugins\nshell.ssh.enabled= # ssh settings ...\nshell.ssh.keyPath=\nshell.ssh.port=\nshell.telnet.enabled= # telnet settings ...\nshell.telnet.port=\nshell.auth.jaas.domain= # authentication settings ...\nshell.auth.key.path=\nshell.auth.simple.user.name=\nshell.auth.simple.user.password=\nshell.auth.spring.roles=\n\n# GIT INFO\n\nspring.git.properties= # resource ref to generated git info properties file","slug":"springboot/boot-default-config","published":1,"updated":"2018-11-19T06:13:56.205Z","comments":1,"photos":[],"link":"","_id":"cjonx65t80018i8usboy38i20","content":"<h1 id=\"spring-boot-默认配置项\"><a href=\"#spring-boot-默认配置项\" class=\"headerlink\" title=\"spring boot 默认配置项\"></a>spring boot 默认配置项</h1><p>COMMON SPRING BOOT PROPERTIES<br>This sample file is provided as a guideline. Do NOT copy it in its<br>entirety to your own application. </p>\n<hr>\n<p><code>CORE PROPERTIES</code></p>\n<hr>\n<h1 id=\"SPRING-CONFIG-ConfigFileApplicationListener\"><a href=\"#SPRING-CONFIG-ConfigFileApplicationListener\" class=\"headerlink\" title=\"SPRING CONFIG (ConfigFileApplicationListener)\"></a>SPRING CONFIG (ConfigFileApplicationListener)</h1><p>spring.config.name= # config file name (default to ‘application’)<br>spring.config.location= # location of config file</p>\n<h1 id=\"PROFILES\"><a href=\"#PROFILES\" class=\"headerlink\" title=\"PROFILES\"></a>PROFILES</h1><p>spring.profiles= # comma list of active profiles</p>\n<h1 id=\"APPLICATION-SETTINGS-SpringApplication\"><a href=\"#APPLICATION-SETTINGS-SpringApplication\" class=\"headerlink\" title=\"APPLICATION SETTINGS (SpringApplication)\"></a>APPLICATION SETTINGS (SpringApplication)</h1><p>spring.main.sources=<br>spring.main.web-environment= # detect by default<br>spring.main.show-banner=true<br>spring.main….= # see class for all properties</p>\n<h1 id=\"LOGGING\"><a href=\"#LOGGING\" class=\"headerlink\" title=\"LOGGING\"></a>LOGGING</h1><p>logging.path=/var/logs<br>logging.file=myapp.log<br>logging.config=</p>\n<h1 id=\"IDENTITY-ContextIdApplicationContextInitializer\"><a href=\"#IDENTITY-ContextIdApplicationContextInitializer\" class=\"headerlink\" title=\"IDENTITY (ContextIdApplicationContextInitializer)\"></a>IDENTITY (ContextIdApplicationContextInitializer)</h1><p>spring.application.name=<br>spring.application.index=</p>\n<h1 id=\"EMBEDDED-SERVER-CONFIGURATION-ServerProperties\"><a href=\"#EMBEDDED-SERVER-CONFIGURATION-ServerProperties\" class=\"headerlink\" title=\"EMBEDDED SERVER CONFIGURATION (ServerProperties)\"></a>EMBEDDED SERVER CONFIGURATION (ServerProperties)</h1><p>server.port=8080<br>server.address= # bind to a specific NIC<br>server.session-timeout= # session timeout in seconds<br>server.context-path= # the context path, defaults to ‘/‘<br>server.servlet-path= # the servlet path, defaults to ‘/‘<br>server.tomcat.access-log-pattern= # log pattern of the access log<br>server.tomcat.access-log-enabled=false # is access logging enabled<br>server.tomcat.protocol-header=x-forwarded-proto # ssl forward headers<br>server.tomcat.remote-ip-header=x-forwarded-for<br>server.tomcat.basedir=/tmp # base dir (usually not needed, defaults to tmp)<br>server.tomcat.background-processor-delay=30; # in seconds<br>server.tomcat.max-threads = 0 # number of threads in protocol handler<br>server.tomcat.uri-encoding = UTF-8 # character encoding to use for URL decoding</p>\n<h1 id=\"SPRING-MVC-HttpMapperProperties\"><a href=\"#SPRING-MVC-HttpMapperProperties\" class=\"headerlink\" title=\"SPRING MVC (HttpMapperProperties)\"></a>SPRING MVC (HttpMapperProperties)</h1><p>http.mappers.json-pretty-print=false # pretty print JSON<br>http.mappers.json-sort-keys=false # sort keys<br>spring.mvc.locale= # set fixed locale, e.g. en_UK<br>spring.mvc.date-format= # set fixed date format, e.g. dd/MM/yyyy<br>spring.mvc.message-codes-resolver-format= # PREFIX_ERROR_CODE / POSTFIX_ERROR_CODE<br>spring.view.prefix= # MVC view prefix<br>spring.view.suffix= # … and suffix<br>spring.resources.cache-period= # cache timeouts in headers sent to browser<br>spring.resources.add-mappings=true # if default mappings should be added</p>\n<h1 id=\"THYMELEAF-ThymeleafAutoConfiguration\"><a href=\"#THYMELEAF-ThymeleafAutoConfiguration\" class=\"headerlink\" title=\"THYMELEAF (ThymeleafAutoConfiguration)\"></a>THYMELEAF (ThymeleafAutoConfiguration)</h1><p>spring.thymeleaf.prefix=classpath:/templates/<br>spring.thymeleaf.suffix=.html<br>spring.thymeleaf.mode=HTML5<br>spring.thymeleaf.encoding=UTF-8<br>spring.thymeleaf.content-type=text/html # ;charset=<code>&lt;encoding&gt;</code> is added<br>spring.thymeleaf.cache=true # set to false for hot refresh</p>\n<h1 id=\"FREEMARKER-FreeMarkerAutoConfiguration\"><a href=\"#FREEMARKER-FreeMarkerAutoConfiguration\" class=\"headerlink\" title=\"FREEMARKER (FreeMarkerAutoConfiguration)\"></a>FREEMARKER (FreeMarkerAutoConfiguration)</h1><p>spring.freemarker.allowRequestOverride=false<br>spring.freemarker.allowSessionOverride=false<br>spring.freemarker.cache=true<br>spring.freemarker.checkTemplateLocation=true<br>spring.freemarker.contentType=text/html<br>spring.freemarker.exposeRequestAttributes=false<br>spring.freemarker.exposeSessionAttributes=false<br>spring.freemarker.exposeSpringMacroHelpers=false<br>spring.freemarker.prefix=<br>spring.freemarker.requestContextAttribute=<br>spring.freemarker.settings.*=<br>spring.freemarker.suffix=.ftl<br>spring.freemarker.templateEncoding=UTF-8<br>spring.freemarker.templateLoaderPath=classpath:/templates/<br>spring.freemarker.viewNames= # whitelist of view names that can be resolved</p>\n<h1 id=\"GROOVY-TEMPLATES-GroovyTemplateAutoConfiguration\"><a href=\"#GROOVY-TEMPLATES-GroovyTemplateAutoConfiguration\" class=\"headerlink\" title=\"GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)\"></a>GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)</h1><p>spring.groovy.template.allowRequestOverride=false<br>spring.groovy.template.allowSessionOverride=false<br>spring.groovy.template.cache=true<br>spring.groovy.template.configuration.*= # See Groovy’s TemplateConfiguration<br>spring.groovy.template.contentType=text/html<br>spring.groovy.template.prefix=classpath:/templates/<br>spring.groovy.template.suffix=.tpl<br>spring.groovy.template.templateEncoding=UTF-8<br>spring.groovy.template.viewNames= # whitelist of view names that can be resolved</p>\n<h1 id=\"VELOCITY-TEMPLATES-VelocityAutoConfiguration\"><a href=\"#VELOCITY-TEMPLATES-VelocityAutoConfiguration\" class=\"headerlink\" title=\"VELOCITY TEMPLATES (VelocityAutoConfiguration)\"></a>VELOCITY TEMPLATES (VelocityAutoConfiguration)</h1><p>spring.velocity.allowRequestOverride=false<br>spring.velocity.allowSessionOverride=false<br>spring.velocity.cache=true<br>spring.velocity.checkTemplateLocation=true<br>spring.velocity.contentType=text/html<br>spring.velocity.dateToolAttribute=<br>spring.velocity.exposeRequestAttributes=false<br>spring.velocity.exposeSessionAttributes=false<br>spring.velocity.exposeSpringMacroHelpers=false<br>spring.velocity.numberToolAttribute=<br>spring.velocity.prefix=<br>spring.velocity.properties.*=<br>spring.velocity.requestContextAttribute=<br>spring.velocity.resourceLoaderPath=classpath:/templates/<br>spring.velocity.suffix=.vm<br>spring.velocity.templateEncoding=UTF-8<br>spring.velocity.viewNames= # whitelist of view names that can be resolved</p>\n<h1 id=\"INTERNATIONALIZATION-MessageSourceAutoConfiguration\"><a href=\"#INTERNATIONALIZATION-MessageSourceAutoConfiguration\" class=\"headerlink\" title=\"INTERNATIONALIZATION (MessageSourceAutoConfiguration)\"></a>INTERNATIONALIZATION (MessageSourceAutoConfiguration)</h1><p>spring.messages.basename=messages<br>spring.messages.cacheSeconds=-1<br>spring.messages.encoding=UTF-8</p>\n<h1 id=\"SECURITY-SecurityProperties\"><a href=\"#SECURITY-SecurityProperties\" class=\"headerlink\" title=\"SECURITY (SecurityProperties)\"></a>SECURITY (SecurityProperties)</h1><p>security.user.name=user # login username<br>security.user.password= # login password<br>security.user.role=USER # role assigned to the user<br>security.require-ssl=false # advanced settings …<br>security.enable-csrf=false<br>security.basic.enabled=true<br>security.basic.realm=Spring<br>security.basic.path= # /**<br>security.headers.xss=false<br>security.headers.cache=false<br>security.headers.frame=false<br>security.headers.contentType=false<br>security.headers.hsts=all # none / domain / all<br>security.sessions=stateless # always / never / if_required / stateless<br>security.ignored=false</p>\n<h1 id=\"DATASOURCE-DataSourceAutoConfiguration-amp-DataSourceProperties\"><a href=\"#DATASOURCE-DataSourceAutoConfiguration-amp-DataSourceProperties\" class=\"headerlink\" title=\"DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)\"></a>DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</h1><p>spring.datasource.name= # name of the data source<br>spring.datasource.initialize=true # populate using data.sql<br>spring.datasource.schema= # a schema (DDL) script resource reference<br>spring.datasource.data= # a data (DML) script resource reference<br>spring.datasource.platform= # the platform to use in the schema resource (schema-${platform}.sql)<br>spring.datasource.continueOnError=false # continue even if can’t be initialized<br>spring.datasource.separator=; # statement separator in SQL initialization scripts<br>spring.datasource.driverClassName= # JDBC Settings…<br>spring.datasource.url=<br>spring.datasource.username=<br>spring.datasource.password=<br>spring.datasource.max-active=100 # Advanced configuration…<br>spring.datasource.max-idle=8<br>spring.datasource.min-idle=8<br>spring.datasource.initial-size=10<br>spring.datasource.validation-query=<br>spring.datasource.test-on-borrow=false<br>spring.datasource.test-on-return=false<br>spring.datasource.test-while-idle=<br>spring.datasource.time-between-eviction-runs-millis=<br>spring.datasource.min-evictable-idle-time-millis=<br>spring.datasource.max-wait-millis=</p>\n<h1 id=\"MONGODB-MongoProperties\"><a href=\"#MONGODB-MongoProperties\" class=\"headerlink\" title=\"MONGODB (MongoProperties)\"></a>MONGODB (MongoProperties)</h1><p>spring.data.mongodb.host= # the db host<br>spring.data.mongodb.port=27017 # the connection port (defaults to 27107)<br>spring.data.mongodb.uri=mongodb://localhost/test # connection URL<br>spring.data.mongo.repositories.enabled=true # if spring data repository support is enabled</p>\n<h1 id=\"JPA-JpaBaseConfiguration-HibernateJpaAutoConfiguration\"><a href=\"#JPA-JpaBaseConfiguration-HibernateJpaAutoConfiguration\" class=\"headerlink\" title=\"JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)\"></a>JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</h1><p>spring.jpa.properties.*= # properties to set on the JPA connection<br>spring.jpa.openInView=true<br>spring.jpa.show-sql=true<br>spring.jpa.database-platform=<br>spring.jpa.database=<br>spring.jpa.generate-ddl=false # ignored by Hibernate, might be useful for other vendors<br>spring.jpa.hibernate.naming-strategy= # naming classname<br>spring.jpa.hibernate.ddl-auto= # defaults to create-drop for embedded dbs<br>spring.data.jpa.repositories.enabled=true # if spring data repository support is enabled</p>\n<h1 id=\"SOLR-SolrProperties\"><a href=\"#SOLR-SolrProperties\" class=\"headerlink\" title=\"SOLR (SolrProperties})\"></a>SOLR (SolrProperties})</h1><p>spring.data.solr.host=<a href=\"http://127.0.0.1:8983/solr\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8983/solr</a><br>spring.data.solr.zkHost=<br>spring.data.solr.repositories.enabled=true # if spring data repository support is enabled</p>\n<h1 id=\"ELASTICSEARCH-ElasticsearchProperties\"><a href=\"#ELASTICSEARCH-ElasticsearchProperties\" class=\"headerlink\" title=\"ELASTICSEARCH (ElasticsearchProperties})\"></a>ELASTICSEARCH (ElasticsearchProperties})</h1><p>spring.data.elasticsearch.cluster-name= # The cluster name (defaults to elasticsearch)<br>spring.data.elasticsearch.cluster-nodes= # The address(es) of the server node (comma-separated; if not specified starts a client node)<br>spring.data.elasticsearch.local=true # if local mode should be used with client nodes<br>spring.data.elasticsearch.repositories.enabled=true # if spring data repository support is enabled</p>\n<h1 id=\"FLYWAY-FlywayProperties\"><a href=\"#FLYWAY-FlywayProperties\" class=\"headerlink\" title=\"FLYWAY (FlywayProperties)\"></a>FLYWAY (FlywayProperties)</h1><p>flyway.locations=classpath:db/migrations # locations of migrations scripts<br>flyway.schemas= # schemas to update<br>flyway.initVersion= 1 # version to start migration<br>flyway.prefix=V<br>flyway.suffix=.sql<br>flyway.enabled=true<br>flyway.url= # JDBC url if you want Flyway to create its own DataSource<br>flyway.user= # JDBC username if you want Flyway to create its own DataSource<br>flyway.password= # JDBC password if you want Flyway to create its own DataSource</p>\n<h1 id=\"LIQUIBASE-LiquibaseProperties\"><a href=\"#LIQUIBASE-LiquibaseProperties\" class=\"headerlink\" title=\"LIQUIBASE (LiquibaseProperties)\"></a>LIQUIBASE (LiquibaseProperties)</h1><p>liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml<br>liquibase.contexts= # runtime contexts to use<br>liquibase.default-schema= # default database schema to use<br>liquibase.drop-first=false<br>liquibase.enabled=true</p>\n<h1 id=\"JMX\"><a href=\"#JMX\" class=\"headerlink\" title=\"JMX\"></a>JMX</h1><p>spring.jmx.enabled=true # Expose MBeans from Spring</p>\n<h1 id=\"RABBIT-RabbitProperties\"><a href=\"#RABBIT-RabbitProperties\" class=\"headerlink\" title=\"RABBIT (RabbitProperties)\"></a>RABBIT (RabbitProperties)</h1><p>spring.rabbitmq.host= # connection host<br>spring.rabbitmq.port= # connection port<br>spring.rabbitmq.addresses= # connection addresses (e.g. myhost:9999,otherhost:1111)<br>spring.rabbitmq.username= # login user<br>spring.rabbitmq.password= # login password<br>spring.rabbitmq.virtualhost=<br>spring.rabbitmq.dynamic=</p>\n<h1 id=\"REDIS-RedisProperties\"><a href=\"#REDIS-RedisProperties\" class=\"headerlink\" title=\"REDIS (RedisProperties)\"></a>REDIS (RedisProperties)</h1><p>spring.redis.host=localhost # server host<br>spring.redis.password= # server password<br>spring.redis.port=6379 # connection port<br>spring.redis.pool.max-idle=8 # pool settings …<br>spring.redis.pool.min-idle=0<br>spring.redis.pool.max-active=8<br>spring.redis.pool.max-wait=-1</p>\n<h1 id=\"ACTIVEMQ-ActiveMQProperties\"><a href=\"#ACTIVEMQ-ActiveMQProperties\" class=\"headerlink\" title=\"ACTIVEMQ (ActiveMQProperties)\"></a>ACTIVEMQ (ActiveMQProperties)</h1><p>spring.activemq.broker-url=tcp://localhost:61616 # connection URL<br>spring.activemq.user=<br>spring.activemq.password=<br>spring.activemq.in-memory=true # broker kind to create if no broker-url is specified<br>spring.activemq.pooled=false</p>\n<h1 id=\"HornetQ-HornetQProperties\"><a href=\"#HornetQ-HornetQProperties\" class=\"headerlink\" title=\"HornetQ (HornetQProperties)\"></a>HornetQ (HornetQProperties)</h1><p>spring.hornetq.mode= # connection mode (native, embedded)<br>spring.hornetq.host=localhost # hornetQ host (native mode)<br>spring.hornetq.port=5445 # hornetQ port (native mode)<br>spring.hornetq.embedded.enabled=true # if the embedded server is enabled (needs hornetq-jms-server.jar)<br>spring.hornetq.embedded.serverId= # auto-generated id of the embedded server (integer)<br>spring.hornetq.embedded.persistent=false # message persistence<br>spring.hornetq.embedded.data-directory= # location of data content (when persistence is enabled)<br>spring.hornetq.embedded.queues= # comma separate queues to create on startup<br>spring.hornetq.embedded.topics= # comma separate topics to create on startup<br>spring.hornetq.embedded.cluster-password= # customer password (randomly generated by default)</p>\n<h1 id=\"JMS-JmsProperties\"><a href=\"#JMS-JmsProperties\" class=\"headerlink\" title=\"JMS (JmsProperties)\"></a>JMS (JmsProperties)</h1><p>spring.jms.pub-sub-domain= # false for queue (default), true for topic</p>\n<h1 id=\"SPRING-BATCH-BatchDatabaseInitializer\"><a href=\"#SPRING-BATCH-BatchDatabaseInitializer\" class=\"headerlink\" title=\"SPRING BATCH (BatchDatabaseInitializer)\"></a>SPRING BATCH (BatchDatabaseInitializer)</h1><p>spring.batch.job.names=job1,job2<br>spring.batch.job.enabled=true<br>spring.batch.initializer.enabled=true<br>spring.batch.schema= # batch schema to load</p>\n<h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><p>spring.aop.auto=<br>spring.aop.proxy-target-class=</p>\n<h1 id=\"FILE-ENCODING-FileEncodingApplicationListener\"><a href=\"#FILE-ENCODING-FileEncodingApplicationListener\" class=\"headerlink\" title=\"FILE ENCODING (FileEncodingApplicationListener)\"></a>FILE ENCODING (FileEncodingApplicationListener)</h1><p>spring.mandatory-file-encoding=false</p>\n<h1 id=\"SPRING-SOCIAL-SocialWebAutoConfiguration\"><a href=\"#SPRING-SOCIAL-SocialWebAutoConfiguration\" class=\"headerlink\" title=\"SPRING SOCIAL (SocialWebAutoConfiguration)\"></a>SPRING SOCIAL (SocialWebAutoConfiguration)</h1><p>spring.social.auto-connection-views=true # Set to true for default connection views or false if you provide your own</p>\n<h1 id=\"SPRING-SOCIAL-FACEBOOK-FacebookAutoConfiguration\"><a href=\"#SPRING-SOCIAL-FACEBOOK-FacebookAutoConfiguration\" class=\"headerlink\" title=\"SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)\"></a>SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)</h1><p>spring.social.facebook.app-id= # your application’s Facebook App ID<br>spring.social.facebook.app-secret= # your application’s Facebook App Secret</p>\n<h1 id=\"SPRING-SOCIAL-LINKEDIN-LinkedInAutoConfiguration\"><a href=\"#SPRING-SOCIAL-LINKEDIN-LinkedInAutoConfiguration\" class=\"headerlink\" title=\"SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)\"></a>SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)</h1><p>spring.social.linkedin.app-id= # your application’s LinkedIn App ID<br>spring.social.linkedin.app-secret= # your application’s LinkedIn App Secret</p>\n<h1 id=\"SPRING-SOCIAL-TWITTER-TwitterAutoConfiguration\"><a href=\"#SPRING-SOCIAL-TWITTER-TwitterAutoConfiguration\" class=\"headerlink\" title=\"SPRING SOCIAL TWITTER (TwitterAutoConfiguration)\"></a>SPRING SOCIAL TWITTER (TwitterAutoConfiguration)</h1><p>spring.social.twitter.app-id= # your application’s Twitter App ID<br>spring.social.twitter.app-secret= # your application’s Twitter App Secret</p>\n<h1 id=\"SPRING-MOBILE-SITE-PREFERENCE-SitePreferenceAutoConfiguration\"><a href=\"#SPRING-MOBILE-SITE-PREFERENCE-SitePreferenceAutoConfiguration\" class=\"headerlink\" title=\"SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)\"></a>SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)</h1><p>spring.mobile.sitepreference.enabled=true # enabled by default</p>\n<h1 id=\"SPRING-MOBILE-DEVICE-VIEWS-DeviceDelegatingViewResolverAutoConfiguration\"><a href=\"#SPRING-MOBILE-DEVICE-VIEWS-DeviceDelegatingViewResolverAutoConfiguration\" class=\"headerlink\" title=\"SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)\"></a>SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)</h1><p>spring.mobile.devicedelegatingviewresolver.enabled=true # disabled by default<br>spring.mobile.devicedelegatingviewresolver.normalPrefix=<br>spring.mobile.devicedelegatingviewresolver.normalSuffix=<br>spring.mobile.devicedelegatingviewresolver.mobilePrefix=mobile/<br>spring.mobile.devicedelegatingviewresolver.mobileSuffix=<br>spring.mobile.devicedelegatingviewresolver.tabletPrefix=tablet/<br>spring.mobile.devicedelegatingviewresolver.tabletSuffix=</p>\n<hr>\n<p>ACTUATOR PROPERTIES</p>\n<hr>\n<h1 id=\"MANAGEMENT-HTTP-SERVER-ManagementServerProperties\"><a href=\"#MANAGEMENT-HTTP-SERVER-ManagementServerProperties\" class=\"headerlink\" title=\"MANAGEMENT HTTP SERVER (ManagementServerProperties)\"></a>MANAGEMENT HTTP SERVER (ManagementServerProperties)</h1><p>management.port= # defaults to ‘server.port’<br>management.address= # bind to a specific NIC<br>management.contextPath= # default to ‘/‘</p>\n<h1 id=\"ENDPOINTS-AbstractEndpoint-subclasses\"><a href=\"#ENDPOINTS-AbstractEndpoint-subclasses\" class=\"headerlink\" title=\"ENDPOINTS (AbstractEndpoint subclasses)\"></a>ENDPOINTS (AbstractEndpoint subclasses)</h1><p>endpoints.autoconfig.id=autoconfig<br>endpoints.autoconfig.sensitive=true<br>endpoints.autoconfig.enabled=true<br>endpoints.beans.id=beans<br>endpoints.beans.sensitive=true<br>endpoints.beans.enabled=true<br>endpoints.configprops.id=configprops<br>endpoints.configprops.sensitive=true<br>endpoints.configprops.enabled=true<br>endpoints.configprops.keys-to-sanitize=password,secret<br>endpoints.dump.id=dump<br>endpoints.dump.sensitive=true<br>endpoints.dump.enabled=true<br>endpoints.env.id=env<br>endpoints.env.sensitive=true<br>endpoints.env.enabled=true<br>endpoints.health.id=health<br>endpoints.health.sensitive=false<br>endpoints.health.enabled=true<br>endpoints.info.id=info<br>endpoints.info.sensitive=false<br>endpoints.info.enabled=true<br>endpoints.metrics.id=metrics<br>endpoints.metrics.sensitive=true<br>endpoints.metrics.enabled=true<br>endpoints.shutdown.id=shutdown<br>endpoints.shutdown.sensitive=true<br>endpoints.shutdown.enabled=false<br>endpoints.trace.id=trace<br>endpoints.trace.sensitive=true<br>endpoints.trace.enabled=true</p>\n<h1 id=\"MVC-ONLY-ENDPOINTS\"><a href=\"#MVC-ONLY-ENDPOINTS\" class=\"headerlink\" title=\"MVC ONLY ENDPOINTS\"></a>MVC ONLY ENDPOINTS</h1><p>endpoints.jolokia.path=jolokia<br>endpoints.jolokia.sensitive=true<br>endpoints.jolokia.enabled=true # when using Jolokia<br>endpoints.error.path=/error</p>\n<h1 id=\"JMX-ENDPOINT-EndpointMBeanExportProperties\"><a href=\"#JMX-ENDPOINT-EndpointMBeanExportProperties\" class=\"headerlink\" title=\"JMX ENDPOINT (EndpointMBeanExportProperties)\"></a>JMX ENDPOINT (EndpointMBeanExportProperties)</h1><p>endpoints.jmx.enabled=true<br>endpoints.jmx.domain= # the JMX domain, defaults to ‘org.springboot’<br>endpoints.jmx.unique-names=false<br>endpoints.jmx.enabled=true<br>endpoints.jmx.staticNames=</p>\n<h1 id=\"JOLOKIA-JolokiaProperties\"><a href=\"#JOLOKIA-JolokiaProperties\" class=\"headerlink\" title=\"JOLOKIA (JolokiaProperties)\"></a>JOLOKIA (JolokiaProperties)</h1><p>jolokia.config.*= # See Jolokia manual</p>\n<h1 id=\"REMOTE-SHELL\"><a href=\"#REMOTE-SHELL\" class=\"headerlink\" title=\"REMOTE SHELL\"></a>REMOTE SHELL</h1><p>shell.auth=simple # jaas, key, simple, spring<br>shell.command-refresh-interval=-1<br>shell.command-path-pattern= # classpath<em>:/commands/**, classpath</em>:/crash/commands/*<em><br>shell.config-path-patterns= # classpath</em>:/crash/*<br>shell.disabled-plugins=false # don’t expose plugins<br>shell.ssh.enabled= # ssh settings …<br>shell.ssh.keyPath=<br>shell.ssh.port=<br>shell.telnet.enabled= # telnet settings …<br>shell.telnet.port=<br>shell.auth.jaas.domain= # authentication settings …<br>shell.auth.key.path=<br>shell.auth.simple.user.name=<br>shell.auth.simple.user.password=<br>shell.auth.spring.roles=</p>\n<h1 id=\"GIT-INFO\"><a href=\"#GIT-INFO\" class=\"headerlink\" title=\"GIT INFO\"></a>GIT INFO</h1><p>spring.git.properties= # resource ref to generated git info properties file</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"spring-boot-默认配置项\"><a href=\"#spring-boot-默认配置项\" class=\"headerlink\" title=\"spring boot 默认配置项\"></a>spring boot 默认配置项</h1><p>COMMON SPRING BOOT PROPERTIES<br>This sample file is provided as a guideline. Do NOT copy it in its<br>entirety to your own application. </p>\n<hr>\n<p><code>CORE PROPERTIES</code></p>\n<hr>\n<h1 id=\"SPRING-CONFIG-ConfigFileApplicationListener\"><a href=\"#SPRING-CONFIG-ConfigFileApplicationListener\" class=\"headerlink\" title=\"SPRING CONFIG (ConfigFileApplicationListener)\"></a>SPRING CONFIG (ConfigFileApplicationListener)</h1><p>spring.config.name= # config file name (default to ‘application’)<br>spring.config.location= # location of config file</p>\n<h1 id=\"PROFILES\"><a href=\"#PROFILES\" class=\"headerlink\" title=\"PROFILES\"></a>PROFILES</h1><p>spring.profiles= # comma list of active profiles</p>\n<h1 id=\"APPLICATION-SETTINGS-SpringApplication\"><a href=\"#APPLICATION-SETTINGS-SpringApplication\" class=\"headerlink\" title=\"APPLICATION SETTINGS (SpringApplication)\"></a>APPLICATION SETTINGS (SpringApplication)</h1><p>spring.main.sources=<br>spring.main.web-environment= # detect by default<br>spring.main.show-banner=true<br>spring.main….= # see class for all properties</p>\n<h1 id=\"LOGGING\"><a href=\"#LOGGING\" class=\"headerlink\" title=\"LOGGING\"></a>LOGGING</h1><p>logging.path=/var/logs<br>logging.file=myapp.log<br>logging.config=</p>\n<h1 id=\"IDENTITY-ContextIdApplicationContextInitializer\"><a href=\"#IDENTITY-ContextIdApplicationContextInitializer\" class=\"headerlink\" title=\"IDENTITY (ContextIdApplicationContextInitializer)\"></a>IDENTITY (ContextIdApplicationContextInitializer)</h1><p>spring.application.name=<br>spring.application.index=</p>\n<h1 id=\"EMBEDDED-SERVER-CONFIGURATION-ServerProperties\"><a href=\"#EMBEDDED-SERVER-CONFIGURATION-ServerProperties\" class=\"headerlink\" title=\"EMBEDDED SERVER CONFIGURATION (ServerProperties)\"></a>EMBEDDED SERVER CONFIGURATION (ServerProperties)</h1><p>server.port=8080<br>server.address= # bind to a specific NIC<br>server.session-timeout= # session timeout in seconds<br>server.context-path= # the context path, defaults to ‘/‘<br>server.servlet-path= # the servlet path, defaults to ‘/‘<br>server.tomcat.access-log-pattern= # log pattern of the access log<br>server.tomcat.access-log-enabled=false # is access logging enabled<br>server.tomcat.protocol-header=x-forwarded-proto # ssl forward headers<br>server.tomcat.remote-ip-header=x-forwarded-for<br>server.tomcat.basedir=/tmp # base dir (usually not needed, defaults to tmp)<br>server.tomcat.background-processor-delay=30; # in seconds<br>server.tomcat.max-threads = 0 # number of threads in protocol handler<br>server.tomcat.uri-encoding = UTF-8 # character encoding to use for URL decoding</p>\n<h1 id=\"SPRING-MVC-HttpMapperProperties\"><a href=\"#SPRING-MVC-HttpMapperProperties\" class=\"headerlink\" title=\"SPRING MVC (HttpMapperProperties)\"></a>SPRING MVC (HttpMapperProperties)</h1><p>http.mappers.json-pretty-print=false # pretty print JSON<br>http.mappers.json-sort-keys=false # sort keys<br>spring.mvc.locale= # set fixed locale, e.g. en_UK<br>spring.mvc.date-format= # set fixed date format, e.g. dd/MM/yyyy<br>spring.mvc.message-codes-resolver-format= # PREFIX_ERROR_CODE / POSTFIX_ERROR_CODE<br>spring.view.prefix= # MVC view prefix<br>spring.view.suffix= # … and suffix<br>spring.resources.cache-period= # cache timeouts in headers sent to browser<br>spring.resources.add-mappings=true # if default mappings should be added</p>\n<h1 id=\"THYMELEAF-ThymeleafAutoConfiguration\"><a href=\"#THYMELEAF-ThymeleafAutoConfiguration\" class=\"headerlink\" title=\"THYMELEAF (ThymeleafAutoConfiguration)\"></a>THYMELEAF (ThymeleafAutoConfiguration)</h1><p>spring.thymeleaf.prefix=classpath:/templates/<br>spring.thymeleaf.suffix=.html<br>spring.thymeleaf.mode=HTML5<br>spring.thymeleaf.encoding=UTF-8<br>spring.thymeleaf.content-type=text/html # ;charset=<code>&lt;encoding&gt;</code> is added<br>spring.thymeleaf.cache=true # set to false for hot refresh</p>\n<h1 id=\"FREEMARKER-FreeMarkerAutoConfiguration\"><a href=\"#FREEMARKER-FreeMarkerAutoConfiguration\" class=\"headerlink\" title=\"FREEMARKER (FreeMarkerAutoConfiguration)\"></a>FREEMARKER (FreeMarkerAutoConfiguration)</h1><p>spring.freemarker.allowRequestOverride=false<br>spring.freemarker.allowSessionOverride=false<br>spring.freemarker.cache=true<br>spring.freemarker.checkTemplateLocation=true<br>spring.freemarker.contentType=text/html<br>spring.freemarker.exposeRequestAttributes=false<br>spring.freemarker.exposeSessionAttributes=false<br>spring.freemarker.exposeSpringMacroHelpers=false<br>spring.freemarker.prefix=<br>spring.freemarker.requestContextAttribute=<br>spring.freemarker.settings.*=<br>spring.freemarker.suffix=.ftl<br>spring.freemarker.templateEncoding=UTF-8<br>spring.freemarker.templateLoaderPath=classpath:/templates/<br>spring.freemarker.viewNames= # whitelist of view names that can be resolved</p>\n<h1 id=\"GROOVY-TEMPLATES-GroovyTemplateAutoConfiguration\"><a href=\"#GROOVY-TEMPLATES-GroovyTemplateAutoConfiguration\" class=\"headerlink\" title=\"GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)\"></a>GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)</h1><p>spring.groovy.template.allowRequestOverride=false<br>spring.groovy.template.allowSessionOverride=false<br>spring.groovy.template.cache=true<br>spring.groovy.template.configuration.*= # See Groovy’s TemplateConfiguration<br>spring.groovy.template.contentType=text/html<br>spring.groovy.template.prefix=classpath:/templates/<br>spring.groovy.template.suffix=.tpl<br>spring.groovy.template.templateEncoding=UTF-8<br>spring.groovy.template.viewNames= # whitelist of view names that can be resolved</p>\n<h1 id=\"VELOCITY-TEMPLATES-VelocityAutoConfiguration\"><a href=\"#VELOCITY-TEMPLATES-VelocityAutoConfiguration\" class=\"headerlink\" title=\"VELOCITY TEMPLATES (VelocityAutoConfiguration)\"></a>VELOCITY TEMPLATES (VelocityAutoConfiguration)</h1><p>spring.velocity.allowRequestOverride=false<br>spring.velocity.allowSessionOverride=false<br>spring.velocity.cache=true<br>spring.velocity.checkTemplateLocation=true<br>spring.velocity.contentType=text/html<br>spring.velocity.dateToolAttribute=<br>spring.velocity.exposeRequestAttributes=false<br>spring.velocity.exposeSessionAttributes=false<br>spring.velocity.exposeSpringMacroHelpers=false<br>spring.velocity.numberToolAttribute=<br>spring.velocity.prefix=<br>spring.velocity.properties.*=<br>spring.velocity.requestContextAttribute=<br>spring.velocity.resourceLoaderPath=classpath:/templates/<br>spring.velocity.suffix=.vm<br>spring.velocity.templateEncoding=UTF-8<br>spring.velocity.viewNames= # whitelist of view names that can be resolved</p>\n<h1 id=\"INTERNATIONALIZATION-MessageSourceAutoConfiguration\"><a href=\"#INTERNATIONALIZATION-MessageSourceAutoConfiguration\" class=\"headerlink\" title=\"INTERNATIONALIZATION (MessageSourceAutoConfiguration)\"></a>INTERNATIONALIZATION (MessageSourceAutoConfiguration)</h1><p>spring.messages.basename=messages<br>spring.messages.cacheSeconds=-1<br>spring.messages.encoding=UTF-8</p>\n<h1 id=\"SECURITY-SecurityProperties\"><a href=\"#SECURITY-SecurityProperties\" class=\"headerlink\" title=\"SECURITY (SecurityProperties)\"></a>SECURITY (SecurityProperties)</h1><p>security.user.name=user # login username<br>security.user.password= # login password<br>security.user.role=USER # role assigned to the user<br>security.require-ssl=false # advanced settings …<br>security.enable-csrf=false<br>security.basic.enabled=true<br>security.basic.realm=Spring<br>security.basic.path= # /**<br>security.headers.xss=false<br>security.headers.cache=false<br>security.headers.frame=false<br>security.headers.contentType=false<br>security.headers.hsts=all # none / domain / all<br>security.sessions=stateless # always / never / if_required / stateless<br>security.ignored=false</p>\n<h1 id=\"DATASOURCE-DataSourceAutoConfiguration-amp-DataSourceProperties\"><a href=\"#DATASOURCE-DataSourceAutoConfiguration-amp-DataSourceProperties\" class=\"headerlink\" title=\"DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)\"></a>DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</h1><p>spring.datasource.name= # name of the data source<br>spring.datasource.initialize=true # populate using data.sql<br>spring.datasource.schema= # a schema (DDL) script resource reference<br>spring.datasource.data= # a data (DML) script resource reference<br>spring.datasource.platform= # the platform to use in the schema resource (schema-${platform}.sql)<br>spring.datasource.continueOnError=false # continue even if can’t be initialized<br>spring.datasource.separator=; # statement separator in SQL initialization scripts<br>spring.datasource.driverClassName= # JDBC Settings…<br>spring.datasource.url=<br>spring.datasource.username=<br>spring.datasource.password=<br>spring.datasource.max-active=100 # Advanced configuration…<br>spring.datasource.max-idle=8<br>spring.datasource.min-idle=8<br>spring.datasource.initial-size=10<br>spring.datasource.validation-query=<br>spring.datasource.test-on-borrow=false<br>spring.datasource.test-on-return=false<br>spring.datasource.test-while-idle=<br>spring.datasource.time-between-eviction-runs-millis=<br>spring.datasource.min-evictable-idle-time-millis=<br>spring.datasource.max-wait-millis=</p>\n<h1 id=\"MONGODB-MongoProperties\"><a href=\"#MONGODB-MongoProperties\" class=\"headerlink\" title=\"MONGODB (MongoProperties)\"></a>MONGODB (MongoProperties)</h1><p>spring.data.mongodb.host= # the db host<br>spring.data.mongodb.port=27017 # the connection port (defaults to 27107)<br>spring.data.mongodb.uri=mongodb://localhost/test # connection URL<br>spring.data.mongo.repositories.enabled=true # if spring data repository support is enabled</p>\n<h1 id=\"JPA-JpaBaseConfiguration-HibernateJpaAutoConfiguration\"><a href=\"#JPA-JpaBaseConfiguration-HibernateJpaAutoConfiguration\" class=\"headerlink\" title=\"JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)\"></a>JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</h1><p>spring.jpa.properties.*= # properties to set on the JPA connection<br>spring.jpa.openInView=true<br>spring.jpa.show-sql=true<br>spring.jpa.database-platform=<br>spring.jpa.database=<br>spring.jpa.generate-ddl=false # ignored by Hibernate, might be useful for other vendors<br>spring.jpa.hibernate.naming-strategy= # naming classname<br>spring.jpa.hibernate.ddl-auto= # defaults to create-drop for embedded dbs<br>spring.data.jpa.repositories.enabled=true # if spring data repository support is enabled</p>\n<h1 id=\"SOLR-SolrProperties\"><a href=\"#SOLR-SolrProperties\" class=\"headerlink\" title=\"SOLR (SolrProperties})\"></a>SOLR (SolrProperties})</h1><p>spring.data.solr.host=<a href=\"http://127.0.0.1:8983/solr\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8983/solr</a><br>spring.data.solr.zkHost=<br>spring.data.solr.repositories.enabled=true # if spring data repository support is enabled</p>\n<h1 id=\"ELASTICSEARCH-ElasticsearchProperties\"><a href=\"#ELASTICSEARCH-ElasticsearchProperties\" class=\"headerlink\" title=\"ELASTICSEARCH (ElasticsearchProperties})\"></a>ELASTICSEARCH (ElasticsearchProperties})</h1><p>spring.data.elasticsearch.cluster-name= # The cluster name (defaults to elasticsearch)<br>spring.data.elasticsearch.cluster-nodes= # The address(es) of the server node (comma-separated; if not specified starts a client node)<br>spring.data.elasticsearch.local=true # if local mode should be used with client nodes<br>spring.data.elasticsearch.repositories.enabled=true # if spring data repository support is enabled</p>\n<h1 id=\"FLYWAY-FlywayProperties\"><a href=\"#FLYWAY-FlywayProperties\" class=\"headerlink\" title=\"FLYWAY (FlywayProperties)\"></a>FLYWAY (FlywayProperties)</h1><p>flyway.locations=classpath:db/migrations # locations of migrations scripts<br>flyway.schemas= # schemas to update<br>flyway.initVersion= 1 # version to start migration<br>flyway.prefix=V<br>flyway.suffix=.sql<br>flyway.enabled=true<br>flyway.url= # JDBC url if you want Flyway to create its own DataSource<br>flyway.user= # JDBC username if you want Flyway to create its own DataSource<br>flyway.password= # JDBC password if you want Flyway to create its own DataSource</p>\n<h1 id=\"LIQUIBASE-LiquibaseProperties\"><a href=\"#LIQUIBASE-LiquibaseProperties\" class=\"headerlink\" title=\"LIQUIBASE (LiquibaseProperties)\"></a>LIQUIBASE (LiquibaseProperties)</h1><p>liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml<br>liquibase.contexts= # runtime contexts to use<br>liquibase.default-schema= # default database schema to use<br>liquibase.drop-first=false<br>liquibase.enabled=true</p>\n<h1 id=\"JMX\"><a href=\"#JMX\" class=\"headerlink\" title=\"JMX\"></a>JMX</h1><p>spring.jmx.enabled=true # Expose MBeans from Spring</p>\n<h1 id=\"RABBIT-RabbitProperties\"><a href=\"#RABBIT-RabbitProperties\" class=\"headerlink\" title=\"RABBIT (RabbitProperties)\"></a>RABBIT (RabbitProperties)</h1><p>spring.rabbitmq.host= # connection host<br>spring.rabbitmq.port= # connection port<br>spring.rabbitmq.addresses= # connection addresses (e.g. myhost:9999,otherhost:1111)<br>spring.rabbitmq.username= # login user<br>spring.rabbitmq.password= # login password<br>spring.rabbitmq.virtualhost=<br>spring.rabbitmq.dynamic=</p>\n<h1 id=\"REDIS-RedisProperties\"><a href=\"#REDIS-RedisProperties\" class=\"headerlink\" title=\"REDIS (RedisProperties)\"></a>REDIS (RedisProperties)</h1><p>spring.redis.host=localhost # server host<br>spring.redis.password= # server password<br>spring.redis.port=6379 # connection port<br>spring.redis.pool.max-idle=8 # pool settings …<br>spring.redis.pool.min-idle=0<br>spring.redis.pool.max-active=8<br>spring.redis.pool.max-wait=-1</p>\n<h1 id=\"ACTIVEMQ-ActiveMQProperties\"><a href=\"#ACTIVEMQ-ActiveMQProperties\" class=\"headerlink\" title=\"ACTIVEMQ (ActiveMQProperties)\"></a>ACTIVEMQ (ActiveMQProperties)</h1><p>spring.activemq.broker-url=tcp://localhost:61616 # connection URL<br>spring.activemq.user=<br>spring.activemq.password=<br>spring.activemq.in-memory=true # broker kind to create if no broker-url is specified<br>spring.activemq.pooled=false</p>\n<h1 id=\"HornetQ-HornetQProperties\"><a href=\"#HornetQ-HornetQProperties\" class=\"headerlink\" title=\"HornetQ (HornetQProperties)\"></a>HornetQ (HornetQProperties)</h1><p>spring.hornetq.mode= # connection mode (native, embedded)<br>spring.hornetq.host=localhost # hornetQ host (native mode)<br>spring.hornetq.port=5445 # hornetQ port (native mode)<br>spring.hornetq.embedded.enabled=true # if the embedded server is enabled (needs hornetq-jms-server.jar)<br>spring.hornetq.embedded.serverId= # auto-generated id of the embedded server (integer)<br>spring.hornetq.embedded.persistent=false # message persistence<br>spring.hornetq.embedded.data-directory= # location of data content (when persistence is enabled)<br>spring.hornetq.embedded.queues= # comma separate queues to create on startup<br>spring.hornetq.embedded.topics= # comma separate topics to create on startup<br>spring.hornetq.embedded.cluster-password= # customer password (randomly generated by default)</p>\n<h1 id=\"JMS-JmsProperties\"><a href=\"#JMS-JmsProperties\" class=\"headerlink\" title=\"JMS (JmsProperties)\"></a>JMS (JmsProperties)</h1><p>spring.jms.pub-sub-domain= # false for queue (default), true for topic</p>\n<h1 id=\"SPRING-BATCH-BatchDatabaseInitializer\"><a href=\"#SPRING-BATCH-BatchDatabaseInitializer\" class=\"headerlink\" title=\"SPRING BATCH (BatchDatabaseInitializer)\"></a>SPRING BATCH (BatchDatabaseInitializer)</h1><p>spring.batch.job.names=job1,job2<br>spring.batch.job.enabled=true<br>spring.batch.initializer.enabled=true<br>spring.batch.schema= # batch schema to load</p>\n<h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><p>spring.aop.auto=<br>spring.aop.proxy-target-class=</p>\n<h1 id=\"FILE-ENCODING-FileEncodingApplicationListener\"><a href=\"#FILE-ENCODING-FileEncodingApplicationListener\" class=\"headerlink\" title=\"FILE ENCODING (FileEncodingApplicationListener)\"></a>FILE ENCODING (FileEncodingApplicationListener)</h1><p>spring.mandatory-file-encoding=false</p>\n<h1 id=\"SPRING-SOCIAL-SocialWebAutoConfiguration\"><a href=\"#SPRING-SOCIAL-SocialWebAutoConfiguration\" class=\"headerlink\" title=\"SPRING SOCIAL (SocialWebAutoConfiguration)\"></a>SPRING SOCIAL (SocialWebAutoConfiguration)</h1><p>spring.social.auto-connection-views=true # Set to true for default connection views or false if you provide your own</p>\n<h1 id=\"SPRING-SOCIAL-FACEBOOK-FacebookAutoConfiguration\"><a href=\"#SPRING-SOCIAL-FACEBOOK-FacebookAutoConfiguration\" class=\"headerlink\" title=\"SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)\"></a>SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)</h1><p>spring.social.facebook.app-id= # your application’s Facebook App ID<br>spring.social.facebook.app-secret= # your application’s Facebook App Secret</p>\n<h1 id=\"SPRING-SOCIAL-LINKEDIN-LinkedInAutoConfiguration\"><a href=\"#SPRING-SOCIAL-LINKEDIN-LinkedInAutoConfiguration\" class=\"headerlink\" title=\"SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)\"></a>SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)</h1><p>spring.social.linkedin.app-id= # your application’s LinkedIn App ID<br>spring.social.linkedin.app-secret= # your application’s LinkedIn App Secret</p>\n<h1 id=\"SPRING-SOCIAL-TWITTER-TwitterAutoConfiguration\"><a href=\"#SPRING-SOCIAL-TWITTER-TwitterAutoConfiguration\" class=\"headerlink\" title=\"SPRING SOCIAL TWITTER (TwitterAutoConfiguration)\"></a>SPRING SOCIAL TWITTER (TwitterAutoConfiguration)</h1><p>spring.social.twitter.app-id= # your application’s Twitter App ID<br>spring.social.twitter.app-secret= # your application’s Twitter App Secret</p>\n<h1 id=\"SPRING-MOBILE-SITE-PREFERENCE-SitePreferenceAutoConfiguration\"><a href=\"#SPRING-MOBILE-SITE-PREFERENCE-SitePreferenceAutoConfiguration\" class=\"headerlink\" title=\"SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)\"></a>SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)</h1><p>spring.mobile.sitepreference.enabled=true # enabled by default</p>\n<h1 id=\"SPRING-MOBILE-DEVICE-VIEWS-DeviceDelegatingViewResolverAutoConfiguration\"><a href=\"#SPRING-MOBILE-DEVICE-VIEWS-DeviceDelegatingViewResolverAutoConfiguration\" class=\"headerlink\" title=\"SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)\"></a>SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)</h1><p>spring.mobile.devicedelegatingviewresolver.enabled=true # disabled by default<br>spring.mobile.devicedelegatingviewresolver.normalPrefix=<br>spring.mobile.devicedelegatingviewresolver.normalSuffix=<br>spring.mobile.devicedelegatingviewresolver.mobilePrefix=mobile/<br>spring.mobile.devicedelegatingviewresolver.mobileSuffix=<br>spring.mobile.devicedelegatingviewresolver.tabletPrefix=tablet/<br>spring.mobile.devicedelegatingviewresolver.tabletSuffix=</p>\n<hr>\n<p>ACTUATOR PROPERTIES</p>\n<hr>\n<h1 id=\"MANAGEMENT-HTTP-SERVER-ManagementServerProperties\"><a href=\"#MANAGEMENT-HTTP-SERVER-ManagementServerProperties\" class=\"headerlink\" title=\"MANAGEMENT HTTP SERVER (ManagementServerProperties)\"></a>MANAGEMENT HTTP SERVER (ManagementServerProperties)</h1><p>management.port= # defaults to ‘server.port’<br>management.address= # bind to a specific NIC<br>management.contextPath= # default to ‘/‘</p>\n<h1 id=\"ENDPOINTS-AbstractEndpoint-subclasses\"><a href=\"#ENDPOINTS-AbstractEndpoint-subclasses\" class=\"headerlink\" title=\"ENDPOINTS (AbstractEndpoint subclasses)\"></a>ENDPOINTS (AbstractEndpoint subclasses)</h1><p>endpoints.autoconfig.id=autoconfig<br>endpoints.autoconfig.sensitive=true<br>endpoints.autoconfig.enabled=true<br>endpoints.beans.id=beans<br>endpoints.beans.sensitive=true<br>endpoints.beans.enabled=true<br>endpoints.configprops.id=configprops<br>endpoints.configprops.sensitive=true<br>endpoints.configprops.enabled=true<br>endpoints.configprops.keys-to-sanitize=password,secret<br>endpoints.dump.id=dump<br>endpoints.dump.sensitive=true<br>endpoints.dump.enabled=true<br>endpoints.env.id=env<br>endpoints.env.sensitive=true<br>endpoints.env.enabled=true<br>endpoints.health.id=health<br>endpoints.health.sensitive=false<br>endpoints.health.enabled=true<br>endpoints.info.id=info<br>endpoints.info.sensitive=false<br>endpoints.info.enabled=true<br>endpoints.metrics.id=metrics<br>endpoints.metrics.sensitive=true<br>endpoints.metrics.enabled=true<br>endpoints.shutdown.id=shutdown<br>endpoints.shutdown.sensitive=true<br>endpoints.shutdown.enabled=false<br>endpoints.trace.id=trace<br>endpoints.trace.sensitive=true<br>endpoints.trace.enabled=true</p>\n<h1 id=\"MVC-ONLY-ENDPOINTS\"><a href=\"#MVC-ONLY-ENDPOINTS\" class=\"headerlink\" title=\"MVC ONLY ENDPOINTS\"></a>MVC ONLY ENDPOINTS</h1><p>endpoints.jolokia.path=jolokia<br>endpoints.jolokia.sensitive=true<br>endpoints.jolokia.enabled=true # when using Jolokia<br>endpoints.error.path=/error</p>\n<h1 id=\"JMX-ENDPOINT-EndpointMBeanExportProperties\"><a href=\"#JMX-ENDPOINT-EndpointMBeanExportProperties\" class=\"headerlink\" title=\"JMX ENDPOINT (EndpointMBeanExportProperties)\"></a>JMX ENDPOINT (EndpointMBeanExportProperties)</h1><p>endpoints.jmx.enabled=true<br>endpoints.jmx.domain= # the JMX domain, defaults to ‘org.springboot’<br>endpoints.jmx.unique-names=false<br>endpoints.jmx.enabled=true<br>endpoints.jmx.staticNames=</p>\n<h1 id=\"JOLOKIA-JolokiaProperties\"><a href=\"#JOLOKIA-JolokiaProperties\" class=\"headerlink\" title=\"JOLOKIA (JolokiaProperties)\"></a>JOLOKIA (JolokiaProperties)</h1><p>jolokia.config.*= # See Jolokia manual</p>\n<h1 id=\"REMOTE-SHELL\"><a href=\"#REMOTE-SHELL\" class=\"headerlink\" title=\"REMOTE SHELL\"></a>REMOTE SHELL</h1><p>shell.auth=simple # jaas, key, simple, spring<br>shell.command-refresh-interval=-1<br>shell.command-path-pattern= # classpath<em>:/commands/**, classpath</em>:/crash/commands/*<em><br>shell.config-path-patterns= # classpath</em>:/crash/*<br>shell.disabled-plugins=false # don’t expose plugins<br>shell.ssh.enabled= # ssh settings …<br>shell.ssh.keyPath=<br>shell.ssh.port=<br>shell.telnet.enabled= # telnet settings …<br>shell.telnet.port=<br>shell.auth.jaas.domain= # authentication settings …<br>shell.auth.key.path=<br>shell.auth.simple.user.name=<br>shell.auth.simple.user.password=<br>shell.auth.spring.roles=</p>\n<h1 id=\"GIT-INFO\"><a href=\"#GIT-INFO\" class=\"headerlink\" title=\"GIT INFO\"></a>GIT INFO</h1><p>spring.git.properties= # resource ref to generated git info properties file</p>\n"},{"layout":"post","title":"spring cloud","date":"2018-11-19T05:57:54.000Z","_content":"\n# spring cloud\n\n- 分布式/版本化配置\n- 服务注册和发现\n- 选路\n- 服务对服务呼叫\n- 负载平衡\n- 断路器\n- 分布式消息传递\n\n[cloud文档](http://cloud.spring.io/spring-cloud-static/Camden.SR2/)\n\n## spring cloud config\n\n配置管理中心, 通过 `spring.cloud.config.server.git.uri` 来获取git服务上的配置文档,当然也可配置成本地获取.客户端通过HTTP可以获取对应的 配置资源\n\n```properties\n/{application}/{profile}[/{label}]\n/{application}-{profile}.yml\n/{label}/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.properties\n```\n\n### 服务端配置\n\n```yml\nspring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/spring-cloud-samples/config-repo\n```\n\n### 客户端配置\n\n客户端依赖 `SpringCloud-config-Client`这个jar, 如果你直接引入了 `spring-cloud-starter-config` 则不需要额外添加 `jar`\n\n`bootstrap.properties`\n\n```properties\n# 指向服务端的配置中心\nspring.cloud.config.uri: http://myconfigserver.com\n```","source":"_posts/springboot/spring-cloud.md","raw":"---\nlayout: post\ntitle: spring cloud\ndate: 2018-11-19 13:57:54\ntags: \n    - java\n    - springcloud\ncategories: springboot\n---\n\n# spring cloud\n\n- 分布式/版本化配置\n- 服务注册和发现\n- 选路\n- 服务对服务呼叫\n- 负载平衡\n- 断路器\n- 分布式消息传递\n\n[cloud文档](http://cloud.spring.io/spring-cloud-static/Camden.SR2/)\n\n## spring cloud config\n\n配置管理中心, 通过 `spring.cloud.config.server.git.uri` 来获取git服务上的配置文档,当然也可配置成本地获取.客户端通过HTTP可以获取对应的 配置资源\n\n```properties\n/{application}/{profile}[/{label}]\n/{application}-{profile}.yml\n/{label}/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.properties\n```\n\n### 服务端配置\n\n```yml\nspring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/spring-cloud-samples/config-repo\n```\n\n### 客户端配置\n\n客户端依赖 `SpringCloud-config-Client`这个jar, 如果你直接引入了 `spring-cloud-starter-config` 则不需要额外添加 `jar`\n\n`bootstrap.properties`\n\n```properties\n# 指向服务端的配置中心\nspring.cloud.config.uri: http://myconfigserver.com\n```","slug":"springboot/spring-cloud","published":1,"updated":"2018-11-19T06:16:00.017Z","comments":1,"photos":[],"link":"","_id":"cjonx65t8001ci8usg3fmj458","content":"<h1 id=\"spring-cloud\"><a href=\"#spring-cloud\" class=\"headerlink\" title=\"spring cloud\"></a>spring cloud</h1><ul>\n<li>分布式/版本化配置</li>\n<li>服务注册和发现</li>\n<li>选路</li>\n<li>服务对服务呼叫</li>\n<li>负载平衡</li>\n<li>断路器</li>\n<li>分布式消息传递</li>\n</ul>\n<p><a href=\"http://cloud.spring.io/spring-cloud-static/Camden.SR2/\" target=\"_blank\" rel=\"noopener\">cloud文档</a></p>\n<h2 id=\"spring-cloud-config\"><a href=\"#spring-cloud-config\" class=\"headerlink\" title=\"spring cloud config\"></a>spring cloud config</h2><p>配置管理中心, 通过 <code>spring.cloud.config.server.git.uri</code> 来获取git服务上的配置文档,当然也可配置成本地获取.客户端通过HTTP可以获取对应的 配置资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class=\"line\">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class=\"line\">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class=\"line\">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class=\"line\">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      server:</span></span><br><span class=\"line\"><span class=\"attr\">        git:</span></span><br><span class=\"line\"><span class=\"attr\">          uri:</span> <span class=\"attr\">https://github.com/spring-cloud-samples/config-repo</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h3><p>客户端依赖 <code>SpringCloud-config-Client</code>这个jar, 如果你直接引入了 <code>spring-cloud-starter-config</code> 则不需要额外添加 <code>jar</code></p>\n<p><code>bootstrap.properties</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 指向服务端的配置中心</span><br><span class=\"line\">spring.cloud.config.uri: http://myconfigserver.com</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"spring-cloud\"><a href=\"#spring-cloud\" class=\"headerlink\" title=\"spring cloud\"></a>spring cloud</h1><ul>\n<li>分布式/版本化配置</li>\n<li>服务注册和发现</li>\n<li>选路</li>\n<li>服务对服务呼叫</li>\n<li>负载平衡</li>\n<li>断路器</li>\n<li>分布式消息传递</li>\n</ul>\n<p><a href=\"http://cloud.spring.io/spring-cloud-static/Camden.SR2/\" target=\"_blank\" rel=\"noopener\">cloud文档</a></p>\n<h2 id=\"spring-cloud-config\"><a href=\"#spring-cloud-config\" class=\"headerlink\" title=\"spring cloud config\"></a>spring cloud config</h2><p>配置管理中心, 通过 <code>spring.cloud.config.server.git.uri</code> 来获取git服务上的配置文档,当然也可配置成本地获取.客户端通过HTTP可以获取对应的 配置资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class=\"line\">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class=\"line\">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class=\"line\">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class=\"line\">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      server:</span></span><br><span class=\"line\"><span class=\"attr\">        git:</span></span><br><span class=\"line\"><span class=\"attr\">          uri:</span> <span class=\"attr\">https://github.com/spring-cloud-samples/config-repo</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h3><p>客户端依赖 <code>SpringCloud-config-Client</code>这个jar, 如果你直接引入了 <code>spring-cloud-starter-config</code> 则不需要额外添加 <code>jar</code></p>\n<p><code>bootstrap.properties</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 指向服务端的配置中心</span><br><span class=\"line\">spring.cloud.config.uri: http://myconfigserver.com</span><br></pre></td></tr></table></figure>"},{"title":"上传 Docker Image","date":"2017-11-20T11:13:57.000Z","type":"post","_content":"\n# 上传 Docker Image\n\n>再传之前我们需要建立在自己的私有仓库，不然就上传到docker仓库中心了\n\n## 自己server服务器地址\n\nmyServer = localhost   下文中`localhost``替换成自己的服务器地址即可\n\n## 建立自己的docker仓库\n\n> 这里我用的是 Nexus3,8001端口是提供给image上传下载用的\n\n```bash\n docker run -d -p 8000:8081 -p 8001:8001 sonatype/nexus3\n```\n\n> 默认的仓库会将 资源放在 /var/lib/docker/,随着容器的删除数据也会消失，需要挂载，具体看镜像介绍\n\n```http\nhttps://hub.docker.com/r/sonatype/nexus3/\n```\n\n### 登陆 8000 端口后，进入设置，建立自己的 docker仓库。\n\nRepository -> repositories -> Create repository -> docker(hosted)\n> name 随便， HTTP或者HTTPS，根具需求填写，我这里勾选HTTP，端口协商8001，与上面暴露出来的端口保持一致，直接save就行了\n\n### 创建一个Dockerfile.用官网的demo\n\n创建一个空目录。将目录（cd）更改到新目录中，创建一个文件 Dockerfile(dockerfile编写可参考官方文档)\n\n```dockerfile\n# Use an official Python runtime as a parent image\nFROM python:2.7-slim\n# Set the working directory to /app\nWORKDIR /app\n# Copy the current directory contents into the container at /app\nADD . /app\n# Install any needed packages specified in requirements.txt\nRUN pip install -r requirements.txt\n# Make port 80 available to the world outside this container\nEXPOSE 80\n# Define environment variable\nENV NAME World\n# Run app.py when the container launches\nCMD [\"python\", \"app.py\"]\n```\n\n创建应用体（dockerfile中提及的两个文件）requirements.txt和app.py，并把它们与同一文件夹中Dockerfile。\n\n### 创建requirements.txt\n\n```code\nFlask\nRedis\n```\n\n### 创建app.py\n\n```python\nfrom flask import Flask\nfrom redis import Redis, RedisError\nimport os\nimport socket\n\n# Connect to Redis\nredis = Redis(host=\"redis\", db=0, socket_connect_timeout=2, socket_timeout=2)\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    try:\n        visits = redis.incr(\"counter\")\n    except RedisError:\n        visits = \"<i>cannot connect to Redis, counter disabled</i>\"\n\n    html = \"<h3>Hello {name}!</h3>\" \\\n           \"<b>Hostname:</b> {hostname}<br/>\" \\\n           \"<b>Visits:</b> {visits}\"\n    return html.format(name=os.getenv(\"NAME\", \"world\"), hostname=socket.gethostname(), visits=visits)\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=80)\n```\n\n## 构建image\n\n```bash\ndocker build -t friendlyhello .\n```\n\n> -t 为你镜像打repository，默认tag为latest(friendlyhello:latest), . 表示存储位置的路径，具体的可以看  docker build --help. 通过 `docker images` 就可以看到刚刚的镜像了\n\n## 登陆自己的仓库\n\n```bash\ndokcer login -u ${name} -p ${passwd} ${server地址}\n我的是\ndocker login -u admin -p admin123 ${myServer}:8001\neg: docker login -u admin -p admin123 localhost:8001\n```\n\n如果登陆失败，则你需要将你得server地址加入 daemon 文档（即配置镜像加速的位置）， (vi /etc/docker/daemon.json)，比如 docker for windows, 右键右下角docker，选择settting->daemon -> Insercure registries 配置上你服务器的地址加端口即可。（Registry mirrors 就是你配置镜像加速的位置了）\n\n## make tag\n\n给镜像打上tag， docker tag --help 可查看详细用法\n\n```bash\n格式 : docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]   docker tag image username/repository:tag\ndocker tag friendlyhello:latest localhost:8001/test:1.2\ndocker push localhost:8001/test:1.2\n```\n\n至此，登录你的nexus3,在docker仓库就可以看见一个名字为 test,版本为1.2的镜像了\n\n## 检查\n\n执行 `docker search localhost/test:1.2` 看是否存在\n删除本地已经存在的镜像 `docker rmi localhost/test:1.2`\n执行 `docker run -d -p 8888:80 localhost/test:1.2`, 可观察到下载的状况\n浏览器 访问 8888端口","source":"_posts/docker/上传image.md","raw":"---\ntitle: 上传 Docker Image\ndate: 2017-11-20 19:13:57\ntype: post\ntags: \n    - docker\n    - 入门\ncategories: docker\n---\n\n# 上传 Docker Image\n\n>再传之前我们需要建立在自己的私有仓库，不然就上传到docker仓库中心了\n\n## 自己server服务器地址\n\nmyServer = localhost   下文中`localhost``替换成自己的服务器地址即可\n\n## 建立自己的docker仓库\n\n> 这里我用的是 Nexus3,8001端口是提供给image上传下载用的\n\n```bash\n docker run -d -p 8000:8081 -p 8001:8001 sonatype/nexus3\n```\n\n> 默认的仓库会将 资源放在 /var/lib/docker/,随着容器的删除数据也会消失，需要挂载，具体看镜像介绍\n\n```http\nhttps://hub.docker.com/r/sonatype/nexus3/\n```\n\n### 登陆 8000 端口后，进入设置，建立自己的 docker仓库。\n\nRepository -> repositories -> Create repository -> docker(hosted)\n> name 随便， HTTP或者HTTPS，根具需求填写，我这里勾选HTTP，端口协商8001，与上面暴露出来的端口保持一致，直接save就行了\n\n### 创建一个Dockerfile.用官网的demo\n\n创建一个空目录。将目录（cd）更改到新目录中，创建一个文件 Dockerfile(dockerfile编写可参考官方文档)\n\n```dockerfile\n# Use an official Python runtime as a parent image\nFROM python:2.7-slim\n# Set the working directory to /app\nWORKDIR /app\n# Copy the current directory contents into the container at /app\nADD . /app\n# Install any needed packages specified in requirements.txt\nRUN pip install -r requirements.txt\n# Make port 80 available to the world outside this container\nEXPOSE 80\n# Define environment variable\nENV NAME World\n# Run app.py when the container launches\nCMD [\"python\", \"app.py\"]\n```\n\n创建应用体（dockerfile中提及的两个文件）requirements.txt和app.py，并把它们与同一文件夹中Dockerfile。\n\n### 创建requirements.txt\n\n```code\nFlask\nRedis\n```\n\n### 创建app.py\n\n```python\nfrom flask import Flask\nfrom redis import Redis, RedisError\nimport os\nimport socket\n\n# Connect to Redis\nredis = Redis(host=\"redis\", db=0, socket_connect_timeout=2, socket_timeout=2)\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    try:\n        visits = redis.incr(\"counter\")\n    except RedisError:\n        visits = \"<i>cannot connect to Redis, counter disabled</i>\"\n\n    html = \"<h3>Hello {name}!</h3>\" \\\n           \"<b>Hostname:</b> {hostname}<br/>\" \\\n           \"<b>Visits:</b> {visits}\"\n    return html.format(name=os.getenv(\"NAME\", \"world\"), hostname=socket.gethostname(), visits=visits)\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=80)\n```\n\n## 构建image\n\n```bash\ndocker build -t friendlyhello .\n```\n\n> -t 为你镜像打repository，默认tag为latest(friendlyhello:latest), . 表示存储位置的路径，具体的可以看  docker build --help. 通过 `docker images` 就可以看到刚刚的镜像了\n\n## 登陆自己的仓库\n\n```bash\ndokcer login -u ${name} -p ${passwd} ${server地址}\n我的是\ndocker login -u admin -p admin123 ${myServer}:8001\neg: docker login -u admin -p admin123 localhost:8001\n```\n\n如果登陆失败，则你需要将你得server地址加入 daemon 文档（即配置镜像加速的位置）， (vi /etc/docker/daemon.json)，比如 docker for windows, 右键右下角docker，选择settting->daemon -> Insercure registries 配置上你服务器的地址加端口即可。（Registry mirrors 就是你配置镜像加速的位置了）\n\n## make tag\n\n给镜像打上tag， docker tag --help 可查看详细用法\n\n```bash\n格式 : docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]   docker tag image username/repository:tag\ndocker tag friendlyhello:latest localhost:8001/test:1.2\ndocker push localhost:8001/test:1.2\n```\n\n至此，登录你的nexus3,在docker仓库就可以看见一个名字为 test,版本为1.2的镜像了\n\n## 检查\n\n执行 `docker search localhost/test:1.2` 看是否存在\n删除本地已经存在的镜像 `docker rmi localhost/test:1.2`\n执行 `docker run -d -p 8888:80 localhost/test:1.2`, 可观察到下载的状况\n浏览器 访问 8888端口","slug":"docker/上传image","published":1,"updated":"2018-11-16T02:52:44.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonx65t8001gi8uss0zi0ue3","content":"<h1 id=\"上传-Docker-Image\"><a href=\"#上传-Docker-Image\" class=\"headerlink\" title=\"上传 Docker Image\"></a>上传 Docker Image</h1><blockquote>\n<p>再传之前我们需要建立在自己的私有仓库，不然就上传到docker仓库中心了</p>\n</blockquote>\n<h2 id=\"自己server服务器地址\"><a href=\"#自己server服务器地址\" class=\"headerlink\" title=\"自己server服务器地址\"></a>自己server服务器地址</h2><p>myServer = localhost   下文中<code>localhost`</code>替换成自己的服务器地址即可</p>\n<h2 id=\"建立自己的docker仓库\"><a href=\"#建立自己的docker仓库\" class=\"headerlink\" title=\"建立自己的docker仓库\"></a>建立自己的docker仓库</h2><blockquote>\n<p>这里我用的是 Nexus3,8001端口是提供给image上传下载用的</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8000:8081 -p 8001:8001 sonatype/nexus3</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认的仓库会将 资源放在 /var/lib/docker/,随着容器的删除数据也会消失，需要挂载，具体看镜像介绍</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">https://hub.docker.com/r/sonatype/nexus3/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"登陆-8000-端口后，进入设置，建立自己的-docker仓库。\"><a href=\"#登陆-8000-端口后，进入设置，建立自己的-docker仓库。\" class=\"headerlink\" title=\"登陆 8000 端口后，进入设置，建立自己的 docker仓库。\"></a>登陆 8000 端口后，进入设置，建立自己的 docker仓库。</h3><p>Repository -&gt; repositories -&gt; Create repository -&gt; docker(hosted)</p>\n<blockquote>\n<p>name 随便， HTTP或者HTTPS，根具需求填写，我这里勾选HTTP，端口协商8001，与上面暴露出来的端口保持一致，直接save就行了</p>\n</blockquote>\n<h3 id=\"创建一个Dockerfile-用官网的demo\"><a href=\"#创建一个Dockerfile-用官网的demo\" class=\"headerlink\" title=\"创建一个Dockerfile.用官网的demo\"></a>创建一个Dockerfile.用官网的demo</h3><p>创建一个空目录。将目录（cd）更改到新目录中，创建一个文件 Dockerfile(dockerfile编写可参考官方文档)</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use an official Python runtime as a parent image</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">2.7</span>-slim</span><br><span class=\"line\"><span class=\"comment\"># Set the working directory to /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Copy the current directory contents into the container at /app</span></span></span><br><span class=\"line\"><span class=\"bash\">ADD . /app</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Install any needed packages specified in requirements.txt</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN pip install -r requirements.txt</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Make port 80 available to the world outside this container</span></span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 80</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Define environment variable</span></span></span><br><span class=\"line\"><span class=\"bash\">ENV NAME World</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Run app.py when the container launches</span></span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>创建应用体（dockerfile中提及的两个文件）requirements.txt和app.py，并把它们与同一文件夹中Dockerfile。</p>\n<h3 id=\"创建requirements-txt\"><a href=\"#创建requirements-txt\" class=\"headerlink\" title=\"创建requirements.txt\"></a>创建requirements.txt</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flask</span><br><span class=\"line\">Redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建app-py\"><a href=\"#创建app-py\" class=\"headerlink\" title=\"创建app.py\"></a>创建app.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis, RedisError</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Connect to Redis</span></span><br><span class=\"line\">redis = Redis(host=<span class=\"string\">\"redis\"</span>, db=<span class=\"number\">0</span>, socket_connect_timeout=<span class=\"number\">2</span>, socket_timeout=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        visits = redis.incr(<span class=\"string\">\"counter\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> RedisError:</span><br><span class=\"line\">        visits = <span class=\"string\">\"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    html = <span class=\"string\">\"&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;\"</span> \\</span><br><span class=\"line\">           <span class=\"string\">\"&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;\"</span> \\</span><br><span class=\"line\">           <span class=\"string\">\"&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> html.format(name=os.getenv(<span class=\"string\">\"NAME\"</span>, <span class=\"string\">\"world\"</span>), hostname=socket.gethostname(), visits=visits)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>, port=<span class=\"number\">80</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建image\"><a href=\"#构建image\" class=\"headerlink\" title=\"构建image\"></a>构建image</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t friendlyhello .</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-t 为你镜像打repository，默认tag为latest(friendlyhello:latest), . 表示存储位置的路径，具体的可以看  docker build –help. 通过 <code>docker images</code> 就可以看到刚刚的镜像了</p>\n</blockquote>\n<h2 id=\"登陆自己的仓库\"><a href=\"#登陆自己的仓库\" class=\"headerlink\" title=\"登陆自己的仓库\"></a>登陆自己的仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer login -u <span class=\"variable\">$&#123;name&#125;</span> -p <span class=\"variable\">$&#123;passwd&#125;</span> <span class=\"variable\">$&#123;server地址&#125;</span></span><br><span class=\"line\">我的是</span><br><span class=\"line\">docker login -u admin -p admin123 <span class=\"variable\">$&#123;myServer&#125;</span>:8001</span><br><span class=\"line\">eg: docker login -u admin -p admin123 localhost:8001</span><br></pre></td></tr></table></figure>\n<p>如果登陆失败，则你需要将你得server地址加入 daemon 文档（即配置镜像加速的位置）， (vi /etc/docker/daemon.json)，比如 docker for windows, 右键右下角docker，选择settting-&gt;daemon -&gt; Insercure registries 配置上你服务器的地址加端口即可。（Registry mirrors 就是你配置镜像加速的位置了）</p>\n<h2 id=\"make-tag\"><a href=\"#make-tag\" class=\"headerlink\" title=\"make tag\"></a>make tag</h2><p>给镜像打上tag， docker tag –help 可查看详细用法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 : docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]   docker tag image username/repository:tag</span><br><span class=\"line\">docker tag friendlyhello:latest localhost:8001/<span class=\"built_in\">test</span>:1.2</span><br><span class=\"line\">docker push localhost:8001/<span class=\"built_in\">test</span>:1.2</span><br></pre></td></tr></table></figure>\n<p>至此，登录你的nexus3,在docker仓库就可以看见一个名字为 test,版本为1.2的镜像了</p>\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>执行 <code>docker search localhost/test:1.2</code> 看是否存在<br>删除本地已经存在的镜像 <code>docker rmi localhost/test:1.2</code><br>执行 <code>docker run -d -p 8888:80 localhost/test:1.2</code>, 可观察到下载的状况<br>浏览器 访问 8888端口</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"上传-Docker-Image\"><a href=\"#上传-Docker-Image\" class=\"headerlink\" title=\"上传 Docker Image\"></a>上传 Docker Image</h1><blockquote>\n<p>再传之前我们需要建立在自己的私有仓库，不然就上传到docker仓库中心了</p>\n</blockquote>\n<h2 id=\"自己server服务器地址\"><a href=\"#自己server服务器地址\" class=\"headerlink\" title=\"自己server服务器地址\"></a>自己server服务器地址</h2><p>myServer = localhost   下文中<code>localhost`</code>替换成自己的服务器地址即可</p>\n<h2 id=\"建立自己的docker仓库\"><a href=\"#建立自己的docker仓库\" class=\"headerlink\" title=\"建立自己的docker仓库\"></a>建立自己的docker仓库</h2><blockquote>\n<p>这里我用的是 Nexus3,8001端口是提供给image上传下载用的</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8000:8081 -p 8001:8001 sonatype/nexus3</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认的仓库会将 资源放在 /var/lib/docker/,随着容器的删除数据也会消失，需要挂载，具体看镜像介绍</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">https://hub.docker.com/r/sonatype/nexus3/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"登陆-8000-端口后，进入设置，建立自己的-docker仓库。\"><a href=\"#登陆-8000-端口后，进入设置，建立自己的-docker仓库。\" class=\"headerlink\" title=\"登陆 8000 端口后，进入设置，建立自己的 docker仓库。\"></a>登陆 8000 端口后，进入设置，建立自己的 docker仓库。</h3><p>Repository -&gt; repositories -&gt; Create repository -&gt; docker(hosted)</p>\n<blockquote>\n<p>name 随便， HTTP或者HTTPS，根具需求填写，我这里勾选HTTP，端口协商8001，与上面暴露出来的端口保持一致，直接save就行了</p>\n</blockquote>\n<h3 id=\"创建一个Dockerfile-用官网的demo\"><a href=\"#创建一个Dockerfile-用官网的demo\" class=\"headerlink\" title=\"创建一个Dockerfile.用官网的demo\"></a>创建一个Dockerfile.用官网的demo</h3><p>创建一个空目录。将目录（cd）更改到新目录中，创建一个文件 Dockerfile(dockerfile编写可参考官方文档)</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use an official Python runtime as a parent image</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">2.7</span>-slim</span><br><span class=\"line\"><span class=\"comment\"># Set the working directory to /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Copy the current directory contents into the container at /app</span></span></span><br><span class=\"line\"><span class=\"bash\">ADD . /app</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Install any needed packages specified in requirements.txt</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN pip install -r requirements.txt</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Make port 80 available to the world outside this container</span></span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 80</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Define environment variable</span></span></span><br><span class=\"line\"><span class=\"bash\">ENV NAME World</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Run app.py when the container launches</span></span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>创建应用体（dockerfile中提及的两个文件）requirements.txt和app.py，并把它们与同一文件夹中Dockerfile。</p>\n<h3 id=\"创建requirements-txt\"><a href=\"#创建requirements-txt\" class=\"headerlink\" title=\"创建requirements.txt\"></a>创建requirements.txt</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flask</span><br><span class=\"line\">Redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建app-py\"><a href=\"#创建app-py\" class=\"headerlink\" title=\"创建app.py\"></a>创建app.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis, RedisError</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Connect to Redis</span></span><br><span class=\"line\">redis = Redis(host=<span class=\"string\">\"redis\"</span>, db=<span class=\"number\">0</span>, socket_connect_timeout=<span class=\"number\">2</span>, socket_timeout=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        visits = redis.incr(<span class=\"string\">\"counter\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> RedisError:</span><br><span class=\"line\">        visits = <span class=\"string\">\"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    html = <span class=\"string\">\"&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;\"</span> \\</span><br><span class=\"line\">           <span class=\"string\">\"&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;\"</span> \\</span><br><span class=\"line\">           <span class=\"string\">\"&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> html.format(name=os.getenv(<span class=\"string\">\"NAME\"</span>, <span class=\"string\">\"world\"</span>), hostname=socket.gethostname(), visits=visits)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>, port=<span class=\"number\">80</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建image\"><a href=\"#构建image\" class=\"headerlink\" title=\"构建image\"></a>构建image</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t friendlyhello .</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-t 为你镜像打repository，默认tag为latest(friendlyhello:latest), . 表示存储位置的路径，具体的可以看  docker build –help. 通过 <code>docker images</code> 就可以看到刚刚的镜像了</p>\n</blockquote>\n<h2 id=\"登陆自己的仓库\"><a href=\"#登陆自己的仓库\" class=\"headerlink\" title=\"登陆自己的仓库\"></a>登陆自己的仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer login -u <span class=\"variable\">$&#123;name&#125;</span> -p <span class=\"variable\">$&#123;passwd&#125;</span> <span class=\"variable\">$&#123;server地址&#125;</span></span><br><span class=\"line\">我的是</span><br><span class=\"line\">docker login -u admin -p admin123 <span class=\"variable\">$&#123;myServer&#125;</span>:8001</span><br><span class=\"line\">eg: docker login -u admin -p admin123 localhost:8001</span><br></pre></td></tr></table></figure>\n<p>如果登陆失败，则你需要将你得server地址加入 daemon 文档（即配置镜像加速的位置）， (vi /etc/docker/daemon.json)，比如 docker for windows, 右键右下角docker，选择settting-&gt;daemon -&gt; Insercure registries 配置上你服务器的地址加端口即可。（Registry mirrors 就是你配置镜像加速的位置了）</p>\n<h2 id=\"make-tag\"><a href=\"#make-tag\" class=\"headerlink\" title=\"make tag\"></a>make tag</h2><p>给镜像打上tag， docker tag –help 可查看详细用法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 : docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]   docker tag image username/repository:tag</span><br><span class=\"line\">docker tag friendlyhello:latest localhost:8001/<span class=\"built_in\">test</span>:1.2</span><br><span class=\"line\">docker push localhost:8001/<span class=\"built_in\">test</span>:1.2</span><br></pre></td></tr></table></figure>\n<p>至此，登录你的nexus3,在docker仓库就可以看见一个名字为 test,版本为1.2的镜像了</p>\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>执行 <code>docker search localhost/test:1.2</code> 看是否存在<br>删除本地已经存在的镜像 <code>docker rmi localhost/test:1.2</code><br>执行 <code>docker run -d -p 8888:80 localhost/test:1.2</code>, 可观察到下载的状况<br>浏览器 访问 8888端口</p>\n"},{"layout":"post","title":"spring-cloud-gateway","date":"2018-11-19T05:57:54.000Z","_content":"\n# spring-cloud-gateway\n\n- Route\n- Predicate\n- Filter\n\n## How it Works\n\n![1537155739056](spring-cloud-gateway/1537155739056.png)\n\n客户端向SpringCloudGateway提出请求。如果Gateway Handler映射确定请求与路由匹配，则将其发送到Gateway Web Handler。此处理程序通过特定于请求的筛选链发送请求。过滤器被虚线除以的原因是，过滤器可以在发送代理请求之前或之后执行逻辑。执行所有“预”筛选逻辑，然后发出代理请求。在发出代理请求后，执行“POST”筛选逻辑。","source":"_posts/springboot/spring-cloud-gateway.md","raw":"---\nlayout: post\ntitle: spring-cloud-gateway\ndate: 2018-11-19 13:57:54\ntags: \n    - java\n    - springcloud\ncategories: springboot\n---\n\n# spring-cloud-gateway\n\n- Route\n- Predicate\n- Filter\n\n## How it Works\n\n![1537155739056](spring-cloud-gateway/1537155739056.png)\n\n客户端向SpringCloudGateway提出请求。如果Gateway Handler映射确定请求与路由匹配，则将其发送到Gateway Web Handler。此处理程序通过特定于请求的筛选链发送请求。过滤器被虚线除以的原因是，过滤器可以在发送代理请求之前或之后执行逻辑。执行所有“预”筛选逻辑，然后发出代理请求。在发出代理请求后，执行“POST”筛选逻辑。","slug":"springboot/spring-cloud-gateway","published":1,"updated":"2018-11-19T06:17:54.489Z","comments":1,"photos":[],"link":"","_id":"cjonx65t8001ki8ussf6zv3n3","content":"<h1 id=\"spring-cloud-gateway\"><a href=\"#spring-cloud-gateway\" class=\"headerlink\" title=\"spring-cloud-gateway\"></a>spring-cloud-gateway</h1><ul>\n<li>Route</li>\n<li>Predicate</li>\n<li>Filter</li>\n</ul>\n<h2 id=\"How-it-Works\"><a href=\"#How-it-Works\" class=\"headerlink\" title=\"How it Works\"></a>How it Works</h2><p><img src=\"/2018/11/19/springboot/spring-cloud-gateway/1537155739056.png\" alt=\"1537155739056\"></p>\n<p>客户端向SpringCloudGateway提出请求。如果Gateway Handler映射确定请求与路由匹配，则将其发送到Gateway Web Handler。此处理程序通过特定于请求的筛选链发送请求。过滤器被虚线除以的原因是，过滤器可以在发送代理请求之前或之后执行逻辑。执行所有“预”筛选逻辑，然后发出代理请求。在发出代理请求后，执行“POST”筛选逻辑。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"spring-cloud-gateway\"><a href=\"#spring-cloud-gateway\" class=\"headerlink\" title=\"spring-cloud-gateway\"></a>spring-cloud-gateway</h1><ul>\n<li>Route</li>\n<li>Predicate</li>\n<li>Filter</li>\n</ul>\n<h2 id=\"How-it-Works\"><a href=\"#How-it-Works\" class=\"headerlink\" title=\"How it Works\"></a>How it Works</h2><p><img src=\"/2018/11/19/springboot/spring-cloud-gateway/1537155739056.png\" alt=\"1537155739056\"></p>\n<p>客户端向SpringCloudGateway提出请求。如果Gateway Handler映射确定请求与路由匹配，则将其发送到Gateway Web Handler。此处理程序通过特定于请求的筛选链发送请求。过滤器被虚线除以的原因是，过滤器可以在发送代理请求之前或之后执行逻辑。执行所有“预”筛选逻辑，然后发出代理请求。在发出代理请求后，执行“POST”筛选逻辑。</p>\n"},{"layout":"post","title":"spring-session","date":"2018-11-19T05:57:54.000Z","_content":"\n# spring-session\n\nSpring Session提供了用于管理用户会话信息的API和实现。\n\n## 特征\n\n`spring session` 使得支持集群会话变得很容易,而不依赖任何特定的应用程序容器,并且还提供以下信息\n\n* `HttpSession` - 允许应用程序容器(Tomcat) 中的 `HttpSession`, 在`RESTFUL`模式中`SpringSession`允许在标头中提供`SessionId`\n* `WebSocket` - 提供在接收`WebSocket`消息时保持`HttpSession`活动的能力\n* `WebSession` - 允许以与应用程序容器无关的方式替换`SpringWebFlux`的`WebSession`\n\n## 结构\n\n* `springSession core` -  提供`springSession`功能的核心API\n* `springSession Data Redis` -  提供由`Redis`和配置支持的`SessionRepository`和`ReactiveSessionRepository` - 实现\n* `SpringSession JDBC` -  提供由`关系数据库`和配置支持的 `SessionRepository`实现\n* `Spring Session Hazelcast` -   提供由`Hazelcast`和配置支持的 `SessionRepository`实现\n\n### Spring Session\n\n`Spring Session` 中透明的继承了`HttpSession`, 我们可以简单粗暴的使用 `SpringSession`替换我们传统的`HttpSession`.\n\n### SpringSession优势\n\n* 方便做集群会话,儿不限制使用特定的应用容器\n* `SpringSession` 支持在单个浏览器实例中管理多个用户会话\n* 在`RESTFUL`模式中`SpringSession`允许在标头中提供`SessionId`\n\n### SpringSession继承\n\n* redis\n* Pivotal Gemfire\n* JDBC\n* Mongo\n* Hazelcast\n\n#### HttpSession with Redis\n\n这是一个简单的案例,具体配置可以参考官网, 一下是一个spring的配置类,主要做了两件事\n\n```java\n@EnableRedisHttpSession \npublic class Config {\n\n        @Bean\n        public LettuceConnectionFactory connectionFactory() {\n                return new LettuceConnectionFactory(); \n        }\n}\n```\n\n1. `@EnableRedisHttpSession` 创建一个名为`springSessionRepositoryFilter`的过滤器,负责替换`HttpSession`变为`SpringSession`的实现,并且启动`Redis`对 `session`管理的支持\n2. 创建`RedisConnectionFactory`,它负责将`SpringSession`连接到 `Redis Server`, 此时的配置采用的默认配置, 即`localhost:6379`. \n> `spring data redis` 默认支持 `Lettuce` and `Jedis`等 `Redis`连接工具\n\n### HttpSession 是如何工作得\n\n#### SessionRepositoryRequestWrapper\n\n我们知道,我们在操作的`HttpSession`和`HttpServletRequest`是两个接口,也正是因为这样,出现了 `SessionRepositoryRequestWrapper`对象,它继承于`HttpServletRequestWrapper`, 并重写了 `getSession`方法\n\n```java\npublic class SessionRepositoryRequestWrapper extends HttpServletRequestWrapper {\n\n        public SessionRepositoryRequestWrapper(HttpServletRequest original) {\n                super(original);\n        }\n\n        public HttpSession getSession() {\n                return getSession(true);\n        }\n\n        public HttpSession getSession(boolean createNew) {\n                // create an HttpSession implementation from Spring Session\n        }\n\n        // ... other methods delegate to the original HttpServletRequest ...\n}\n```\n\n返回`HttpSession`都被覆盖了。所有其他方法都由`HttpServletRequestWrapper`并简单地将其委托给原来的`HttpServletRequest`执行。\n\n#### SessionRepositoryFilter\n\n下面是部分的伪代码\n\n```java\npublic class SessionRepositoryFilter implements Filter {\n\n        public doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {\n                HttpServletRequest httpRequest = (HttpServletRequest) request;\n                SessionRepositoryRequestWrapper customRequest =\n                        new SessionRepositoryRequestWrapper(httpRequest);\n\n                chain.doFilter(customRequest, response, chain);\n        }\n\n        // ...\n}\n```\n\n通过`SessionRepositoryFilter`过滤器,在这里去替换 `HttpServletRequest` 为 `SessionRepositoryRequestWrapper`,注意的是, `Spring Session`的过滤器`SessionRepositoryFilter`必须放在与`HttpSession` 交互的任何东西前面.","source":"_posts/springboot/spring-session.md","raw":"---\nlayout: post\ntitle: spring-session\ndate: 2018-11-19 13:57:54\ntags: \n    - java\n    - spring\ncategories: springboot\n---\n\n# spring-session\n\nSpring Session提供了用于管理用户会话信息的API和实现。\n\n## 特征\n\n`spring session` 使得支持集群会话变得很容易,而不依赖任何特定的应用程序容器,并且还提供以下信息\n\n* `HttpSession` - 允许应用程序容器(Tomcat) 中的 `HttpSession`, 在`RESTFUL`模式中`SpringSession`允许在标头中提供`SessionId`\n* `WebSocket` - 提供在接收`WebSocket`消息时保持`HttpSession`活动的能力\n* `WebSession` - 允许以与应用程序容器无关的方式替换`SpringWebFlux`的`WebSession`\n\n## 结构\n\n* `springSession core` -  提供`springSession`功能的核心API\n* `springSession Data Redis` -  提供由`Redis`和配置支持的`SessionRepository`和`ReactiveSessionRepository` - 实现\n* `SpringSession JDBC` -  提供由`关系数据库`和配置支持的 `SessionRepository`实现\n* `Spring Session Hazelcast` -   提供由`Hazelcast`和配置支持的 `SessionRepository`实现\n\n### Spring Session\n\n`Spring Session` 中透明的继承了`HttpSession`, 我们可以简单粗暴的使用 `SpringSession`替换我们传统的`HttpSession`.\n\n### SpringSession优势\n\n* 方便做集群会话,儿不限制使用特定的应用容器\n* `SpringSession` 支持在单个浏览器实例中管理多个用户会话\n* 在`RESTFUL`模式中`SpringSession`允许在标头中提供`SessionId`\n\n### SpringSession继承\n\n* redis\n* Pivotal Gemfire\n* JDBC\n* Mongo\n* Hazelcast\n\n#### HttpSession with Redis\n\n这是一个简单的案例,具体配置可以参考官网, 一下是一个spring的配置类,主要做了两件事\n\n```java\n@EnableRedisHttpSession \npublic class Config {\n\n        @Bean\n        public LettuceConnectionFactory connectionFactory() {\n                return new LettuceConnectionFactory(); \n        }\n}\n```\n\n1. `@EnableRedisHttpSession` 创建一个名为`springSessionRepositoryFilter`的过滤器,负责替换`HttpSession`变为`SpringSession`的实现,并且启动`Redis`对 `session`管理的支持\n2. 创建`RedisConnectionFactory`,它负责将`SpringSession`连接到 `Redis Server`, 此时的配置采用的默认配置, 即`localhost:6379`. \n> `spring data redis` 默认支持 `Lettuce` and `Jedis`等 `Redis`连接工具\n\n### HttpSession 是如何工作得\n\n#### SessionRepositoryRequestWrapper\n\n我们知道,我们在操作的`HttpSession`和`HttpServletRequest`是两个接口,也正是因为这样,出现了 `SessionRepositoryRequestWrapper`对象,它继承于`HttpServletRequestWrapper`, 并重写了 `getSession`方法\n\n```java\npublic class SessionRepositoryRequestWrapper extends HttpServletRequestWrapper {\n\n        public SessionRepositoryRequestWrapper(HttpServletRequest original) {\n                super(original);\n        }\n\n        public HttpSession getSession() {\n                return getSession(true);\n        }\n\n        public HttpSession getSession(boolean createNew) {\n                // create an HttpSession implementation from Spring Session\n        }\n\n        // ... other methods delegate to the original HttpServletRequest ...\n}\n```\n\n返回`HttpSession`都被覆盖了。所有其他方法都由`HttpServletRequestWrapper`并简单地将其委托给原来的`HttpServletRequest`执行。\n\n#### SessionRepositoryFilter\n\n下面是部分的伪代码\n\n```java\npublic class SessionRepositoryFilter implements Filter {\n\n        public doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {\n                HttpServletRequest httpRequest = (HttpServletRequest) request;\n                SessionRepositoryRequestWrapper customRequest =\n                        new SessionRepositoryRequestWrapper(httpRequest);\n\n                chain.doFilter(customRequest, response, chain);\n        }\n\n        // ...\n}\n```\n\n通过`SessionRepositoryFilter`过滤器,在这里去替换 `HttpServletRequest` 为 `SessionRepositoryRequestWrapper`,注意的是, `Spring Session`的过滤器`SessionRepositoryFilter`必须放在与`HttpSession` 交互的任何东西前面.","slug":"springboot/spring-session","published":1,"updated":"2018-11-19T10:09:48.207Z","comments":1,"photos":[],"link":"","_id":"cjop2rur60000pwusi2gmdiyo","content":"<h1 id=\"spring-session\"><a href=\"#spring-session\" class=\"headerlink\" title=\"spring-session\"></a>spring-session</h1><p>Spring Session提供了用于管理用户会话信息的API和实现。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><p><code>spring session</code> 使得支持集群会话变得很容易,而不依赖任何特定的应用程序容器,并且还提供以下信息</p>\n<ul>\n<li><code>HttpSession</code> - 允许应用程序容器(Tomcat) 中的 <code>HttpSession</code>, 在<code>RESTFUL</code>模式中<code>SpringSession</code>允许在标头中提供<code>SessionId</code></li>\n<li><code>WebSocket</code> - 提供在接收<code>WebSocket</code>消息时保持<code>HttpSession</code>活动的能力</li>\n<li><code>WebSession</code> - 允许以与应用程序容器无关的方式替换<code>SpringWebFlux</code>的<code>WebSession</code></li>\n</ul>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li><code>springSession core</code> -  提供<code>springSession</code>功能的核心API</li>\n<li><code>springSession Data Redis</code> -  提供由<code>Redis</code>和配置支持的<code>SessionRepository</code>和<code>ReactiveSessionRepository</code> - 实现</li>\n<li><code>SpringSession JDBC</code> -  提供由<code>关系数据库</code>和配置支持的 <code>SessionRepository</code>实现</li>\n<li><code>Spring Session Hazelcast</code> -   提供由<code>Hazelcast</code>和配置支持的 <code>SessionRepository</code>实现</li>\n</ul>\n<h3 id=\"Spring-Session\"><a href=\"#Spring-Session\" class=\"headerlink\" title=\"Spring Session\"></a>Spring Session</h3><p><code>Spring Session</code> 中透明的继承了<code>HttpSession</code>, 我们可以简单粗暴的使用 <code>SpringSession</code>替换我们传统的<code>HttpSession</code>.</p>\n<h3 id=\"SpringSession优势\"><a href=\"#SpringSession优势\" class=\"headerlink\" title=\"SpringSession优势\"></a>SpringSession优势</h3><ul>\n<li>方便做集群会话,儿不限制使用特定的应用容器</li>\n<li><code>SpringSession</code> 支持在单个浏览器实例中管理多个用户会话</li>\n<li>在<code>RESTFUL</code>模式中<code>SpringSession</code>允许在标头中提供<code>SessionId</code></li>\n</ul>\n<h3 id=\"SpringSession继承\"><a href=\"#SpringSession继承\" class=\"headerlink\" title=\"SpringSession继承\"></a>SpringSession继承</h3><ul>\n<li>redis</li>\n<li>Pivotal Gemfire</li>\n<li>JDBC</li>\n<li>Mongo</li>\n<li>Hazelcast</li>\n</ul>\n<h4 id=\"HttpSession-with-Redis\"><a href=\"#HttpSession-with-Redis\" class=\"headerlink\" title=\"HttpSession with Redis\"></a>HttpSession with Redis</h4><p>这是一个简单的案例,具体配置可以参考官网, 一下是一个spring的配置类,主要做了两件事</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Config</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> LettuceConnectionFactory <span class=\"title\">connectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LettuceConnectionFactory(); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>@EnableRedisHttpSession</code> 创建一个名为<code>springSessionRepositoryFilter</code>的过滤器,负责替换<code>HttpSession</code>变为<code>SpringSession</code>的实现,并且启动<code>Redis</code>对 <code>session</code>管理的支持</li>\n<li>创建<code>RedisConnectionFactory</code>,它负责将<code>SpringSession</code>连接到 <code>Redis Server</code>, 此时的配置采用的默认配置, 即<code>localhost:6379</code>. <blockquote>\n<p><code>spring data redis</code> 默认支持 <code>Lettuce</code> and <code>Jedis</code>等 <code>Redis</code>连接工具</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"HttpSession-是如何工作得\"><a href=\"#HttpSession-是如何工作得\" class=\"headerlink\" title=\"HttpSession 是如何工作得\"></a>HttpSession 是如何工作得</h3><h4 id=\"SessionRepositoryRequestWrapper\"><a href=\"#SessionRepositoryRequestWrapper\" class=\"headerlink\" title=\"SessionRepositoryRequestWrapper\"></a>SessionRepositoryRequestWrapper</h4><p>我们知道,我们在操作的<code>HttpSession</code>和<code>HttpServletRequest</code>是两个接口,也正是因为这样,出现了 <code>SessionRepositoryRequestWrapper</code>对象,它继承于<code>HttpServletRequestWrapper</code>, 并重写了 <code>getSession</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SessionRepositoryRequestWrapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SessionRepositoryRequestWrapper</span><span class=\"params\">(HttpServletRequest original)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>(original);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> HttpSession <span class=\"title\">getSession</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> getSession(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> HttpSession <span class=\"title\">getSession</span><span class=\"params\">(<span class=\"keyword\">boolean</span> createNew)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// create an HttpSession implementation from Spring Session</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ... other methods delegate to the original HttpServletRequest ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回<code>HttpSession</code>都被覆盖了。所有其他方法都由<code>HttpServletRequestWrapper</code>并简单地将其委托给原来的<code>HttpServletRequest</code>执行。</p>\n<h4 id=\"SessionRepositoryFilter\"><a href=\"#SessionRepositoryFilter\" class=\"headerlink\" title=\"SessionRepositoryFilter\"></a>SessionRepositoryFilter</h4><p>下面是部分的伪代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SessionRepositoryFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span>&#123;</span><br><span class=\"line\">                HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class=\"line\">                SessionRepositoryRequestWrapper customRequest =</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> SessionRepositoryRequestWrapper(httpRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">                chain.doFilter(customRequest, response, chain);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>SessionRepositoryFilter</code>过滤器,在这里去替换 <code>HttpServletRequest</code> 为 <code>SessionRepositoryRequestWrapper</code>,注意的是, <code>Spring Session</code>的过滤器<code>SessionRepositoryFilter</code>必须放在与<code>HttpSession</code> 交互的任何东西前面.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"spring-session\"><a href=\"#spring-session\" class=\"headerlink\" title=\"spring-session\"></a>spring-session</h1><p>Spring Session提供了用于管理用户会话信息的API和实现。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><p><code>spring session</code> 使得支持集群会话变得很容易,而不依赖任何特定的应用程序容器,并且还提供以下信息</p>\n<ul>\n<li><code>HttpSession</code> - 允许应用程序容器(Tomcat) 中的 <code>HttpSession</code>, 在<code>RESTFUL</code>模式中<code>SpringSession</code>允许在标头中提供<code>SessionId</code></li>\n<li><code>WebSocket</code> - 提供在接收<code>WebSocket</code>消息时保持<code>HttpSession</code>活动的能力</li>\n<li><code>WebSession</code> - 允许以与应用程序容器无关的方式替换<code>SpringWebFlux</code>的<code>WebSession</code></li>\n</ul>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li><code>springSession core</code> -  提供<code>springSession</code>功能的核心API</li>\n<li><code>springSession Data Redis</code> -  提供由<code>Redis</code>和配置支持的<code>SessionRepository</code>和<code>ReactiveSessionRepository</code> - 实现</li>\n<li><code>SpringSession JDBC</code> -  提供由<code>关系数据库</code>和配置支持的 <code>SessionRepository</code>实现</li>\n<li><code>Spring Session Hazelcast</code> -   提供由<code>Hazelcast</code>和配置支持的 <code>SessionRepository</code>实现</li>\n</ul>\n<h3 id=\"Spring-Session\"><a href=\"#Spring-Session\" class=\"headerlink\" title=\"Spring Session\"></a>Spring Session</h3><p><code>Spring Session</code> 中透明的继承了<code>HttpSession</code>, 我们可以简单粗暴的使用 <code>SpringSession</code>替换我们传统的<code>HttpSession</code>.</p>\n<h3 id=\"SpringSession优势\"><a href=\"#SpringSession优势\" class=\"headerlink\" title=\"SpringSession优势\"></a>SpringSession优势</h3><ul>\n<li>方便做集群会话,儿不限制使用特定的应用容器</li>\n<li><code>SpringSession</code> 支持在单个浏览器实例中管理多个用户会话</li>\n<li>在<code>RESTFUL</code>模式中<code>SpringSession</code>允许在标头中提供<code>SessionId</code></li>\n</ul>\n<h3 id=\"SpringSession继承\"><a href=\"#SpringSession继承\" class=\"headerlink\" title=\"SpringSession继承\"></a>SpringSession继承</h3><ul>\n<li>redis</li>\n<li>Pivotal Gemfire</li>\n<li>JDBC</li>\n<li>Mongo</li>\n<li>Hazelcast</li>\n</ul>\n<h4 id=\"HttpSession-with-Redis\"><a href=\"#HttpSession-with-Redis\" class=\"headerlink\" title=\"HttpSession with Redis\"></a>HttpSession with Redis</h4><p>这是一个简单的案例,具体配置可以参考官网, 一下是一个spring的配置类,主要做了两件事</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Config</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> LettuceConnectionFactory <span class=\"title\">connectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LettuceConnectionFactory(); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>@EnableRedisHttpSession</code> 创建一个名为<code>springSessionRepositoryFilter</code>的过滤器,负责替换<code>HttpSession</code>变为<code>SpringSession</code>的实现,并且启动<code>Redis</code>对 <code>session</code>管理的支持</li>\n<li>创建<code>RedisConnectionFactory</code>,它负责将<code>SpringSession</code>连接到 <code>Redis Server</code>, 此时的配置采用的默认配置, 即<code>localhost:6379</code>. <blockquote>\n<p><code>spring data redis</code> 默认支持 <code>Lettuce</code> and <code>Jedis</code>等 <code>Redis</code>连接工具</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"HttpSession-是如何工作得\"><a href=\"#HttpSession-是如何工作得\" class=\"headerlink\" title=\"HttpSession 是如何工作得\"></a>HttpSession 是如何工作得</h3><h4 id=\"SessionRepositoryRequestWrapper\"><a href=\"#SessionRepositoryRequestWrapper\" class=\"headerlink\" title=\"SessionRepositoryRequestWrapper\"></a>SessionRepositoryRequestWrapper</h4><p>我们知道,我们在操作的<code>HttpSession</code>和<code>HttpServletRequest</code>是两个接口,也正是因为这样,出现了 <code>SessionRepositoryRequestWrapper</code>对象,它继承于<code>HttpServletRequestWrapper</code>, 并重写了 <code>getSession</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SessionRepositoryRequestWrapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SessionRepositoryRequestWrapper</span><span class=\"params\">(HttpServletRequest original)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>(original);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> HttpSession <span class=\"title\">getSession</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> getSession(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> HttpSession <span class=\"title\">getSession</span><span class=\"params\">(<span class=\"keyword\">boolean</span> createNew)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// create an HttpSession implementation from Spring Session</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ... other methods delegate to the original HttpServletRequest ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回<code>HttpSession</code>都被覆盖了。所有其他方法都由<code>HttpServletRequestWrapper</code>并简单地将其委托给原来的<code>HttpServletRequest</code>执行。</p>\n<h4 id=\"SessionRepositoryFilter\"><a href=\"#SessionRepositoryFilter\" class=\"headerlink\" title=\"SessionRepositoryFilter\"></a>SessionRepositoryFilter</h4><p>下面是部分的伪代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SessionRepositoryFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span>&#123;</span><br><span class=\"line\">                HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class=\"line\">                SessionRepositoryRequestWrapper customRequest =</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> SessionRepositoryRequestWrapper(httpRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">                chain.doFilter(customRequest, response, chain);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>SessionRepositoryFilter</code>过滤器,在这里去替换 <code>HttpServletRequest</code> 为 <code>SessionRepositoryRequestWrapper</code>,注意的是, <code>Spring Session</code>的过滤器<code>SessionRepositoryFilter</code>必须放在与<code>HttpSession</code> 交互的任何东西前面.</p>\n"}],"PostAsset":[{"_id":"source/_posts/docker/Docker Swarm/network.png","slug":"network.png","post":"cjonx65s6000ci8uso8yfsmwm","modified":0,"renderable":0},{"_id":"source/_posts/springboot/spring-cloud-gateway/1537155739056.png","slug":"1537155739056.png","post":"cjonx65t8001ki8ussf6zv3n3","modified":0,"renderable":0},{"_id":"source/_posts/docker/docker stack/docker stack1.png","slug":"docker stack1.png","post":"cjonx65sw000qi8uso9pmeti1","modified":0,"renderable":0},{"_id":"source/_posts/docker/docker stack/docker stack2.png","slug":"docker stack2.png","post":"cjonx65sw000qi8uso9pmeti1","modified":0,"renderable":0},{"_id":"source/_posts/docker/docker stack/docker-redis.png","slug":"docker-redis.png","post":"cjonx65sw000qi8uso9pmeti1","modified":0,"renderable":0},{"_id":"source/_posts/docker/docker简述/docker engine.png","slug":"docker engine.png","post":"cjonx65t40011i8usfo0l0pkk","modified":0,"renderable":0},{"_id":"source/_posts/docker/docker简述/docker.jpg","slug":"docker.jpg","post":"cjonx65t40011i8usfo0l0pkk","modified":0,"renderable":0},{"_id":"source/_posts/docker/docker简述/docker_VM.jpg","slug":"docker_VM.jpg","post":"cjonx65t40011i8usfo0l0pkk","modified":0,"renderable":0},{"_id":"source/_posts/docker/Docker Swarm/docker searm.jpg","slug":"docker searm.jpg","post":"cjonx65s6000ci8uso8yfsmwm","modified":0,"renderable":0},{"_id":"source/_posts/docker/Docker Swarm/docker-mechine.png","slug":"docker-mechine.png","post":"cjonx65s6000ci8uso8yfsmwm","modified":0,"renderable":0},{"_id":"source/_posts/docker/Docker Swarm/swarm架构.jpg","slug":"swarm架构.jpg","post":"cjonx65s6000ci8uso8yfsmwm","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjonx65rq0008i8uscpdruu24","category_id":"cjonx65rq0005i8ushemcrtn6","_id":"cjonx65s6000ei8usi3coao3s"},{"post_id":"cjonx65rb0003i8us7rdpnfgm","category_id":"cjonx65rq0005i8ushemcrtn6","_id":"cjonx65sr000ji8ust5gy1u4j"},{"post_id":"cjonx65s60009i8ustg6uvya3","category_id":"cjonx65rq0005i8ushemcrtn6","_id":"cjonx65su000mi8ustgc4zo6s"},{"post_id":"cjonx65rb0004i8us9yuy4f53","category_id":"cjonx65rq0005i8ushemcrtn6","_id":"cjonx65sx000ri8usxdglwuxt"},{"post_id":"cjonx65sp000ii8usrqt4v0wb","category_id":"cjonx65s6000fi8usntof138v","_id":"cjonx65t0000ui8usl17bx8j6"},{"post_id":"cjonx65rq0007i8usafljmk3n","category_id":"cjonx65s6000fi8usntof138v","_id":"cjonx65t3000zi8us8cpwh0r4"},{"post_id":"cjonx65ss000li8uscf8f1tou","category_id":"cjonx65s6000fi8usntof138v","_id":"cjonx65t50012i8uslfpo4q3k"},{"post_id":"cjonx65sw000qi8uso9pmeti1","category_id":"cjonx65s6000fi8usntof138v","_id":"cjonx65t80015i8uss0hh34am"},{"post_id":"cjonx65s6000ci8uso8yfsmwm","category_id":"cjonx65s6000fi8usntof138v","_id":"cjonx65t80019i8usr6vx03sw"},{"post_id":"cjonx65s6000di8usj1x0elj7","category_id":"cjonx65s6000fi8usntof138v","_id":"cjonx65t8001di8usyrvoilwc"},{"post_id":"cjonx65t40011i8usfo0l0pkk","category_id":"cjonx65s6000fi8usntof138v","_id":"cjonx65t8001hi8usd9tkdm1b"},{"post_id":"cjonx65t70014i8usi088ebla","category_id":"cjonx65t60013i8usqaktv08c","_id":"cjonx65t8001li8usy7qb6wra"},{"post_id":"cjonx65sy000ti8usff14d7ud","category_id":"cjonx65t60013i8usqaktv08c","_id":"cjonx65to001oi8us874hrlva"},{"post_id":"cjonx65t2000yi8us3z8z7kys","category_id":"cjonx65t60013i8usqaktv08c","_id":"cjonx65to001ri8uszij3j91a"},{"post_id":"cjonx65t8001gi8uss0zi0ue3","category_id":"cjonx65s6000fi8usntof138v","_id":"cjonx65to001ui8usiaqqvxye"},{"post_id":"cjonx65t8001ki8ussf6zv3n3","category_id":"cjonx65t8001ii8usnyly4eta","_id":"cjonx65to001wi8us3se83j7o"},{"post_id":"cjonx65t80018i8usboy38i20","category_id":"cjonx65t8001ii8usnyly4eta","_id":"cjonx65to001zi8uss15pw0il"},{"post_id":"cjonx65t8001ci8usg3fmj458","category_id":"cjonx65t8001ii8usnyly4eta","_id":"cjonx65to0020i8uspo1qf3e6"},{"post_id":"cjop2rur60000pwusi2gmdiyo","category_id":"cjonx65t8001ii8usnyly4eta","_id":"cjop2rurj0002pwusxu87sa3k"}],"PostTag":[{"post_id":"cjonx65s6000ci8uso8yfsmwm","tag_id":"cjonx65rq0006i8us9080ob2x","_id":"cjonx65sp000hi8uskr0yvda5"},{"post_id":"cjonx65rb0003i8us7rdpnfgm","tag_id":"cjonx65rq0006i8us9080ob2x","_id":"cjonx65sr000ki8ushi2r07o8"},{"post_id":"cjonx65rb0003i8us7rdpnfgm","tag_id":"cjonx65s6000bi8us5iy6u4pn","_id":"cjonx65sv000pi8usinfwsde6"},{"post_id":"cjonx65s6000di8usj1x0elj7","tag_id":"cjonx65rq0006i8us9080ob2x","_id":"cjonx65sy000si8usf5p2km5q"},{"post_id":"cjonx65ss000li8uscf8f1tou","tag_id":"cjonx65rq0006i8us9080ob2x","_id":"cjonx65t1000wi8us5yaov46b"},{"post_id":"cjonx65sw000qi8uso9pmeti1","tag_id":"cjonx65rq0006i8us9080ob2x","_id":"cjonx65t40010i8us6vmq457a"},{"post_id":"cjonx65t40011i8usfo0l0pkk","tag_id":"cjonx65rq0006i8us9080ob2x","_id":"cjonx65t80017i8usxvkkqp8q"},{"post_id":"cjonx65rb0004i8us9yuy4f53","tag_id":"cjonx65sn000gi8usyp1dkntj","_id":"cjonx65t8001bi8us03crkaj6"},{"post_id":"cjonx65rb0004i8us9yuy4f53","tag_id":"cjonx65sv000oi8uswzi76s42","_id":"cjonx65t8001fi8usqoasde8g"},{"post_id":"cjonx65rb0004i8us9yuy4f53","tag_id":"cjonx65t1000xi8usyp7dioc1","_id":"cjonx65t8001ji8us1altmj2c"},{"post_id":"cjonx65t8001gi8uss0zi0ue3","tag_id":"cjonx65rq0006i8us9080ob2x","_id":"cjonx65to001ni8usw4698t84"},{"post_id":"cjonx65t8001gi8uss0zi0ue3","tag_id":"cjonx65t8001ei8us8po8fin5","_id":"cjonx65to001pi8usk9fgiqlp"},{"post_id":"cjonx65rq0007i8usafljmk3n","tag_id":"cjonx65rq0006i8us9080ob2x","_id":"cjonx65to001ti8usg5597inl"},{"post_id":"cjonx65rq0007i8usafljmk3n","tag_id":"cjonx65t8001ei8us8po8fin5","_id":"cjonx65to001vi8usf8rvmyhv"},{"post_id":"cjonx65rq0008i8uscpdruu24","tag_id":"cjonx65t8001mi8usm5z8mii2","_id":"cjonx65to001xi8usy1tccq8l"},{"post_id":"cjonx65s60009i8ustg6uvya3","tag_id":"cjonx65to001si8usjyvfmus0","_id":"cjonx65to0022i8usye4k8mp4"},{"post_id":"cjonx65s60009i8ustg6uvya3","tag_id":"cjonx65to001yi8us5mxrn5zo","_id":"cjonx65u40023i8usi150lch4"},{"post_id":"cjonx65sp000ii8usrqt4v0wb","tag_id":"cjonx65rq0006i8us9080ob2x","_id":"cjonx65u40025i8uspwzcorln"},{"post_id":"cjonx65sp000ii8usrqt4v0wb","tag_id":"cjonx65t8001ei8us8po8fin5","_id":"cjonx65u40026i8us6o41jcm4"},{"post_id":"cjonx65sy000ti8usff14d7ud","tag_id":"cjonx65t1000xi8usyp7dioc1","_id":"cjonx65u40029i8usd1g0rn2g"},{"post_id":"cjonx65sy000ti8usff14d7ud","tag_id":"cjonx65u40027i8ustrg4khgt","_id":"cjonx65u4002ai8ust79clcd2"},{"post_id":"cjonx65t2000yi8us3z8z7kys","tag_id":"cjonx65t1000xi8usyp7dioc1","_id":"cjonx65u4002di8usk7basefu"},{"post_id":"cjonx65t2000yi8us3z8z7kys","tag_id":"cjonx65u4002bi8usnuv5j08n","_id":"cjonx65u4002ei8uszpfkhq02"},{"post_id":"cjonx65t70014i8usi088ebla","tag_id":"cjonx65t1000xi8usyp7dioc1","_id":"cjonx65u4002gi8usqdul0jay"},{"post_id":"cjonx65t70014i8usi088ebla","tag_id":"cjonx65u4002bi8usnuv5j08n","_id":"cjonx65u4002hi8usuohuau1y"},{"post_id":"cjonx65t80018i8usboy38i20","tag_id":"cjonx65t1000xi8usyp7dioc1","_id":"cjonx65uj002ji8usl3omsk7u"},{"post_id":"cjonx65t80018i8usboy38i20","tag_id":"cjonx65u4002fi8usk5ne0q90","_id":"cjonx65uj002ki8usrhvgi3rz"},{"post_id":"cjonx65t8001ci8usg3fmj458","tag_id":"cjonx65t1000xi8usyp7dioc1","_id":"cjonx65uj002mi8usj530x7sl"},{"post_id":"cjonx65t8001ci8usg3fmj458","tag_id":"cjonx65u4002ii8usafn0b1p1","_id":"cjonx65uj002ni8us91wm6ziy"},{"post_id":"cjonx65t8001ki8ussf6zv3n3","tag_id":"cjonx65t1000xi8usyp7dioc1","_id":"cjonx65uj002oi8ustfdayy1g"},{"post_id":"cjonx65t8001ki8ussf6zv3n3","tag_id":"cjonx65u4002ii8usafn0b1p1","_id":"cjonx65uj002pi8ust397q99n"},{"post_id":"cjop2rur60000pwusi2gmdiyo","tag_id":"cjonx65t1000xi8usyp7dioc1","_id":"cjop2rurk0003pwus01sxjfdb"},{"post_id":"cjop2rur60000pwusi2gmdiyo","tag_id":"cjop2rurc0001pwusc4l6h57d","_id":"cjop2rurl0004pwus2f0kga2m"}],"Tag":[{"name":"docker","_id":"cjonx65rq0006i8us9080ob2x"},{"name":"mysql","_id":"cjonx65s6000bi8us5iy6u4pn"},{"name":"jedis","_id":"cjonx65sn000gi8usyp1dkntj"},{"name":"redis","_id":"cjonx65sv000oi8uswzi76s42"},{"name":"java","_id":"cjonx65t1000xi8usyp7dioc1"},{"name":"入门","_id":"cjonx65t8001ei8us8po8fin5"},{"name":"锁表与解锁","_id":"cjonx65t8001mi8usm5z8mii2"},{"name":"db","_id":"cjonx65to001si8usjyvfmus0"},{"name":"数据库工具","_id":"cjonx65to001yi8us5mxrn5zo"},{"name":"设计模式","_id":"cjonx65u40027i8ustrg4khgt"},{"name":"问题","_id":"cjonx65u4002bi8usnuv5j08n"},{"name":"springboot","_id":"cjonx65u4002fi8usk5ne0q90"},{"name":"springcloud","_id":"cjonx65u4002ii8usafn0b1p1"},{"name":"spring","_id":"cjop2rurc0001pwusc4l6h57d"}]}}