<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Carzy</title>
  
  <subtitle>做自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dongcarzy.github.io/"/>
  <updated>2018-12-06T04:05:41.045Z</updated>
  <id>https://dongcarzy.github.io/</id>
  
  <author>
    <name>Carzy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>logback</title>
    <link href="https://dongcarzy.github.io/2018/12/06/java/logback/"/>
    <id>https://dongcarzy.github.io/2018/12/06/java/logback/</id>
    <published>2018-12-06T04:03:32.000Z</published>
    <updated>2018-12-06T04:05:41.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h1><p><code>springboot</code> 中通过 <code>logback-spring.xml</code>自定义配置 <code>logback</code> 日志</p><h2 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h2><p>在 <code>springboot</code> 系统中，springboot 会默认加载 <code>resource</code> 下的 <code>logback.xml</code> 或者 <code>logback-spring.xml</code>， 但是建议将文件名命名为 <code>logback-spring.xml</code>， 因为<code>logback.xml</code> 会比 <code>application.properties</code> 更早加载， 就会导致在你的日志配置文档中不能使用 <code>application.properties</code> 中的变量</p><h3 id="变量对应关系"><a href="#变量对应关系" class="headerlink" title="变量对应关系"></a>变量对应关系</h3><table><thead><tr><th>application.properties</th><th>logback-spring.xml</th></tr></thead><tbody><tr><td>logging.exception-conversion-word</td><td>LOG_EXCEPTION_CONVERSION_WORD</td></tr><tr><td>logging.file</td><td>LOG_FILE</td></tr><tr><td>logging.file.max-size</td><td>LOG_FILE_MAX_SIZE</td></tr><tr><td>logging.file.max-history</td><td>LOG_FILE_MAX_HISTORY</td></tr><tr><td>logging.path</td><td>LOG_PATH</td></tr><tr><td>logging.pattern.console</td><td>CONSOLE_LOG_PATTERN</td></tr><tr><td>logging.pattern.dateformat</td><td>LOG_DATEFORMAT_PATTERN</td></tr><tr><td>logging.pattern.file</td><td>FILE_LOG_PATTERN</td></tr><tr><td>logging.pattern.level</td><td>LOG_LEVEL_PATTERN</td></tr><tr><td>PID</td><td>PID</td></tr></tbody></table><h2 id="彩色输出"><a href="#彩色输出" class="headerlink" title="彩色输出"></a>彩色输出</h2><ul><li>通过 <code>conversionRule</code> 引入 <code>springboot</code> 的规则, 将通过 <code>ansi</code> 码表示我们的颜色</li><li>在 <code>application.properties</code> 中开启 <code>ansi</code> 功能 <code>spring.output.ansi.enabled=always</code></li></ul><p>相关配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">value</span>=<span class="string">"$&#123;FILE_LOG_PATTERN:-%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="日志回滚打包"><a href="#日志回滚打包" class="headerlink" title="日志回滚打包"></a>日志回滚打包</h2><p>通过 <code>rollingPolicy</code> 标签来达到回滚打包，规则有很多中，可参考 <code>logbak</code>官网，以下是我完整的配置</p><ul><li><code>${LOG_PATH}</code> 是引用的 <code>application.properties</code>中的属性 <code>logging.path</code></li><li>输出格式 <code>pattern</code> 可自行参考官网，这里我是按照 <code>springboot</code> 默认格式输出，来源： <code>org/springframework/boot/logging/logback/defaults.xml</code> 这个文件</li><li>最终效果， 当日志 <code>spring.log</code> 文件达到 <code>300M</code> 照是， 就会被压缩成 <code>zip</code> 包，文件名称为 <code>%d{yyyy-MM-dd}.%i.log.zip</code>, 年月日+当天压缩包的序号.log.zip</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"$&#123;FILE_LOG_PATTERN:-%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/spring.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/%d&#123;yyyy-MM-dd&#125;.%i.log.zip<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留个数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>50<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志总保存量为10GB --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>10GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--活动文件大小 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>300MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出默认级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.tonmx"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Logback&quot;&gt;&lt;a href=&quot;#Logback&quot; class=&quot;headerlink&quot; title=&quot;Logback&quot;&gt;&lt;/a&gt;Logback&lt;/h1&gt;&lt;p&gt;&lt;code&gt;springboot&lt;/code&gt; 中通过 &lt;code&gt;logback-spring.x
      
    
    </summary>
    
      <category term="java" scheme="https://dongcarzy.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://dongcarzy.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://dongcarzy.github.io/2018/11/19/java/design-pattern/"/>
    <id>https://dongcarzy.github.io/2018/11/19/java/design-pattern/</id>
    <published>2018-11-19T06:02:42.000Z</published>
    <updated>2018-11-19T06:07:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式（Design pattern）代表了<code>最佳的实践</code>，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><h2 id="什么是GOF-四人帮，全拼-Gang-of-Four-？"><a href="#什么是GOF-四人帮，全拼-Gang-of-Four-？" class="headerlink" title="什么是GOF(四人帮，全拼 Gang of Four)？"></a>什么是GOF(四人帮，全拼 Gang of Four)？</h2><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ul><h2 id="最佳的实践"><a href="#最佳的实践" class="headerlink" title="最佳的实践"></a>最佳的实践</h2><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><ul><li>23中设计模式</li><li>3大类 (创建型模式, 结构型模式, 行为型模式)</li></ul><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><blockquote><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活</p></blockquote><ul><li style="list-style: none"><input type="checkbox"> 工厂模式</li><li style="list-style: none"><input type="checkbox"> 抽象工厂模式</li><li style="list-style: none"><input type="checkbox"> 单例模式</li><li style="list-style: none"><input type="checkbox"> 建造者模式</li><li style="list-style: none"><input type="checkbox"> 原型模式</li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><blockquote><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式</p></blockquote><ul><li style="list-style: none"><input type="checkbox"> 适配器模式</li><li style="list-style: none"><input type="checkbox"> 桥接模式</li><li style="list-style: none"><input type="checkbox"> 过滤器模式</li><li style="list-style: none"><input type="checkbox"> 组合模式</li><li style="list-style: none"><input type="checkbox"> 装饰器模式</li><li style="list-style: none"><input type="checkbox"> 外观模式</li><li style="list-style: none"><input type="checkbox"> 享元模式</li><li style="list-style: none"><input type="checkbox"> 代理模式</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><blockquote><p>关注对象之间的通信</p></blockquote><ul><li style="list-style: none"><input type="checkbox"> 责任模式</li><li style="list-style: none"><input type="checkbox"> 命令模式</li><li style="list-style: none"><input type="checkbox"> 解释器模式</li><li style="list-style: none"><input type="checkbox"> 迭代器模式</li><li style="list-style: none"><input type="checkbox"> 中介模式</li><li style="list-style: none"><input type="checkbox"> 备忘录模式</li><li style="list-style: none"><input type="checkbox"> 观察者模式</li><li style="list-style: none"><input type="checkbox"> 状态模式</li><li style="list-style: none"><input type="checkbox"> 空对象模式</li><li style="list-style: none"><input type="checkbox"> 策略模式</li><li style="list-style: none"><input type="checkbox"> 模板模式</li><li style="list-style: none"><input type="checkbox"> 访问者模式</li></ul><h3 id="J2EE模式-补充"><a href="#J2EE模式-补充" class="headerlink" title="J2EE模式(补充)"></a>J2EE模式(补充)</h3><blockquote><p>特别关注表示层,由 sun Java Center 鉴定</p></blockquote><ul><li style="list-style: none"><input type="checkbox"> MVC模式</li><li style="list-style: none"><input type="checkbox"> 业务代码模式</li><li style="list-style: none"><input type="checkbox"> 组合实体模式</li><li style="list-style: none"><input type="checkbox"> 数据访问对象模式</li><li style="list-style: none"><input type="checkbox"> 前端控制器模式</li><li style="list-style: none"><input type="checkbox"> 拦截过滤器模式</li><li style="list-style: none"><input type="checkbox"> 服务定位模式</li><li style="list-style: none"><input type="checkbox"> 传输对象模式</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;p&gt;设计模式（Design pattern）代表了&lt;code&gt;最佳的实践&lt;/code&gt;，通常被有经验的面向对象的软件开发人员所采
      
    
    </summary>
    
      <category term="java" scheme="https://dongcarzy.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://dongcarzy.github.io/tags/java/"/>
    
      <category term="设计模式" scheme="https://dongcarzy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>问题列表</title>
    <link href="https://dongcarzy.github.io/2018/11/19/java/problem/"/>
    <id>https://dongcarzy.github.io/2018/11/19/java/problem/</id>
    <published>2018-11-19T06:02:42.000Z</published>
    <updated>2018-11-19T06:09:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h1><blockquote><p>平时工作中遇到的问题以及解决办法</p></blockquote><ul><li style="list-style: none"><input type="checkbox" checked> 计算时差问题</li><li style="list-style: none"><input type="checkbox" checked> 静态Map，Set用作存储并发</li><li style="list-style: none"><input type="checkbox" checked> 获取 <code>spring.profile.active</code> 用户</li></ul><h2 id="计算时差问题"><a href="#计算时差问题" class="headerlink" title="计算时差问题"></a>计算时差问题</h2><p>StopWatch 类提供计时器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取并启动</span></span><br><span class="line">StopWatch sw = StopWatch.createStarted();</span><br><span class="line">  = &gt;</span><br><span class="line">StopWatch sw = <span class="keyword">new</span> StopWatch();</span><br><span class="line">sw.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取时间</span></span><br><span class="line">sw.getTime();</span><br><span class="line">or</span><br><span class="line">sw.getTime(TimeUnit.MINUTES);  <span class="comment">//TimeUnit表示不同时间形式</span></span><br></pre></td></tr></table></figure><h2 id="静态Map，Set用作存储并发"><a href="#静态Map，Set用作存储并发" class="headerlink" title="静态Map，Set用作存储并发"></a>静态Map，Set用作存储并发</h2><p>采用 <code>ConcurrentHashMap</code> 替 <code>HashMap</code><br>类似 <code>ConcurrentSkipListSet</code> 替换 <code>HashSet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map map = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> ConcurrentSkipListSet&lt;&gt;();</span><br></pre></td></tr></table></figure><ul><li><code>ConcurrentHashMap</code>代码中可以看出，它引入了一个“分段锁”的概念，具体可以理解为把一个大的Map拆分成N个小的<code>HashTable</code>，根据<code>key.hashCode()</code>来决定把key放到哪个HashTable中。</li><li>在<code>ConcurrentHashMap</code>中，就是把Map分成了N个<code>Segment</code>，<code>put</code>和<code>get</code>的时候，都是现根据<code>key.hashCode()</code>算出放到哪个<code>Segment</code>中。</li></ul><h2 id="获取-spring-profile-active-用户"><a href="#获取-spring-profile-active-用户" class="headerlink" title="获取 spring.profile.active 用户"></a>获取 <code>spring.profile.active</code> 用户</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题列表&quot;&gt;&lt;a href=&quot;#问题列表&quot; class=&quot;headerlink&quot; title=&quot;问题列表&quot;&gt;&lt;/a&gt;问题列表&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;平时工作中遇到的问题以及解决办法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li style
      
    
    </summary>
    
      <category term="java" scheme="https://dongcarzy.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://dongcarzy.github.io/tags/java/"/>
    
      <category term="问题" scheme="https://dongcarzy.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>异常</title>
    <link href="https://dongcarzy.github.io/2018/11/19/java/exception/"/>
    <id>https://dongcarzy.github.io/2018/11/19/java/exception/</id>
    <published>2018-11-19T06:02:42.000Z</published>
    <updated>2018-11-19T06:11:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p><a href="http://blog.csdn.net/mccand1234/article/details/51579425" target="_blank" rel="noopener">http://blog.csdn.net/mccand1234/article/details/51579425</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/mccand1234/article/details/51579425&quot; tar
      
    
    </summary>
    
      <category term="java" scheme="https://dongcarzy.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://dongcarzy.github.io/tags/java/"/>
    
      <category term="问题" scheme="https://dongcarzy.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud</title>
    <link href="https://dongcarzy.github.io/2018/11/19/springboot/spring-cloud/"/>
    <id>https://dongcarzy.github.io/2018/11/19/springboot/spring-cloud/</id>
    <published>2018-11-19T05:57:54.000Z</published>
    <updated>2018-11-19T06:16:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-cloud"><a href="#spring-cloud" class="headerlink" title="spring cloud"></a>spring cloud</h1><ul><li>分布式/版本化配置</li><li>服务注册和发现</li><li>选路</li><li>服务对服务呼叫</li><li>负载平衡</li><li>断路器</li><li>分布式消息传递</li></ul><p><a href="http://cloud.spring.io/spring-cloud-static/Camden.SR2/" target="_blank" rel="noopener">cloud文档</a></p><h2 id="spring-cloud-config"><a href="#spring-cloud-config" class="headerlink" title="spring cloud config"></a>spring cloud config</h2><p>配置管理中心, 通过 <code>spring.cloud.config.server.git.uri</code> 来获取git服务上的配置文档,当然也可配置成本地获取.客户端通过HTTP可以获取对应的 配置资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/spring-cloud-samples/config-repo</span></span><br></pre></td></tr></table></figure><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>客户端依赖 <code>SpringCloud-config-Client</code>这个jar, 如果你直接引入了 <code>spring-cloud-starter-config</code> 则不需要额外添加 <code>jar</code></p><p><code>bootstrap.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 指向服务端的配置中心</span><br><span class="line">spring.cloud.config.uri: http://myconfigserver.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-cloud&quot;&gt;&lt;a href=&quot;#spring-cloud&quot; class=&quot;headerlink&quot; title=&quot;spring cloud&quot;&gt;&lt;/a&gt;spring cloud&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;分布式/版本化配置&lt;/li&gt;
&lt;li&gt;服务注册和
      
    
    </summary>
    
      <category term="springboot" scheme="https://dongcarzy.github.io/categories/springboot/"/>
    
    
      <category term="java" scheme="https://dongcarzy.github.io/tags/java/"/>
    
      <category term="springcloud" scheme="https://dongcarzy.github.io/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-gateway</title>
    <link href="https://dongcarzy.github.io/2018/11/19/springboot/spring-cloud-gateway/"/>
    <id>https://dongcarzy.github.io/2018/11/19/springboot/spring-cloud-gateway/</id>
    <published>2018-11-19T05:57:54.000Z</published>
    <updated>2018-11-19T06:17:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-cloud-gateway"><a href="#spring-cloud-gateway" class="headerlink" title="spring-cloud-gateway"></a>spring-cloud-gateway</h1><ul><li>Route</li><li>Predicate</li><li>Filter</li></ul><h2 id="How-it-Works"><a href="#How-it-Works" class="headerlink" title="How it Works"></a>How it Works</h2><p><img src="spring-cloud-gateway/1537155739056.png" alt="1537155739056"></p><p>客户端向SpringCloudGateway提出请求。如果Gateway Handler映射确定请求与路由匹配，则将其发送到Gateway Web Handler。此处理程序通过特定于请求的筛选链发送请求。过滤器被虚线除以的原因是，过滤器可以在发送代理请求之前或之后执行逻辑。执行所有“预”筛选逻辑，然后发出代理请求。在发出代理请求后，执行“POST”筛选逻辑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-cloud-gateway&quot;&gt;&lt;a href=&quot;#spring-cloud-gateway&quot; class=&quot;headerlink&quot; title=&quot;spring-cloud-gateway&quot;&gt;&lt;/a&gt;spring-cloud-gateway&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="springboot" scheme="https://dongcarzy.github.io/categories/springboot/"/>
    
    
      <category term="java" scheme="https://dongcarzy.github.io/tags/java/"/>
    
      <category term="springcloud" scheme="https://dongcarzy.github.io/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>spring boot 默认配置项</title>
    <link href="https://dongcarzy.github.io/2018/11/19/springboot/boot-default-config/"/>
    <id>https://dongcarzy.github.io/2018/11/19/springboot/boot-default-config/</id>
    <published>2018-11-19T05:57:54.000Z</published>
    <updated>2018-11-19T06:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-boot-默认配置项"><a href="#spring-boot-默认配置项" class="headerlink" title="spring boot 默认配置项"></a>spring boot 默认配置项</h1><p>COMMON SPRING BOOT PROPERTIES<br>This sample file is provided as a guideline. Do NOT copy it in its<br>entirety to your own application. </p><hr><p><code>CORE PROPERTIES</code></p><hr><h1 id="SPRING-CONFIG-ConfigFileApplicationListener"><a href="#SPRING-CONFIG-ConfigFileApplicationListener" class="headerlink" title="SPRING CONFIG (ConfigFileApplicationListener)"></a>SPRING CONFIG (ConfigFileApplicationListener)</h1><p>spring.config.name= # config file name (default to ‘application’)<br>spring.config.location= # location of config file</p><h1 id="PROFILES"><a href="#PROFILES" class="headerlink" title="PROFILES"></a>PROFILES</h1><p>spring.profiles= # comma list of active profiles</p><h1 id="APPLICATION-SETTINGS-SpringApplication"><a href="#APPLICATION-SETTINGS-SpringApplication" class="headerlink" title="APPLICATION SETTINGS (SpringApplication)"></a>APPLICATION SETTINGS (SpringApplication)</h1><p>spring.main.sources=<br>spring.main.web-environment= # detect by default<br>spring.main.show-banner=true<br>spring.main….= # see class for all properties</p><h1 id="LOGGING"><a href="#LOGGING" class="headerlink" title="LOGGING"></a>LOGGING</h1><p>logging.path=/var/logs<br>logging.file=myapp.log<br>logging.config=</p><h1 id="IDENTITY-ContextIdApplicationContextInitializer"><a href="#IDENTITY-ContextIdApplicationContextInitializer" class="headerlink" title="IDENTITY (ContextIdApplicationContextInitializer)"></a>IDENTITY (ContextIdApplicationContextInitializer)</h1><p>spring.application.name=<br>spring.application.index=</p><h1 id="EMBEDDED-SERVER-CONFIGURATION-ServerProperties"><a href="#EMBEDDED-SERVER-CONFIGURATION-ServerProperties" class="headerlink" title="EMBEDDED SERVER CONFIGURATION (ServerProperties)"></a>EMBEDDED SERVER CONFIGURATION (ServerProperties)</h1><p>server.port=8080<br>server.address= # bind to a specific NIC<br>server.session-timeout= # session timeout in seconds<br>server.context-path= # the context path, defaults to ‘/‘<br>server.servlet-path= # the servlet path, defaults to ‘/‘<br>server.tomcat.access-log-pattern= # log pattern of the access log<br>server.tomcat.access-log-enabled=false # is access logging enabled<br>server.tomcat.protocol-header=x-forwarded-proto # ssl forward headers<br>server.tomcat.remote-ip-header=x-forwarded-for<br>server.tomcat.basedir=/tmp # base dir (usually not needed, defaults to tmp)<br>server.tomcat.background-processor-delay=30; # in seconds<br>server.tomcat.max-threads = 0 # number of threads in protocol handler<br>server.tomcat.uri-encoding = UTF-8 # character encoding to use for URL decoding</p><h1 id="SPRING-MVC-HttpMapperProperties"><a href="#SPRING-MVC-HttpMapperProperties" class="headerlink" title="SPRING MVC (HttpMapperProperties)"></a>SPRING MVC (HttpMapperProperties)</h1><p>http.mappers.json-pretty-print=false # pretty print JSON<br>http.mappers.json-sort-keys=false # sort keys<br>spring.mvc.locale= # set fixed locale, e.g. en_UK<br>spring.mvc.date-format= # set fixed date format, e.g. dd/MM/yyyy<br>spring.mvc.message-codes-resolver-format= # PREFIX_ERROR_CODE / POSTFIX_ERROR_CODE<br>spring.view.prefix= # MVC view prefix<br>spring.view.suffix= # … and suffix<br>spring.resources.cache-period= # cache timeouts in headers sent to browser<br>spring.resources.add-mappings=true # if default mappings should be added</p><h1 id="THYMELEAF-ThymeleafAutoConfiguration"><a href="#THYMELEAF-ThymeleafAutoConfiguration" class="headerlink" title="THYMELEAF (ThymeleafAutoConfiguration)"></a>THYMELEAF (ThymeleafAutoConfiguration)</h1><p>spring.thymeleaf.prefix=classpath:/templates/<br>spring.thymeleaf.suffix=.html<br>spring.thymeleaf.mode=HTML5<br>spring.thymeleaf.encoding=UTF-8<br>spring.thymeleaf.content-type=text/html # ;charset=<code>&lt;encoding&gt;</code> is added<br>spring.thymeleaf.cache=true # set to false for hot refresh</p><h1 id="FREEMARKER-FreeMarkerAutoConfiguration"><a href="#FREEMARKER-FreeMarkerAutoConfiguration" class="headerlink" title="FREEMARKER (FreeMarkerAutoConfiguration)"></a>FREEMARKER (FreeMarkerAutoConfiguration)</h1><p>spring.freemarker.allowRequestOverride=false<br>spring.freemarker.allowSessionOverride=false<br>spring.freemarker.cache=true<br>spring.freemarker.checkTemplateLocation=true<br>spring.freemarker.contentType=text/html<br>spring.freemarker.exposeRequestAttributes=false<br>spring.freemarker.exposeSessionAttributes=false<br>spring.freemarker.exposeSpringMacroHelpers=false<br>spring.freemarker.prefix=<br>spring.freemarker.requestContextAttribute=<br>spring.freemarker.settings.*=<br>spring.freemarker.suffix=.ftl<br>spring.freemarker.templateEncoding=UTF-8<br>spring.freemarker.templateLoaderPath=classpath:/templates/<br>spring.freemarker.viewNames= # whitelist of view names that can be resolved</p><h1 id="GROOVY-TEMPLATES-GroovyTemplateAutoConfiguration"><a href="#GROOVY-TEMPLATES-GroovyTemplateAutoConfiguration" class="headerlink" title="GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)"></a>GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)</h1><p>spring.groovy.template.allowRequestOverride=false<br>spring.groovy.template.allowSessionOverride=false<br>spring.groovy.template.cache=true<br>spring.groovy.template.configuration.*= # See Groovy’s TemplateConfiguration<br>spring.groovy.template.contentType=text/html<br>spring.groovy.template.prefix=classpath:/templates/<br>spring.groovy.template.suffix=.tpl<br>spring.groovy.template.templateEncoding=UTF-8<br>spring.groovy.template.viewNames= # whitelist of view names that can be resolved</p><h1 id="VELOCITY-TEMPLATES-VelocityAutoConfiguration"><a href="#VELOCITY-TEMPLATES-VelocityAutoConfiguration" class="headerlink" title="VELOCITY TEMPLATES (VelocityAutoConfiguration)"></a>VELOCITY TEMPLATES (VelocityAutoConfiguration)</h1><p>spring.velocity.allowRequestOverride=false<br>spring.velocity.allowSessionOverride=false<br>spring.velocity.cache=true<br>spring.velocity.checkTemplateLocation=true<br>spring.velocity.contentType=text/html<br>spring.velocity.dateToolAttribute=<br>spring.velocity.exposeRequestAttributes=false<br>spring.velocity.exposeSessionAttributes=false<br>spring.velocity.exposeSpringMacroHelpers=false<br>spring.velocity.numberToolAttribute=<br>spring.velocity.prefix=<br>spring.velocity.properties.*=<br>spring.velocity.requestContextAttribute=<br>spring.velocity.resourceLoaderPath=classpath:/templates/<br>spring.velocity.suffix=.vm<br>spring.velocity.templateEncoding=UTF-8<br>spring.velocity.viewNames= # whitelist of view names that can be resolved</p><h1 id="INTERNATIONALIZATION-MessageSourceAutoConfiguration"><a href="#INTERNATIONALIZATION-MessageSourceAutoConfiguration" class="headerlink" title="INTERNATIONALIZATION (MessageSourceAutoConfiguration)"></a>INTERNATIONALIZATION (MessageSourceAutoConfiguration)</h1><p>spring.messages.basename=messages<br>spring.messages.cacheSeconds=-1<br>spring.messages.encoding=UTF-8</p><h1 id="SECURITY-SecurityProperties"><a href="#SECURITY-SecurityProperties" class="headerlink" title="SECURITY (SecurityProperties)"></a>SECURITY (SecurityProperties)</h1><p>security.user.name=user # login username<br>security.user.password= # login password<br>security.user.role=USER # role assigned to the user<br>security.require-ssl=false # advanced settings …<br>security.enable-csrf=false<br>security.basic.enabled=true<br>security.basic.realm=Spring<br>security.basic.path= # /**<br>security.headers.xss=false<br>security.headers.cache=false<br>security.headers.frame=false<br>security.headers.contentType=false<br>security.headers.hsts=all # none / domain / all<br>security.sessions=stateless # always / never / if_required / stateless<br>security.ignored=false</p><h1 id="DATASOURCE-DataSourceAutoConfiguration-amp-DataSourceProperties"><a href="#DATASOURCE-DataSourceAutoConfiguration-amp-DataSourceProperties" class="headerlink" title="DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)"></a>DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</h1><p>spring.datasource.name= # name of the data source<br>spring.datasource.initialize=true # populate using data.sql<br>spring.datasource.schema= # a schema (DDL) script resource reference<br>spring.datasource.data= # a data (DML) script resource reference<br>spring.datasource.platform= # the platform to use in the schema resource (schema-${platform}.sql)<br>spring.datasource.continueOnError=false # continue even if can’t be initialized<br>spring.datasource.separator=; # statement separator in SQL initialization scripts<br>spring.datasource.driverClassName= # JDBC Settings…<br>spring.datasource.url=<br>spring.datasource.username=<br>spring.datasource.password=<br>spring.datasource.max-active=100 # Advanced configuration…<br>spring.datasource.max-idle=8<br>spring.datasource.min-idle=8<br>spring.datasource.initial-size=10<br>spring.datasource.validation-query=<br>spring.datasource.test-on-borrow=false<br>spring.datasource.test-on-return=false<br>spring.datasource.test-while-idle=<br>spring.datasource.time-between-eviction-runs-millis=<br>spring.datasource.min-evictable-idle-time-millis=<br>spring.datasource.max-wait-millis=</p><h1 id="MONGODB-MongoProperties"><a href="#MONGODB-MongoProperties" class="headerlink" title="MONGODB (MongoProperties)"></a>MONGODB (MongoProperties)</h1><p>spring.data.mongodb.host= # the db host<br>spring.data.mongodb.port=27017 # the connection port (defaults to 27107)<br>spring.data.mongodb.uri=mongodb://localhost/test # connection URL<br>spring.data.mongo.repositories.enabled=true # if spring data repository support is enabled</p><h1 id="JPA-JpaBaseConfiguration-HibernateJpaAutoConfiguration"><a href="#JPA-JpaBaseConfiguration-HibernateJpaAutoConfiguration" class="headerlink" title="JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)"></a>JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</h1><p>spring.jpa.properties.*= # properties to set on the JPA connection<br>spring.jpa.openInView=true<br>spring.jpa.show-sql=true<br>spring.jpa.database-platform=<br>spring.jpa.database=<br>spring.jpa.generate-ddl=false # ignored by Hibernate, might be useful for other vendors<br>spring.jpa.hibernate.naming-strategy= # naming classname<br>spring.jpa.hibernate.ddl-auto= # defaults to create-drop for embedded dbs<br>spring.data.jpa.repositories.enabled=true # if spring data repository support is enabled</p><h1 id="SOLR-SolrProperties"><a href="#SOLR-SolrProperties" class="headerlink" title="SOLR (SolrProperties})"></a>SOLR (SolrProperties})</h1><p>spring.data.solr.host=<a href="http://127.0.0.1:8983/solr" target="_blank" rel="noopener">http://127.0.0.1:8983/solr</a><br>spring.data.solr.zkHost=<br>spring.data.solr.repositories.enabled=true # if spring data repository support is enabled</p><h1 id="ELASTICSEARCH-ElasticsearchProperties"><a href="#ELASTICSEARCH-ElasticsearchProperties" class="headerlink" title="ELASTICSEARCH (ElasticsearchProperties})"></a>ELASTICSEARCH (ElasticsearchProperties})</h1><p>spring.data.elasticsearch.cluster-name= # The cluster name (defaults to elasticsearch)<br>spring.data.elasticsearch.cluster-nodes= # The address(es) of the server node (comma-separated; if not specified starts a client node)<br>spring.data.elasticsearch.local=true # if local mode should be used with client nodes<br>spring.data.elasticsearch.repositories.enabled=true # if spring data repository support is enabled</p><h1 id="FLYWAY-FlywayProperties"><a href="#FLYWAY-FlywayProperties" class="headerlink" title="FLYWAY (FlywayProperties)"></a>FLYWAY (FlywayProperties)</h1><p>flyway.locations=classpath:db/migrations # locations of migrations scripts<br>flyway.schemas= # schemas to update<br>flyway.initVersion= 1 # version to start migration<br>flyway.prefix=V<br>flyway.suffix=.sql<br>flyway.enabled=true<br>flyway.url= # JDBC url if you want Flyway to create its own DataSource<br>flyway.user= # JDBC username if you want Flyway to create its own DataSource<br>flyway.password= # JDBC password if you want Flyway to create its own DataSource</p><h1 id="LIQUIBASE-LiquibaseProperties"><a href="#LIQUIBASE-LiquibaseProperties" class="headerlink" title="LIQUIBASE (LiquibaseProperties)"></a>LIQUIBASE (LiquibaseProperties)</h1><p>liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml<br>liquibase.contexts= # runtime contexts to use<br>liquibase.default-schema= # default database schema to use<br>liquibase.drop-first=false<br>liquibase.enabled=true</p><h1 id="JMX"><a href="#JMX" class="headerlink" title="JMX"></a>JMX</h1><p>spring.jmx.enabled=true # Expose MBeans from Spring</p><h1 id="RABBIT-RabbitProperties"><a href="#RABBIT-RabbitProperties" class="headerlink" title="RABBIT (RabbitProperties)"></a>RABBIT (RabbitProperties)</h1><p>spring.rabbitmq.host= # connection host<br>spring.rabbitmq.port= # connection port<br>spring.rabbitmq.addresses= # connection addresses (e.g. myhost:9999,otherhost:1111)<br>spring.rabbitmq.username= # login user<br>spring.rabbitmq.password= # login password<br>spring.rabbitmq.virtualhost=<br>spring.rabbitmq.dynamic=</p><h1 id="REDIS-RedisProperties"><a href="#REDIS-RedisProperties" class="headerlink" title="REDIS (RedisProperties)"></a>REDIS (RedisProperties)</h1><p>spring.redis.host=localhost # server host<br>spring.redis.password= # server password<br>spring.redis.port=6379 # connection port<br>spring.redis.pool.max-idle=8 # pool settings …<br>spring.redis.pool.min-idle=0<br>spring.redis.pool.max-active=8<br>spring.redis.pool.max-wait=-1</p><h1 id="ACTIVEMQ-ActiveMQProperties"><a href="#ACTIVEMQ-ActiveMQProperties" class="headerlink" title="ACTIVEMQ (ActiveMQProperties)"></a>ACTIVEMQ (ActiveMQProperties)</h1><p>spring.activemq.broker-url=tcp://localhost:61616 # connection URL<br>spring.activemq.user=<br>spring.activemq.password=<br>spring.activemq.in-memory=true # broker kind to create if no broker-url is specified<br>spring.activemq.pooled=false</p><h1 id="HornetQ-HornetQProperties"><a href="#HornetQ-HornetQProperties" class="headerlink" title="HornetQ (HornetQProperties)"></a>HornetQ (HornetQProperties)</h1><p>spring.hornetq.mode= # connection mode (native, embedded)<br>spring.hornetq.host=localhost # hornetQ host (native mode)<br>spring.hornetq.port=5445 # hornetQ port (native mode)<br>spring.hornetq.embedded.enabled=true # if the embedded server is enabled (needs hornetq-jms-server.jar)<br>spring.hornetq.embedded.serverId= # auto-generated id of the embedded server (integer)<br>spring.hornetq.embedded.persistent=false # message persistence<br>spring.hornetq.embedded.data-directory= # location of data content (when persistence is enabled)<br>spring.hornetq.embedded.queues= # comma separate queues to create on startup<br>spring.hornetq.embedded.topics= # comma separate topics to create on startup<br>spring.hornetq.embedded.cluster-password= # customer password (randomly generated by default)</p><h1 id="JMS-JmsProperties"><a href="#JMS-JmsProperties" class="headerlink" title="JMS (JmsProperties)"></a>JMS (JmsProperties)</h1><p>spring.jms.pub-sub-domain= # false for queue (default), true for topic</p><h1 id="SPRING-BATCH-BatchDatabaseInitializer"><a href="#SPRING-BATCH-BatchDatabaseInitializer" class="headerlink" title="SPRING BATCH (BatchDatabaseInitializer)"></a>SPRING BATCH (BatchDatabaseInitializer)</h1><p>spring.batch.job.names=job1,job2<br>spring.batch.job.enabled=true<br>spring.batch.initializer.enabled=true<br>spring.batch.schema= # batch schema to load</p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>spring.aop.auto=<br>spring.aop.proxy-target-class=</p><h1 id="FILE-ENCODING-FileEncodingApplicationListener"><a href="#FILE-ENCODING-FileEncodingApplicationListener" class="headerlink" title="FILE ENCODING (FileEncodingApplicationListener)"></a>FILE ENCODING (FileEncodingApplicationListener)</h1><p>spring.mandatory-file-encoding=false</p><h1 id="SPRING-SOCIAL-SocialWebAutoConfiguration"><a href="#SPRING-SOCIAL-SocialWebAutoConfiguration" class="headerlink" title="SPRING SOCIAL (SocialWebAutoConfiguration)"></a>SPRING SOCIAL (SocialWebAutoConfiguration)</h1><p>spring.social.auto-connection-views=true # Set to true for default connection views or false if you provide your own</p><h1 id="SPRING-SOCIAL-FACEBOOK-FacebookAutoConfiguration"><a href="#SPRING-SOCIAL-FACEBOOK-FacebookAutoConfiguration" class="headerlink" title="SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)"></a>SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)</h1><p>spring.social.facebook.app-id= # your application’s Facebook App ID<br>spring.social.facebook.app-secret= # your application’s Facebook App Secret</p><h1 id="SPRING-SOCIAL-LINKEDIN-LinkedInAutoConfiguration"><a href="#SPRING-SOCIAL-LINKEDIN-LinkedInAutoConfiguration" class="headerlink" title="SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)"></a>SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)</h1><p>spring.social.linkedin.app-id= # your application’s LinkedIn App ID<br>spring.social.linkedin.app-secret= # your application’s LinkedIn App Secret</p><h1 id="SPRING-SOCIAL-TWITTER-TwitterAutoConfiguration"><a href="#SPRING-SOCIAL-TWITTER-TwitterAutoConfiguration" class="headerlink" title="SPRING SOCIAL TWITTER (TwitterAutoConfiguration)"></a>SPRING SOCIAL TWITTER (TwitterAutoConfiguration)</h1><p>spring.social.twitter.app-id= # your application’s Twitter App ID<br>spring.social.twitter.app-secret= # your application’s Twitter App Secret</p><h1 id="SPRING-MOBILE-SITE-PREFERENCE-SitePreferenceAutoConfiguration"><a href="#SPRING-MOBILE-SITE-PREFERENCE-SitePreferenceAutoConfiguration" class="headerlink" title="SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)"></a>SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)</h1><p>spring.mobile.sitepreference.enabled=true # enabled by default</p><h1 id="SPRING-MOBILE-DEVICE-VIEWS-DeviceDelegatingViewResolverAutoConfiguration"><a href="#SPRING-MOBILE-DEVICE-VIEWS-DeviceDelegatingViewResolverAutoConfiguration" class="headerlink" title="SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)"></a>SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)</h1><p>spring.mobile.devicedelegatingviewresolver.enabled=true # disabled by default<br>spring.mobile.devicedelegatingviewresolver.normalPrefix=<br>spring.mobile.devicedelegatingviewresolver.normalSuffix=<br>spring.mobile.devicedelegatingviewresolver.mobilePrefix=mobile/<br>spring.mobile.devicedelegatingviewresolver.mobileSuffix=<br>spring.mobile.devicedelegatingviewresolver.tabletPrefix=tablet/<br>spring.mobile.devicedelegatingviewresolver.tabletSuffix=</p><hr><p>ACTUATOR PROPERTIES</p><hr><h1 id="MANAGEMENT-HTTP-SERVER-ManagementServerProperties"><a href="#MANAGEMENT-HTTP-SERVER-ManagementServerProperties" class="headerlink" title="MANAGEMENT HTTP SERVER (ManagementServerProperties)"></a>MANAGEMENT HTTP SERVER (ManagementServerProperties)</h1><p>management.port= # defaults to ‘server.port’<br>management.address= # bind to a specific NIC<br>management.contextPath= # default to ‘/‘</p><h1 id="ENDPOINTS-AbstractEndpoint-subclasses"><a href="#ENDPOINTS-AbstractEndpoint-subclasses" class="headerlink" title="ENDPOINTS (AbstractEndpoint subclasses)"></a>ENDPOINTS (AbstractEndpoint subclasses)</h1><p>endpoints.autoconfig.id=autoconfig<br>endpoints.autoconfig.sensitive=true<br>endpoints.autoconfig.enabled=true<br>endpoints.beans.id=beans<br>endpoints.beans.sensitive=true<br>endpoints.beans.enabled=true<br>endpoints.configprops.id=configprops<br>endpoints.configprops.sensitive=true<br>endpoints.configprops.enabled=true<br>endpoints.configprops.keys-to-sanitize=password,secret<br>endpoints.dump.id=dump<br>endpoints.dump.sensitive=true<br>endpoints.dump.enabled=true<br>endpoints.env.id=env<br>endpoints.env.sensitive=true<br>endpoints.env.enabled=true<br>endpoints.health.id=health<br>endpoints.health.sensitive=false<br>endpoints.health.enabled=true<br>endpoints.info.id=info<br>endpoints.info.sensitive=false<br>endpoints.info.enabled=true<br>endpoints.metrics.id=metrics<br>endpoints.metrics.sensitive=true<br>endpoints.metrics.enabled=true<br>endpoints.shutdown.id=shutdown<br>endpoints.shutdown.sensitive=true<br>endpoints.shutdown.enabled=false<br>endpoints.trace.id=trace<br>endpoints.trace.sensitive=true<br>endpoints.trace.enabled=true</p><h1 id="MVC-ONLY-ENDPOINTS"><a href="#MVC-ONLY-ENDPOINTS" class="headerlink" title="MVC ONLY ENDPOINTS"></a>MVC ONLY ENDPOINTS</h1><p>endpoints.jolokia.path=jolokia<br>endpoints.jolokia.sensitive=true<br>endpoints.jolokia.enabled=true # when using Jolokia<br>endpoints.error.path=/error</p><h1 id="JMX-ENDPOINT-EndpointMBeanExportProperties"><a href="#JMX-ENDPOINT-EndpointMBeanExportProperties" class="headerlink" title="JMX ENDPOINT (EndpointMBeanExportProperties)"></a>JMX ENDPOINT (EndpointMBeanExportProperties)</h1><p>endpoints.jmx.enabled=true<br>endpoints.jmx.domain= # the JMX domain, defaults to ‘org.springboot’<br>endpoints.jmx.unique-names=false<br>endpoints.jmx.enabled=true<br>endpoints.jmx.staticNames=</p><h1 id="JOLOKIA-JolokiaProperties"><a href="#JOLOKIA-JolokiaProperties" class="headerlink" title="JOLOKIA (JolokiaProperties)"></a>JOLOKIA (JolokiaProperties)</h1><p>jolokia.config.*= # See Jolokia manual</p><h1 id="REMOTE-SHELL"><a href="#REMOTE-SHELL" class="headerlink" title="REMOTE SHELL"></a>REMOTE SHELL</h1><p>shell.auth=simple # jaas, key, simple, spring<br>shell.command-refresh-interval=-1<br>shell.command-path-pattern= # classpath<em>:/commands/**, classpath</em>:/crash/commands/*<em><br>shell.config-path-patterns= # classpath</em>:/crash/*<br>shell.disabled-plugins=false # don’t expose plugins<br>shell.ssh.enabled= # ssh settings …<br>shell.ssh.keyPath=<br>shell.ssh.port=<br>shell.telnet.enabled= # telnet settings …<br>shell.telnet.port=<br>shell.auth.jaas.domain= # authentication settings …<br>shell.auth.key.path=<br>shell.auth.simple.user.name=<br>shell.auth.simple.user.password=<br>shell.auth.spring.roles=</p><h1 id="GIT-INFO"><a href="#GIT-INFO" class="headerlink" title="GIT INFO"></a>GIT INFO</h1><p>spring.git.properties= # resource ref to generated git info properties file</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-boot-默认配置项&quot;&gt;&lt;a href=&quot;#spring-boot-默认配置项&quot; class=&quot;headerlink&quot; title=&quot;spring boot 默认配置项&quot;&gt;&lt;/a&gt;spring boot 默认配置项&lt;/h1&gt;&lt;p&gt;COMMON SPR
      
    
    </summary>
    
      <category term="springboot" scheme="https://dongcarzy.github.io/categories/springboot/"/>
    
    
      <category term="java" scheme="https://dongcarzy.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://dongcarzy.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>spring-session</title>
    <link href="https://dongcarzy.github.io/2018/11/19/springboot/spring-session/"/>
    <id>https://dongcarzy.github.io/2018/11/19/springboot/spring-session/</id>
    <published>2018-11-19T05:57:54.000Z</published>
    <updated>2018-11-19T10:09:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-session"><a href="#spring-session" class="headerlink" title="spring-session"></a>spring-session</h1><p>Spring Session提供了用于管理用户会话信息的API和实现。</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p><code>spring session</code> 使得支持集群会话变得很容易,而不依赖任何特定的应用程序容器,并且还提供以下信息</p><ul><li><code>HttpSession</code> - 允许应用程序容器(Tomcat) 中的 <code>HttpSession</code>, 在<code>RESTFUL</code>模式中<code>SpringSession</code>允许在标头中提供<code>SessionId</code></li><li><code>WebSocket</code> - 提供在接收<code>WebSocket</code>消息时保持<code>HttpSession</code>活动的能力</li><li><code>WebSession</code> - 允许以与应用程序容器无关的方式替换<code>SpringWebFlux</code>的<code>WebSession</code></li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li><code>springSession core</code> -  提供<code>springSession</code>功能的核心API</li><li><code>springSession Data Redis</code> -  提供由<code>Redis</code>和配置支持的<code>SessionRepository</code>和<code>ReactiveSessionRepository</code> - 实现</li><li><code>SpringSession JDBC</code> -  提供由<code>关系数据库</code>和配置支持的 <code>SessionRepository</code>实现</li><li><code>Spring Session Hazelcast</code> -   提供由<code>Hazelcast</code>和配置支持的 <code>SessionRepository</code>实现</li></ul><h3 id="Spring-Session"><a href="#Spring-Session" class="headerlink" title="Spring Session"></a>Spring Session</h3><p><code>Spring Session</code> 中透明的继承了<code>HttpSession</code>, 我们可以简单粗暴的使用 <code>SpringSession</code>替换我们传统的<code>HttpSession</code>.</p><h3 id="SpringSession优势"><a href="#SpringSession优势" class="headerlink" title="SpringSession优势"></a>SpringSession优势</h3><ul><li>方便做集群会话,儿不限制使用特定的应用容器</li><li><code>SpringSession</code> 支持在单个浏览器实例中管理多个用户会话</li><li>在<code>RESTFUL</code>模式中<code>SpringSession</code>允许在标头中提供<code>SessionId</code></li></ul><h3 id="SpringSession继承"><a href="#SpringSession继承" class="headerlink" title="SpringSession继承"></a>SpringSession继承</h3><ul><li>redis</li><li>Pivotal Gemfire</li><li>JDBC</li><li>Mongo</li><li>Hazelcast</li></ul><h4 id="HttpSession-with-Redis"><a href="#HttpSession-with-Redis" class="headerlink" title="HttpSession with Redis"></a>HttpSession with Redis</h4><p>这是一个简单的案例,具体配置可以参考官网, 一下是一个spring的配置类,主要做了两件事</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableRedisHttpSession</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LettuceConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LettuceConnectionFactory(); </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>@EnableRedisHttpSession</code> 创建一个名为<code>springSessionRepositoryFilter</code>的过滤器,负责替换<code>HttpSession</code>变为<code>SpringSession</code>的实现,并且启动<code>Redis</code>对 <code>session</code>管理的支持</li><li>创建<code>RedisConnectionFactory</code>,它负责将<code>SpringSession</code>连接到 <code>Redis Server</code>, 此时的配置采用的默认配置, 即<code>localhost:6379</code>. <blockquote><p><code>spring data redis</code> 默认支持 <code>Lettuce</code> and <code>Jedis</code>等 <code>Redis</code>连接工具</p></blockquote></li></ol><h3 id="HttpSession-是如何工作得"><a href="#HttpSession-是如何工作得" class="headerlink" title="HttpSession 是如何工作得"></a>HttpSession 是如何工作得</h3><h4 id="SessionRepositoryRequestWrapper"><a href="#SessionRepositoryRequestWrapper" class="headerlink" title="SessionRepositoryRequestWrapper"></a>SessionRepositoryRequestWrapper</h4><p>我们知道,我们在操作的<code>HttpSession</code>和<code>HttpServletRequest</code>是两个接口,也正是因为这样,出现了 <code>SessionRepositoryRequestWrapper</code>对象,它继承于<code>HttpServletRequestWrapper</code>, 并重写了 <code>getSession</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionRepositoryRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SessionRepositoryRequestWrapper</span><span class="params">(HttpServletRequest original)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>(original);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> HttpSession <span class="title">getSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> getSession(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> HttpSession <span class="title">getSession</span><span class="params">(<span class="keyword">boolean</span> createNew)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// create an HttpSession implementation from Spring Session</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... other methods delegate to the original HttpServletRequest ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回<code>HttpSession</code>都被覆盖了。所有其他方法都由<code>HttpServletRequestWrapper</code>并简单地将其委托给原来的<code>HttpServletRequest</code>执行。</p><h4 id="SessionRepositoryFilter"><a href="#SessionRepositoryFilter" class="headerlink" title="SessionRepositoryFilter"></a>SessionRepositoryFilter</h4><p>下面是部分的伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionRepositoryFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span>&#123;</span><br><span class="line">                HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class="line">                SessionRepositoryRequestWrapper customRequest =</span><br><span class="line">                        <span class="keyword">new</span> SessionRepositoryRequestWrapper(httpRequest);</span><br><span class="line"></span><br><span class="line">                chain.doFilter(customRequest, response, chain);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>SessionRepositoryFilter</code>过滤器,在这里去替换 <code>HttpServletRequest</code> 为 <code>SessionRepositoryRequestWrapper</code>,注意的是, <code>Spring Session</code>的过滤器<code>SessionRepositoryFilter</code>必须放在与<code>HttpSession</code> 交互的任何东西前面.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-session&quot;&gt;&lt;a href=&quot;#spring-session&quot; class=&quot;headerlink&quot; title=&quot;spring-session&quot;&gt;&lt;/a&gt;spring-session&lt;/h1&gt;&lt;p&gt;Spring Session提供了用于管理用
      
    
    </summary>
    
      <category term="springboot" scheme="https://dongcarzy.github.io/categories/springboot/"/>
    
    
      <category term="java" scheme="https://dongcarzy.github.io/tags/java/"/>
    
      <category term="spring" scheme="https://dongcarzy.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>上传 Docker Image</title>
    <link href="https://dongcarzy.github.io/2017/11/20/docker/%E4%B8%8A%E4%BC%A0image/"/>
    <id>https://dongcarzy.github.io/2017/11/20/docker/上传image/</id>
    <published>2017-11-20T11:13:57.000Z</published>
    <updated>2018-11-16T02:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上传-Docker-Image"><a href="#上传-Docker-Image" class="headerlink" title="上传 Docker Image"></a>上传 Docker Image</h1><blockquote><p>再传之前我们需要建立在自己的私有仓库，不然就上传到docker仓库中心了</p></blockquote><h2 id="自己server服务器地址"><a href="#自己server服务器地址" class="headerlink" title="自己server服务器地址"></a>自己server服务器地址</h2><p>myServer = localhost   下文中<code>localhost`</code>替换成自己的服务器地址即可</p><h2 id="建立自己的docker仓库"><a href="#建立自己的docker仓库" class="headerlink" title="建立自己的docker仓库"></a>建立自己的docker仓库</h2><blockquote><p>这里我用的是 Nexus3,8001端口是提供给image上传下载用的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:8081 -p 8001:8001 sonatype/nexus3</span><br></pre></td></tr></table></figure><blockquote><p>默认的仓库会将 资源放在 /var/lib/docker/,随着容器的删除数据也会消失，需要挂载，具体看镜像介绍</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://hub.docker.com/r/sonatype/nexus3/</span></span><br></pre></td></tr></table></figure><h3 id="登陆-8000-端口后，进入设置，建立自己的-docker仓库。"><a href="#登陆-8000-端口后，进入设置，建立自己的-docker仓库。" class="headerlink" title="登陆 8000 端口后，进入设置，建立自己的 docker仓库。"></a>登陆 8000 端口后，进入设置，建立自己的 docker仓库。</h3><p>Repository -&gt; repositories -&gt; Create repository -&gt; docker(hosted)</p><blockquote><p>name 随便， HTTP或者HTTPS，根具需求填写，我这里勾选HTTP，端口协商8001，与上面暴露出来的端口保持一致，直接save就行了</p></blockquote><h3 id="创建一个Dockerfile-用官网的demo"><a href="#创建一个Dockerfile-用官网的demo" class="headerlink" title="创建一个Dockerfile.用官网的demo"></a>创建一个Dockerfile.用官网的demo</h3><p>创建一个空目录。将目录（cd）更改到新目录中，创建一个文件 Dockerfile(dockerfile编写可参考官方文档)</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use an official Python runtime as a parent image</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">2.7</span>-slim</span><br><span class="line"><span class="comment"># Set the working directory to /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="bash"><span class="comment"># Copy the current directory contents into the container at /app</span></span></span><br><span class="line"><span class="bash">ADD . /app</span></span><br><span class="line"><span class="bash"><span class="comment"># Install any needed packages specified in requirements.txt</span></span></span><br><span class="line"><span class="bash">RUN pip install -r requirements.txt</span></span><br><span class="line"><span class="bash"><span class="comment"># Make port 80 available to the world outside this container</span></span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br><span class="line"><span class="bash"><span class="comment"># Define environment variable</span></span></span><br><span class="line"><span class="bash">ENV NAME World</span></span><br><span class="line"><span class="bash"><span class="comment"># Run app.py when the container launches</span></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"python"</span>, <span class="string">"app.py"</span>]</span></span><br></pre></td></tr></table></figure><p>创建应用体（dockerfile中提及的两个文件）requirements.txt和app.py，并把它们与同一文件夹中Dockerfile。</p><h3 id="创建requirements-txt"><a href="#创建requirements-txt" class="headerlink" title="创建requirements.txt"></a>创建requirements.txt</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flask</span><br><span class="line">Redis</span><br></pre></td></tr></table></figure><h3 id="创建app-py"><a href="#创建app-py" class="headerlink" title="创建app.py"></a>创建app.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis, RedisError</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to Redis</span></span><br><span class="line">redis = Redis(host=<span class="string">"redis"</span>, db=<span class="number">0</span>, socket_connect_timeout=<span class="number">2</span>, socket_timeout=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        visits = redis.incr(<span class="string">"counter"</span>)</span><br><span class="line">    <span class="keyword">except</span> RedisError:</span><br><span class="line">        visits = <span class="string">"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;"</span></span><br><span class="line"></span><br><span class="line">    html = <span class="string">"&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;"</span> \</span><br><span class="line">           <span class="string">"&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;"</span> \</span><br><span class="line">           <span class="string">"&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;"</span></span><br><span class="line">    <span class="keyword">return</span> html.format(name=os.getenv(<span class="string">"NAME"</span>, <span class="string">"world"</span>), hostname=socket.gethostname(), visits=visits)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><h2 id="构建image"><a href="#构建image" class="headerlink" title="构建image"></a>构建image</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyhello .</span><br></pre></td></tr></table></figure><blockquote><p>-t 为你镜像打repository，默认tag为latest(friendlyhello:latest), . 表示存储位置的路径，具体的可以看  docker build –help. 通过 <code>docker images</code> 就可以看到刚刚的镜像了</p></blockquote><h2 id="登陆自己的仓库"><a href="#登陆自己的仓库" class="headerlink" title="登陆自己的仓库"></a>登陆自己的仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dokcer login -u <span class="variable">$&#123;name&#125;</span> -p <span class="variable">$&#123;passwd&#125;</span> <span class="variable">$&#123;server地址&#125;</span></span><br><span class="line">我的是</span><br><span class="line">docker login -u admin -p admin123 <span class="variable">$&#123;myServer&#125;</span>:8001</span><br><span class="line">eg: docker login -u admin -p admin123 localhost:8001</span><br></pre></td></tr></table></figure><p>如果登陆失败，则你需要将你得server地址加入 daemon 文档（即配置镜像加速的位置）， (vi /etc/docker/daemon.json)，比如 docker for windows, 右键右下角docker，选择settting-&gt;daemon -&gt; Insercure registries 配置上你服务器的地址加端口即可。（Registry mirrors 就是你配置镜像加速的位置了）</p><h2 id="make-tag"><a href="#make-tag" class="headerlink" title="make tag"></a>make tag</h2><p>给镜像打上tag， docker tag –help 可查看详细用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式 : docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]   docker tag image username/repository:tag</span><br><span class="line">docker tag friendlyhello:latest localhost:8001/<span class="built_in">test</span>:1.2</span><br><span class="line">docker push localhost:8001/<span class="built_in">test</span>:1.2</span><br></pre></td></tr></table></figure><p>至此，登录你的nexus3,在docker仓库就可以看见一个名字为 test,版本为1.2的镜像了</p><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>执行 <code>docker search localhost/test:1.2</code> 看是否存在<br>删除本地已经存在的镜像 <code>docker rmi localhost/test:1.2</code><br>执行 <code>docker run -d -p 8888:80 localhost/test:1.2</code>, 可观察到下载的状况<br>浏览器 访问 8888端口</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;上传-Docker-Image&quot;&gt;&lt;a href=&quot;#上传-Docker-Image&quot; class=&quot;headerlink&quot; title=&quot;上传 Docker Image&quot;&gt;&lt;/a&gt;上传 Docker Image&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;再传之前我
      
    
    </summary>
    
      <category term="docker" scheme="https://dongcarzy.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://dongcarzy.github.io/tags/docker/"/>
    
      <category term="入门" scheme="https://dongcarzy.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfiles的最佳实践</title>
    <link href="https://dongcarzy.github.io/2017/11/16/docker/makeDockerfile/"/>
    <id>https://dongcarzy.github.io/2017/11/16/docker/makeDockerfile/</id>
    <published>2017-11-16T11:13:57.000Z</published>
    <updated>2018-11-16T09:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写Dockerfiles的最佳做法"><a href="#编写Dockerfiles的最佳做法" class="headerlink" title="编写Dockerfiles的最佳做法"></a>编写Dockerfiles的最佳做法</h1><p>Docker可以通过从Dockerfile包含所有命令的文本文件中读取指令来自动构建图像 ，以便构建给定图像所需的顺序。</p><h2 id="一般准则和建议"><a href="#一般准则和建议" class="headerlink" title="一般准则和建议"></a>一般准则和建议</h2><h3 id="容器应该是精简的"><a href="#容器应该是精简的" class="headerlink" title="容器应该是精简的"></a>容器应该是精简的</h3><h3 id="使用-dockerignore文件"><a href="#使用-dockerignore文件" class="headerlink" title="使用.dockerignore文件"></a>使用.dockerignore文件</h3><p>在大多数情况下，最好将每个Dockerfile放在一个空目录中。然后，仅添加构建Dockerfile所需的文件。为了增加构建的性能，您可以通过.dockerignore向该目录添加文件来排除文件和目录。此文件支持类似于.gitignore文件的排除模式。</p><h4 id="避免安装不必要的包"><a href="#避免安装不必要的包" class="headerlink" title="避免安装不必要的包"></a>避免安装不必要的包</h4><p>为了减少复杂性，依赖性，文件大小和构建时间，您应该避免安装额外的或不必要的包</p><h4 id="容器单纯化"><a href="#容器单纯化" class="headerlink" title="容器单纯化"></a>容器单纯化</h4><p>将应用程序分解成多个容器可以更轻松地水平扩展和重新使用容器。例如，Web应用程序堆栈可能由三个独立的容器组成，每个容器具有自己独特的映像，以解耦的方式管理Web应用程序，数据库和内存中缓存。尽可能地判断容器是否干净，模块化。<br>如果容器相互依赖，则可以使用Docker容器网络 来确保这些容器可以通信。</p><h4 id="最小化层数"><a href="#最小化层数" class="headerlink" title="最小化层数"></a>最小化层数</h4><p>你需要找到<code>dockerfile</code> 可用性(长期可维护性)之间的平衡,并最大限度地减少其使用的层数。</p><h4 id="排序多行参数"><a href="#排序多行参数" class="headerlink" title="排序多行参数"></a>排序多行参数</h4><p>只要有可能，通过以字母数字排序多行参数来缓解以后的更改。这将帮助您避免重复的包，并使列表更容易更新。这也使得PR更容易阅读和审查。在反斜杠（<code>\</code>）之前添加一个空格。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">  bzr \</span></span><br><span class="line"><span class="bash">  cvs \</span></span><br><span class="line"><span class="bash">  git \</span></span><br><span class="line"><span class="bash">  mercurial \</span></span><br><span class="line"><span class="bash">  subversion</span></span><br></pre></td></tr></table></figure><h4 id="构建缓存"><a href="#构建缓存" class="headerlink" title="构建缓存"></a>构建缓存</h4><p>在构建映像的过程中，Docker将Dockerfile按照指定的顺序逐步执行每个指令。随着每条指令的检查，Docker将在其缓存中查找可以重用的现有映像，而不是创建一个新的（重复）映像。用<code>--no-cache=true</code>该<code>docker build</code>命令上,将不会使用缓存<br>何时会找到匹配的<code>image</code></p><ul><li>从已经在缓存中的父图像开始，将下一条指令与从该基础图像导出的所有子图像进行比较，以查看其中一个是否使用完全相同的指令构建。如果没有，则缓存无效。</li><li>在大多数情况下，简单地比较Dockerfile与其中一个子图像的指令是足够的。但是，某些说明需要更多的检查和解释。</li><li>对于ADD和COPY指令，检查图像中文件的内容，并为每个文件计算校验和。在这些校验和中不考虑文件的最后修改和最后访问的时间。在缓存查找期间，将校验和与现有映像中的校验和进行比较。如果文件（如内容和元数据）中有任何变化，则缓存无效。</li><li>除了ADD和COPY命令之外，缓存检查不会查看容器中的文件来确定缓存匹配。例如，当处理RUN apt-get -y update命令时，将不会检查在容器中更新的文件以确定是否存在高速缓存命中。在这种情况下，只有命令字符串本身将用于查找匹配。</li></ul><p>一旦缓存无效，所有后续Dockerfile命令将生成新的映像，并且高速缓存将不被使用。</p><h3 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h3><p>[x] FROM<br>[x] LABEL<br>[x] RUN<br>[x] APT-GET<br>[x] USING PIPES<br>[x] CMD<br>[x] EXPOSE<br>[x] ENV<br>[x] ADD or COPY<br>[x] ENTRYPOINT<br>[x] VOLUME<br>[x] USER<br>[x] WORKDIR<br>[x] ONBUILD</p><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>只要有可能，使用现有的官方存储库作为您的图像的基础。</p><h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>您可以为图像添加标签,<code>(空格)</code>, <code>&quot;</code> 等字符需要转义</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set one or more individual labels</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> com.example.version=<span class="string">"0.0.1-beta"</span></span></span><br><span class="line"><span class="bash">LABEL vendor=<span class="string">"ACME Incorporated"</span></span></span><br><span class="line"><span class="bash">LABEL com.example.release-date=<span class="string">"2015-02-12"</span></span></span><br><span class="line"><span class="bash">LABEL com.example.version.is-production=<span class="string">""</span></span></span><br><span class="line"><span class="bash"><span class="comment"># Set multiple labels on one line</span></span></span><br><span class="line"><span class="bash">LABEL com.example.version=<span class="string">"0.0.1-beta"</span> com.example.release-date=<span class="string">"2015-02-12"</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Set multiple labels at once, using line-continuation characters to break long lines</span></span></span><br><span class="line"><span class="bash">LABEL vendor=ACME\ Incorporated \</span></span><br><span class="line"><span class="bash">      com.example.is-beta= \</span></span><br><span class="line"><span class="bash">      com.example.is-production=<span class="string">""</span> \</span></span><br><span class="line"><span class="bash">      com.example.version=<span class="string">"0.0.1-beta"</span> \</span></span><br><span class="line"><span class="bash">      com.example.release-date=<span class="string">"2015-02-12"</span></span></span><br></pre></td></tr></table></figure><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>为了使您Dockerfile更易于阅读，可理解和可维护，可以将RUN多个行分隔开，用反斜杠分隔的长整型或复杂语句。</p><h4 id="APT-GET"><a href="#APT-GET" class="headerlink" title="APT-GET"></a>APT-GET</h4><p>可能最常见的用例RUN是应用程序<code>apt-get</code>。该 <code>RUN apt-get</code>命令用来安装软件包<br>避免，<code>RUN apt-get upgrade</code>或者<code>dist-upgrade</code>父系image中的许多“必需”程序包将无法在非特权的容器内升级</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">        package-bar \</span></span><br><span class="line"><span class="bash">        package-baz \</span></span><br><span class="line"><span class="bash">        package-foo</span></span><br></pre></td></tr></table></figure><p>apt-get update在RUN语句中单独使用会导致缓存问题和后续apt-get install指令失败,例如:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="bash">RUN apt-get install -y curl</span></span><br></pre></td></tr></table></figure><p>构建图像后，所有层都在Docker缓存中。假设你以后apt-get install通过添加额外的包来修改：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="bash">RUN apt-get install -y curl nginx</span></span><br></pre></td></tr></table></figure><p>Docker将初始化和修改的指令看作是相同的，并重用先前步骤中的缓存。结果apt-get update是不执行，因为构建使用缓存的版本。因为apt-get update没有运行，你的构建可能会有一个过时的版本curl和nginx 包。<br>使用<code>RUN apt-get update &amp;&amp; apt-get install -y</code>确保您的<code>Docker文件</code>安装最新的软件包版本，无需进一步的编码或手动干预。这种技术被称为<code>“缓存破坏”</code>。您还可以通过指定软件包版本来实现缓存清除。这被称为版本固定，版本固定强制构建以检索特定版本，而不管缓存中有什么。这种技术还可以减少由于所需软件包中意外的更改导致的故障。例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">        package-bar \</span></span><br><span class="line"><span class="bash">        package-baz \</span></span><br><span class="line"><span class="bash">        package-foo=1.3.*</span></span><br></pre></td></tr></table></figure><p>下是一个格式正确的RUN指导，显示所有apt-get</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">    aufs-tools \</span></span><br><span class="line"><span class="bash">    automake \</span></span><br><span class="line"><span class="bash">    build-essential \</span></span><br><span class="line"><span class="bash">    curl \</span></span><br><span class="line"><span class="bash">    dpkg-sig \</span></span><br><span class="line"><span class="bash">    libcap-dev \</span></span><br><span class="line"><span class="bash">    libsqlite3-dev \</span></span><br><span class="line"><span class="bash">    mercurial \</span></span><br><span class="line"><span class="bash">    reprepro \</span></span><br><span class="line"><span class="bash">    ruby1.9.1 \</span></span><br><span class="line"><span class="bash">    ruby1.9.1-dev \</span></span><br><span class="line"><span class="bash">    s3cmd=1.1.* \</span></span><br><span class="line"><span class="bash"> &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure><h4 id="USING-PIPES"><a href="#USING-PIPES" class="headerlink" title="USING PIPES"></a>USING PIPES</h4><p>一些RUN命令取决于使用管道字符（<code>|</code>）将一个命令的输出管道传输到另一个命令的能力</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> wget -O - https://some.site | wc -l &gt; /number</span></span><br></pre></td></tr></table></figure><ul><li>Docker使用/bin/sh -c解释器执行这些命令，该解释器仅评估管道中最后一个操作的退出代码以确定成功。在上面的示例中，只要wc -l命令成功，即使wget命令失败，此构建步骤也可以成功并生成新映像。</li><li>您希望命令由于管道中任何阶段的错误而失败，请先set -o pipefail &amp;&amp;确定一个意外的错误会阻止构建从无意中成功。</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -o pipefail &amp;&amp; wget -O - https://some.site | wc -l &gt; /number</span></span><br></pre></td></tr></table></figure><blockquote><p><code>注意</code>：并非所有的shell都支持该<code>-o pipefail</code>选项。在这种情况下（例如<code>dash shell</code>，它是基于<code>Debian</code>的映像的默认<code>shell</code>），请考虑使用<code>exec</code>形式<code>RUN</code>来显式选择一个支持该<code>pipefail</code>选项的shell 。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"set -o pipefail &amp;&amp; wget -O - https://some.site | wc -l &gt; /number"</span>]</span></span><br></pre></td></tr></table></figure><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p><code>CMD</code>指令应用于运行图像包含的软件以及任何参数。<br>如果图像用于服务，例如Apache和Rails，则可以运行类似的操作<code>CMD [&quot;apache2&quot;,&quot;-DFOREGROUND&quot;]</code>。这种形式的指令是推荐用于任何基于服务的图像。<br><code>CMD</code>应该给出一个交互式的<code>shell</code>，比如<code>bash</code>，<code>python</code>和<code>perl</code>。例如，<code>CMD [&quot;perl&quot;, &quot;-de0&quot;]</code>，<code>CMD [&quot;python&quot;]</code>，或 <code>CMD [“php”, “-a”]</code>。使用此表单意味着当您执行类似的操作时<code>docker run -it python</code>，您将被放入可用的<code>shell</code>中，随时可以使用。</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p><code>EXPOSE</code>指令指示容器将侦听连接的端口.例如，包含Apache Web服务器EXPOSE 80的映像将使用，而包含MongoDB的映像将使用EXPOSE 27017等等</p><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>为了使新的软件更容易运行，您可以使用它<code>ENV</code>来更新<code>PATH</code>容器安装的软件的 环境变量。例如，<code>ENV PATH /usr/local/nginx/bin:$PATH</code>将确保<code>CMD [“nginx”]</code> 只是工作。<br>该ENV指令对于提供特定于要集中化的服务的必需环境变量也很有用，例如Postgres’s PGDATA。<br>最后，ENV也可以用来设置常用的版本号，使得版本颠覆更容易维</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> PG_MAJOR <span class="number">9.3</span></span><br><span class="line"><span class="keyword">ENV</span> PG_VERSION <span class="number">9.3</span>.<span class="number">4</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SL http://example.com/postgres-<span class="variable">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span></span><br><span class="line"><span class="bash">ENV PATH /usr/<span class="built_in">local</span>/postgres-<span class="variable">$PG_MAJOR</span>/bin:<span class="variable">$PATH</span></span></span><br></pre></td></tr></table></figure><h4 id="ADD-or-COPY"><a href="#ADD-or-COPY" class="headerlink" title="ADD or COPY"></a>ADD or COPY</h4><p><code>ADD</code>  和 <code>COPY</code> 的功能有点类似,但是一般优先采用<code>COPY</code>, 因为它更加透明.<br>COPY只支持将本地文件基本复制到容器中，同时ADD具有一些不是立即显而易见的功能（如本地仅提取和远程URL支持）。因此，最好的用途ADD是将本地<code>tar</code>文件自动提取到图像中，如同 <code>ADD rootfs.tar.xz /</code>。<br>因为图像大小很重要，ADD因此强烈不鼓励使用远程URL提取包; 你应该使用curl或wget替代。这样，您可以删除在解压后不再需要的文件，而不必在图像中添加另一个图层.</p><h5 id="错误实例"><a href="#错误实例" class="headerlink" title="错误实例"></a>错误实例</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> http://example.com/big.tar.xz /usr/src/things/</span></span><br><span class="line"><span class="bash">RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things</span></span><br><span class="line"><span class="bash">RUN make -C /usr/src/things all</span></span><br></pre></td></tr></table></figure><h5 id="正确实例"><a href="#正确实例" class="headerlink" title="正确实例"></a>正确实例</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/things \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -SL http://example.com/big.tar.xz \</span></span><br><span class="line"><span class="bash">    | tar -xJC /usr/src/things \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/things all</span></span><br></pre></td></tr></table></figure><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>该VOLUME指令应用于公开您的docker容器创建的任何数据库存储区域，配置存储或文件/文件夹。强烈建议您使用图像VOLUME的任何可变和/或用户可维修的部分。</p><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>为了清晰可靠，您应该永远为您使用绝对路径 WORKDIR。此外，您应该使用，WORKDIR而不是增加的说明，如RUN cd … &amp;&amp; do-something难以阅读，排除故障和维护</p><h4 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h4><p><code>ONBUILD</code>命令在当前<code>Dockerfile</code>构建完成后执行。 ONBUILD在导出FROM当前图像的任何子图像中执行。将该ONBUILD命令视为父母Dockerfile给予孩子的指示Dockerfile。<br>Docker构建<code>ONBUILD</code>在子节点<code>Dockerfile</code>中的任何命令之前执行命令。<br>放入ADD或COPY放入时要小心ONBUILD。如果新版本的上下文缺少添加的资源，“onbuild”映像将会严重失败。如上所述，添加单独的标签将有助于通过允许Dockerfile作者做出选择来缓解这一点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编写Dockerfiles的最佳做法&quot;&gt;&lt;a href=&quot;#编写Dockerfiles的最佳做法&quot; class=&quot;headerlink&quot; title=&quot;编写Dockerfiles的最佳做法&quot;&gt;&lt;/a&gt;编写Dockerfiles的最佳做法&lt;/h1&gt;&lt;p&gt;Docker
      
    
    </summary>
    
      <category term="docker" scheme="https://dongcarzy.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://dongcarzy.github.io/tags/docker/"/>
    
      <category term="入门" scheme="https://dongcarzy.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker Swarm</title>
    <link href="https://dongcarzy.github.io/2017/11/14/docker/Docker%20Swarm/"/>
    <id>https://dongcarzy.github.io/2017/11/14/docker/Docker Swarm/</id>
    <published>2017-11-14T08:13:57.000Z</published>
    <updated>2018-11-16T03:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h1><blockquote><p>A swarm is a group of machines that are running Docker and joined into a cluster. After that has happened, you continue to run the Docker commands you’re used to, but now they are executed on a cluster by a <code>swarm manager</code>. The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as <code>nodes</code>.</p></blockquote><h2 id="Swarm是什么"><a href="#Swarm是什么" class="headerlink" title="Swarm是什么"></a>Swarm是什么</h2><blockquote><p>通过把多个Docker Engine聚集在一起，形成一个大的docker-engine，对外提供容器的集群服务。同时这个集群对外提供Swarm API，用户可以像使用Docker Engine一样使用Docker集群。</p></blockquote><p><img src="Docker Swarm/docker searm.jpg" alt="docker searm"></p><h2 id="Swarm-特点"><a href="#Swarm-特点" class="headerlink" title="Swarm 特点"></a>Swarm 特点</h2><ol><li>对外以Docker API接口呈现，这样带来的好处是，如果现有系统使用Docker Engine，则可以平滑将Docker Engine切到Swarm上，无需改动现有系统。</li><li>Swarm对用户来说，之前使用Docker的经验可以继承过来。非常容易上手，学习成本和二次开发成本都比较低。同时Swarm本身专注于Docker集群管理，非常轻量，占用资源也非常少。</li><li><code>Batteries included but swappable</code>，简单说，就是插件化机制，Swarm中的各个模块都抽象出了API，可以根据自己一些特点进行定制实现。</li><li>Swarm自身对Docker命令参数支持的比较完善，Swarm目前与Docker是同步发布的。Docker的新功能，都会第一时间在Swarm中体现。</li></ol><hr><h2 id="Swarm框架结构"><a href="#Swarm框架结构" class="headerlink" title="Swarm框架结构"></a>Swarm框架结构</h2><p><img src="Docker Swarm/swarm架构.jpg" alt="swarm架构"></p><ul><li>Swarm对外提供两种API， 一种是Docker API，用于负责容器镜像的生命周期管理， 另外一种是Swarm集群管理CLI，用于集群理。</li><li>Scheduler模块，主要实现调度功能。在通过Swarm创建容器时，会经过Scheduler模块选择出一个最优节点，里面包含了两个子模块，分别是Filter和Strategy， Filter用来过滤节点，找出满足条件的节点（比如资源足够，节点正常等等），Strategy用来在过滤出的节点中根据策略选择一个最优的节点（比如对找出的节点进行对比，找到资源最多的节点等等）, 当然Filter/Strategy用户可以定制。</li><li>Swarm对集群进行了抽象，抽象出了Cluster API，Swarm支持两种集群，一种是Swarm自身的集群，另外一种基于Mesos的集群。</li><li>LeaderShip模块用于Swarm Manager自身的HA，通过主备方式实现。</li><li>Discovery Service 服务发现模块，这个模块主要用来提供节点发现功能。</li><li>在每一个节点上，都会有一个Agent，用于连接Discovery Service，上报Docker Daemon的IP端口信息，Swarm Manager会直接从服务发现模块中读取节点信息。</li></ul><hr><h2 id="创建群集-docker-for-windows"><a href="#创建群集-docker-for-windows" class="headerlink" title="创建群集 (docker for windows)"></a>创建群集 (docker for windows)</h2><blockquote><p>本案例用的是 win10 的 <code>hyper-V</code> 功能<br>mac,linux,windows7/8 参考官网: <a href="https://docs.docker.com/get-started/part4/#understanding-swarm-clusters" target="_blank" rel="noopener">https://docs.docker.com/get-started/part4/#understanding-swarm-clusters</a></p></blockquote><h3 id="利用-hyper-v-在你的机器上创建两个docker-环境"><a href="#利用-hyper-v-在你的机器上创建两个docker-环境" class="headerlink" title="利用 hyper-v 在你的机器上创建两个docker 环境"></a>利用 <code>hyper-v</code> 在你的机器上创建两个docker 环境</h3><ol><li>启用 <code>Hyper-V</code> 管理器</li><li>点击虚拟交换机管理,创建一个 <code>外部</code> 类型的虚拟交换机</li><li>给你的虚拟交换机取名 <code>myswitch</code></li><li>create a couple of VMs using our node management tool,<code>docker-machine</code></li><li>发现下载 <code>boot2docker.iso</code> 失败或者超时, 可到这个地址下载 <code>https://github.com/boot2docker/boot2docker/releases/download/v17.06.2-ce/boot2docker.iso</code> 然后将它放在你的 个人资源管理器 <code>\.docker\machine\cache</code>, 例如我的: <code>C:\Users\carzy\.docker\machine\cache</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch <span class="string">"myswitch"</span> myvm1</span><br><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch <span class="string">"myswitch"</span> myvm2</span><br><span class="line"><span class="comment"># 此过程很慢</span></span><br></pre></td></tr></table></figure><h3 id="查看刚刚创建的虚拟docker列表和IP"><a href="#查看刚刚创建的虚拟docker列表和IP" class="headerlink" title="查看刚刚创建的虚拟docker列表和IP"></a>查看刚刚创建的虚拟docker列表和IP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ls `</span><br><span class="line">NAME    ACTIVE   DRIVER   STATE     URL                         SWARM   DOCKER</span><br><span class="line">myvm1   -        hyperv   Running   tcp://192.168.68.116:2376           v17.06.2-ce</span><br><span class="line">myvm2   -        hyperv   Running   tcp://192.168.68.114:2376           v17.06.2-ce</span><br></pre></td></tr></table></figure><!-- ![zdtl0fg1ks9ejyvi](\:storage\zdtl0fg1ks9ejyvi.png) --><h3 id="启动群集添加节点"><a href="#启动群集添加节点" class="headerlink" title="启动群集添加节点"></a>启动群集添加节点</h3><blockquote><p>第一台机器将作为 <code>manager</code> ，执行管理指令和认证人员加入群，和第二将作为 <code>worker</code></p></blockquote><ul><li><code>docker-machine ssh</code> 登录你的第一个 VM, 并将 <code>myvm1</code> 指定为 <code>manager</code> : <code>docker swarm init</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ssh myvm1 <span class="string">"docker swarm init --advertise-addr &lt;myvm1 ip&gt;"</span></span><br><span class="line"></span><br><span class="line">docker@myvm1:~$ docker swarm init</span><br><span class="line">Swarm initialized: current node (pdi85vh4w3p5243qgiiaoz6cn) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-3r3xispwm7cbu0k8orry0k9dyn7if9agk2gkwrxilefrh5jfmu-3qzklzdzedh5yxinsi9q77xqt 192.168.68.116:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure><p><img src="Docker Swarm/docker-mechine.png" alt="docker-mechine"></p><blockquote><p><strong>端口2377和2376</strong><br>始终运行 <code>docker swarm init</code>和 <code>docker swarm join</code> 端口2377（群组管理端口），或使其为默认值。<br>返回的机器IP地址 <code>docker-machine ls</code> 包括端口2376，它是Docker守护程序端口。不要使用这个端口，否则 可能会遇&gt; 到错误。</p></blockquote><ul><li>响应 <code>docker swarm init</code>包含预先配置的 <code>docker swarm join</code>命令(上条docker swarm init 提示的 <code>token</code>)，以便您在要添加的任何节点上运行。复制此命令，并将其发送到myvm2, <code>docker-machine ssh</code> 让myvm2 加入您的新群组作为<code>worker</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-3r3xispwm7cbu0k8orry0k9dyn7if9agk2gkwrxilefrh5jfmu-3qzklzdzedh5yxinsi9q77xqt 192.168.68.116:2377</span><br><span class="line"></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure><ul><li><code>docker node ls</code> 在管理器上运行以查看此群组中的节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS E:\dockerWork\demo1&gt; docker-machine ssh myvm1 <span class="string">"docker node ls"</span></span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY          MANAGER STATUS</span><br><span class="line">pdi85vh4w3p5243qgiiaoz6cn *           myvm1               Ready               Active              Leader</span><br><span class="line">tra1o8vdg9y4z16uv0nl731y8            myvm2               Ready               Active</span><br></pre></td></tr></table></figure><blockquote><p><code>离开群</code><br>如果要重新开始，可以从每个节点运行 <code>docker swarm leave</code></p></blockquote><hr><h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><h4 id="将docker-machineshell-配置为群组管理器"><a href="#将docker-machineshell-配置为群组管理器" class="headerlink" title="将docker-machineshell 配置为群组管理器"></a>将docker-machineshell 配置为群组管理器</h4><blockquote><p>到目前为止，已经将Docker的commmands包装在 <code>docker-machine ssh</code>与VM进行通话。另一个选项是运行 <code>docker-machine env &lt;machine&gt;</code> 以获取并运行一个配置当前shell的命令来与虚拟机上的 <code>Docker守护程序</code> 通信。它允许使用本地docker-compose.yml文件“远程”部署应用程序，而无需将其复制到任何位置。</p><ul><li>Run <code>docker-machine env myvm1</code> to get the command to configure your shell to talk to myvm1.</li><li>Run the given command to configure your shell to talk to myvm1</li><li>Run <code>docker-machine ls</code> to verify that myvm1 is the active machine as indicated by <code>*</code> next to it</li></ul></blockquote><!-- ![o7iuh7wvy10885mi](\:storage\o7iuh7wvy10885mi.png) --><h4 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h4><ul><li>现在你有我的myvm1，你可以使用<code>myvm1</code> 的权力作为一个群组管理器来部署您的应用程序，使用 <code>docker stack deploy</code> 命令，运行 <code>docker-stack.yml</code>.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><ul><li><code>docker service ps test</code> 可以看到5个容器，分别运行在 myvm1 和 myvm2 上</li><li>通过浏览器访问任意一个 ip 的，都可以看见 5 个 不同的 ID</li><li>IP地址工作的原因是群集中的 <code>nodes</code> 加入 <code>ingress network routing mesh</code> 。这样可以确保在群集中某个端口部署的服务始终将该端口保留给其自身，无论实际运行的是哪个节点。以下是在三节点群集my-web端口8080上发布的服务的路由网格如何显示：<br><img src="Docker Swarm/network.png" alt="network"></li></ul><blockquote><p><strong>连通问题</strong><br>为了在群集中使用入口网络 <code>ingress network</code> ，在启用群组模式之前，需要在群集节点之间打开以下端口</p><ul><li>端口7946 TCP / UDP用于容器网络发现。</li><li>端口4789 UDP用于容器入口网络.</li></ul></blockquote><h3 id="迭代和缩放您的应用程序"><a href="#迭代和缩放您的应用程序" class="headerlink" title="迭代和缩放您的应用程序"></a>迭代和缩放您的应用程序</h3><ol><li>通过更改docker-compose.yml文件来缩放应用程序</li><li>通过编辑代码来更改应用程序行为<ul><li>在这两种情况下，只需 <code>docker stack deploy</code> 再次运行以部署这些更改.</li><li>您可以使用与 <code>docker swarm join</code> 您使用的相同的命令将任何物理或虚拟机加入此群集 <code>myvm2</code> ，并将容量添加到群集中。<code>docker stack deploy</code> 运行后，您的应用程序将利用新的资源。</li></ul></li></ol><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>使用 <code>docker stack rm</code> 进行清理所有这个stack</p><blockquote><p><em>Keep the swarm or remove it</em><br><code>docker-machine ssh myvm2 &quot;docker swarm leave&quot;</code> 将 myvm2  从swarm的 <code>worker</code> 中移除<br><code>docker-machine ssh myvm1 &quot;docker swarm leave --force</code> myvm1 从 swarm的 <code>manager</code> 中移除</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-Swarm&quot;&gt;&lt;a href=&quot;#Docker-Swarm&quot; class=&quot;headerlink&quot; title=&quot;Docker Swarm&quot;&gt;&lt;/a&gt;Docker Swarm&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A swarm is a grou
      
    
    </summary>
    
      <category term="docker" scheme="https://dongcarzy.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://dongcarzy.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker stack</title>
    <link href="https://dongcarzy.github.io/2017/11/14/docker/docker%20stack/"/>
    <id>https://dongcarzy.github.io/2017/11/14/docker/docker stack/</id>
    <published>2017-11-14T08:13:57.000Z</published>
    <updated>2018-11-16T03:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-stack"><a href="#docker-stack" class="headerlink" title="docker stack"></a>docker stack</h1><blockquote><p>将到达分布式应用程序层次结构的顶部：堆栈。堆栈是一组相互关联的服务，共享依赖关系，并且可以协调一致。单个堆栈能够定义和协调整个应用程序的功能（尽管非常复杂的应用程序可能希望使用多个堆栈）。</p></blockquote><h2 id="添加新服务并重新部署"><a href="#添加新服务并重新部署" class="headerlink" title="添加新服务并重新部署"></a>添加新服务并重新部署</h2><p>很容易为我们的docker-compose.yml文件添加服务。首先，我们添加一个免费的可视化服务，让我们看看我们的群集如何调度容器。</p><ol><li><code>docker-compose.yml</code> 在编辑器中打开并将其内容替换为以下内容。请务必更换 <code>username/repo:tag</code> 您的图像细节。</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line">    <span class="comment"># replace username/repo:tag with your name and image details</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">username/repo:tag</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      restart_policy:</span></span><br><span class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        limits:</span></span><br><span class="line"><span class="attr">          cpus:</span> <span class="string">"0.1"</span></span><br><span class="line"><span class="attr">          memory:</span> <span class="number">50</span><span class="string">M</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:80"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">  visualizer:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:8080"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  webnet:</span></span><br></pre></td></tr></table></figure><p>这里唯一新的是对等服务web，命名visualizer。您将在这里看到两个新的东西：一个volumes关键字，让可视化程序访问Docker的主机套接字文件以及一个placement关键字，确保这个服务只能运行在群组管理器上，而不是工作人员。这是因为由Docker创建的开源项目构建的这个容器显示了在图中以群集运行的Docker服务。</p><ol start="2"><li>确保你的shell被配置为通话myvm1（全部的例子在这里）。</li></ol><ul><li>运行docker-machine ls列出机器，并确保您已连接到myvm1，如下星号所示。</li><li>如果需要，重新运行docker-machine env myvm1，然后运行给定的命令配置shell。</li></ul><p>在Mac或Linux上，命令是：<code>eval $(docker-machine env myvm1)</code></p><p>在Windows上，命令是：<code>&amp; &quot;C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe&quot; env myvm1 | Invoke-Expression</code></p><ol><li>docker stack deploy在管理员上重新运行命令，任何需要更新的服务将被更新：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack deploy -c docker-compose.yml getstartedlab</span><br><span class="line">Updating service getstartedlab_web (id: angi1bf5e4to03qu9f93trnxm)</span><br><span class="line">Updating service getstartedlab_visualizer (id: l9mnwkeq2jiononb5ihz9u7a4)</span><br></pre></td></tr></table></figure><ol><li>看看可视化器。</li></ol><p>您在Compose文件中看到在visualizer端口8080上运行docker-machine ls。通过运行获取其中一个节点的IP地址。转到8080端口的IP地址，您将看到可视化运行：<br><img src="docker stack/docker stack1.png" alt="docker stack1"></p><p>单个副本visualizer正如您所期望的那样在管理器上运行，并且5个实例web分布在群集中。您可以通过运行<code>docker stack ps &lt;stack&gt;</code>以下方式来证实这种可视化:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack ps getstartedlab</span><br></pre></td></tr></table></figure><p>可视化器是一种独立的服务，可以在包含在堆栈中的任何应用程序中运行。它不依赖于其他任何东西。现在让我们创建一个确实具有依赖性的服务：Redis服务将提供一个访客计数器。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>让我们再次浏览相同的工作流程，添加一个用于存储应用数据的Redis数据库。</p><ol><li>保存这个新docker-compose.yml文件，最后添加一个Redis服务。请务必更换username/repo:tag您的图像细节。</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line">    <span class="comment"># replace username/repo:tag with your name and image details</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">username/repo:tag</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      restart_policy:</span></span><br><span class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        limits:</span></span><br><span class="line"><span class="attr">          cpus:</span> <span class="string">"0.1"</span></span><br><span class="line"><span class="attr">          memory:</span> <span class="number">50</span><span class="string">M</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:80"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">  visualizer:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:8080"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"6379:6379"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/docker/data:/data</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">redis-server</span> <span class="bullet">--appendonly</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  webnet:</span></span><br></pre></td></tr></table></figure><p>Redis在Docker图书馆有一个官方形象，并且被赋予了简短的image名字<code>redis</code>，所以<code>username/repo</code>在这里没有符号。Redis端口6379已由Redis预配置为从容器暴露给主机，在我们的撰写文件中，我们将其从主机公开到世界各地，因此您可以输入任何您的IP地址节点进入Redis Desktop Manager并管理此Redis实例，如果您这样选择。</p><p>最重要的是，在<code>redis</code>规范中有几件事情使数据在这个堆栈的部署之间保持不变：</p><ul><li>redis 总是在经理上运行，所以它总是使用相同的文件系统。</li><li>redis访问主机文件系统中的任意目录/data，这是Redis存储数据的位置。</li></ul><p>在一起，这是在您的主机的物理文件系统中为Redis数据创建“真相的根源”。没有这个，Redis会将其数据存储 /data在容器的文件系统内，如果容器被重新部署，那么它将被清除。</p><p>这个真理的来源有两个部分：</p><ul><li>您放置在Redis服务上的放置约束，确保它始终使用相同的主机。</li><li>您创建的卷允许容器访问./data（在主机上）为/data（在Redis容器内）。当容器来回走动时，存储在./data指定主机上的文件将持续存在，从而实现连续性。</li></ul><p>您已准备好部署新的Redis使用堆栈。</p><ol><li><code>./data</code> 在管理器上创建一个目录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ssh myvm1 <span class="string">"mkdir ./data"</span></span><br></pre></td></tr></table></figure><ol><li>确保你的shell被配置为通话myvm1。</li></ol><ul><li>运行docker-machine ls列出机器，并确保您已连接到myvm1，如下星号所示。</li><li><p>如果需要，重新运行docker-machine env myvm1，然后运行给定的命令配置shell。</p><p>在Mac或Linux上，命令是：<code>eval $(docker-machine env myvm1)</code><br>在Windows上，命令是：<code>&amp; &quot;C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe&quot; env myvm1 | Invoke-Expression</code></p></li></ul><ol start="2"><li>再运行docker stack deploy一次</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure><ol start="3"><li>运行docker service ls以验证三个服务是否按预期运行。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker service ls</span><br><span class="line">ID                  NAME                       MODE                REPLICAS            IMAGE                             PORTS</span><br><span class="line">x7uij6xb4foj        getstartedlab_redis        replicated          1/1                 redis:latest                      *:6379-&gt;6379/tcp</span><br><span class="line">n5rvhm52ykq7        getstartedlab_visualizer   replicated          1/1                 dockersamples/visualizer:stable   *:8080-&gt;8080/tcp</span><br><span class="line">mifd433bti1d        getstartedlab_web          replicated          5/5                 orangesnap/getstarted:latest    *:80-&gt;80/tcp</span><br></pre></td></tr></table></figure><ol><li>检查您的一个节点（例如<code>http://192.168.99.101</code>）的网页，您将看到访客计数器的结果，该计数器现在已存在，并存储有关Redis的信息。</li></ol><p><img src="docker stack/docker-redis.png" alt="docker-redis"></p><p>另外，检查可视化在上的任一节点的IP地址端口8080，你会看到redis与一起运行服务web和visualizer服务。</p><p><img src="docker stack/docker stack2.png" alt="docker stack2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-stack&quot;&gt;&lt;a href=&quot;#docker-stack&quot; class=&quot;headerlink&quot; title=&quot;docker stack&quot;&gt;&lt;/a&gt;docker stack&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将到达分布式应用程序层次结构的顶部
      
    
    </summary>
    
      <category term="docker" scheme="https://dongcarzy.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://dongcarzy.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker serveice</title>
    <link href="https://dongcarzy.github.io/2017/11/12/docker/docker%20serveice/"/>
    <id>https://dongcarzy.github.io/2017/11/12/docker/docker serveice/</id>
    <published>2017-11-12T08:13:57.000Z</published>
    <updated>2018-11-16T02:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-serveice"><a href="#docker-serveice" class="headerlink" title="docker serveice"></a>docker serveice</h1><blockquote><p>扩展了应用程序并启用了负载平衡。</p></blockquote><h2 id="分布式应用程序的层次结构"><a href="#分布式应用程序的层次结构" class="headerlink" title="分布式应用程序的层次结构"></a>分布式应用程序的层次结构</h2><ul><li>Stack  堆</li><li>services 服务</li><li>container  </li></ul><h2 id="什么事-serveice"><a href="#什么事-serveice" class="headerlink" title="什么事 serveice"></a>什么事 serveice</h2><p>在分布式应用程序中，应用程序的不同部分称为“服务”。例如，如果您想像一个视频共享站点，它可能包括一个用于在数据库中存储应用程序数据的服务，一个在后台进行视频转码的服务用户上传东西，前端服务等等。<br>服务只是“生产中的容器”。一个服务只运行一个映像，但它编码映像运行的方式 - 应该使用哪些端口，容器应容器，集装箱该运行多少副本，以便服务具有所需的容量，以及等等。扩展服务会更改运行该软件的容器实例的数量，并在该过程中为服务分配更多的计算资源。</p><h2 id="docker-compose-yml编写"><a href="#docker-compose-yml编写" class="headerlink" title="docker-compose.yml编写"></a>docker-compose.yml编写</h2><p>一个docker-compose.yml文件是一个YAML文件，它定义了Docker容器在生产过程中的行为。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="comment"># 将 60.205.206.164:8001/test:1.2 替换成你的 image ~~REPOSITORY：TAG~~</span></span><br><span class="line"><span class="attr">    image:</span> <span class="number">60.205</span><span class="number">.206</span><span class="number">.164</span><span class="string">:8001/test:1.2</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        limits:</span></span><br><span class="line"><span class="attr">          cpus:</span> <span class="string">"0.1"</span></span><br><span class="line"><span class="attr">          memory:</span> <span class="number">50</span><span class="string">M</span></span><br><span class="line"><span class="attr">      restart_policy:</span></span><br><span class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8090:80"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  webnet:</span></span><br></pre></td></tr></table></figure><h2 id="Docker执行以下操作"><a href="#Docker执行以下操作" class="headerlink" title="Docker执行以下操作"></a>Docker执行以下操作</h2><ul><li>从仓库中拉取 60.205.206.164:8001/test:1.2 这个 image</li><li>运行该映像的5个实例作为调用的服务web，限制每个实例使用，最多使用10％的CPU（跨所有内核）和50MB RAM</li><li>将主机上的端口8090映射到web80端口</li><li>指示web容器通过称为负载平衡网络共享端口8090 webnet。（在内部，集装箱本身将web端口发布到 80端口。）</li><li>webnet使用默认设置（这是一个负载平衡的覆盖网络）来定义网络。</li></ul><h3 id="运行新的负载均衡应用"><a href="#运行新的负载均衡应用" class="headerlink" title="运行新的负载均衡应用"></a>运行新的负载均衡应用</h3><ul><li>初始化swarm : <code>docker swarm init</code></li><li>给应用取一个名字： <code>docker stack deploy -c docker-compose.yml getstartedlab</code></li><li>通过 <code>docker service ls</code> 可以看到 我们的单一服务堆栈在一个主机上运行我们部署映像的5个容器实例。通过 <code>docker service ps &lt;serviceId&gt;</code> 可以看到这个服务包含了5个容器，都有独立的 ID</li><li>页面运行 8090 端口，不断的运行，会发现走了不通的容器 Hostname 显示的ID 一直在变化</li></ul><h3 id="缩放应用"><a href="#缩放应用" class="headerlink" title="缩放应用"></a>缩放应用</h3><ul><li>更改docker-compose.yml的replicas值，保存更改并重新运行docker stack deploy命令来缩放应用程</li><li>通过 <code>docker service ps &lt;serviceId&gt;</code> 可以看到这个服务包含容器的个数变化</li></ul><h2 id="Take-down-the-app-and-the-swarm"><a href="#Take-down-the-app-and-the-swarm" class="headerlink" title="Take down the app and the swarm"></a>Take down the app and the swarm</h2><ul><li><code>docker stack rm getstartedlab</code><blockquote><p>This removes the app, but our one-node swarm is still up and running </p></blockquote></li><li><code>docker swarm leave --force</code><blockquote><p>Take down the swarm</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-serveice&quot;&gt;&lt;a href=&quot;#docker-serveice&quot; class=&quot;headerlink&quot; title=&quot;docker serveice&quot;&gt;&lt;/a&gt;docker serveice&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;扩展了应用
      
    
    </summary>
    
      <category term="docker" scheme="https://dongcarzy.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://dongcarzy.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门</title>
    <link href="https://dongcarzy.github.io/2017/11/11/docker/Docker%E5%85%A5%E9%97%A8/"/>
    <id>https://dongcarzy.github.io/2017/11/11/docker/Docker入门/</id>
    <published>2017-11-11T11:13:57.000Z</published>
    <updated>2018-11-16T02:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h1><h2 id="搜索docker镜像"><a href="#搜索docker镜像" class="headerlink" title="搜索docker镜像"></a>搜索docker镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tutorial</span><br></pre></td></tr></table></figure><h2 id="下载容器"><a href="#下载容器" class="headerlink" title="下载容器"></a>下载容器</h2><blockquote><p>可能可能需要配置镜像加速</p></blockquote><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull learn/tutorial</span><br></pre></td></tr></table></figure><p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p><h2 id="在容器中安装新的程序"><a href="#在容器中安装新的程序" class="headerlink" title="在容器中安装新的程序"></a>在容器中安装新的程序</h2><p>tutorial镜像是基于ubuntu的，所以你可以使用ubuntu的apt-get命令来安装ping程序：apt-get install -y ping。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run learn/tutorial apt-get install -y ping</span><br></pre></td></tr></table></figure><h2 id="保存对容器的修改"><a href="#保存对容器的修改" class="headerlink" title="保存对容器的修改"></a>保存对容器的修改</h2><p>当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。docker中保存状态的过程称之为committing，它保存的新旧状态之间的区别，从而产生一个新的版本</p><ol><li>运行docker commit，可以查看该命令的参数列表。</li><li>你需要指定要提交保存容器的ID。(译者按：通过docker ps -l 命令获得)</li><li>无需拷贝完整的id，通常来讲最开始的三至四个字母即可区分。（译者按：非常类似git里面的版本号)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 698 learn/ping</span><br></pre></td></tr></table></figure><h2 id="运行新的镜像"><a href="#运行新的镜像" class="headerlink" title="运行新的镜像"></a>运行新的镜像</h2><p>在新的镜像中运行 <code>ping www.baidu.com</code> 命令</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> lean/ping ping www.baidu.com</span></span><br></pre></td></tr></table></figure><h2 id="发布docker镜像"><a href="#发布docker镜像" class="headerlink" title="发布docker镜像"></a>发布docker镜像</h2><p>我们可以将其发布到官方的索引网站。还记得我们最开始下载的learn/tutorial镜像吧，我们也可以把我们自己编译的镜像发布到索引页面，一方面可以自己重用，另一方面也可以分享给其他人使用</p><h1 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h1><ul><li>国内做Docker镜像站的还蛮多的，阿里、163、DaoCloud这些都是比较好的镜像站地址</li></ul><h2 id="比如"><a href="#比如" class="headerlink" title="比如"></a>比如</h2><h3 id="win10-上-Docker-for-Windows"><a href="#win10-上-Docker-for-Windows" class="headerlink" title="win10 上 Docker for Windows"></a>win10 上 Docker for Windows</h3><ol><li>阿里的镜像站地址为：<code>https://dev.aliyun.com/search.html</code> ，访问该地址然后登陆阿里云账号—-&gt;在产品控制台—&gt;Docker镜像仓库 –&gt;镜像库—&gt;Docker Hub 镜像站点 Copy “您的专属加速器地址”</li><li>右键电脑右下角的Docker 图标–&gt;Settings–&gt;Daemon—&gt; 将加速器地址复制到该页面上的文本框中，点击Apply 然后等待Docker重启，重启完毕就可以使用新的Docker镜像源了</li><li>其余几个机器的配置方式在参考  阿里云  <code>https://dev.aliyun.com/search.html</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker入门&quot;&gt;&lt;a href=&quot;#Docker入门&quot; class=&quot;headerlink&quot; title=&quot;Docker入门&quot;&gt;&lt;/a&gt;Docker入门&lt;/h1&gt;&lt;h2 id=&quot;搜索docker镜像&quot;&gt;&lt;a href=&quot;#搜索docker镜像&quot; class=&quot;
      
    
    </summary>
    
      <category term="docker" scheme="https://dongcarzy.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://dongcarzy.github.io/tags/docker/"/>
    
      <category term="入门" scheme="https://dongcarzy.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装</title>
    <link href="https://dongcarzy.github.io/2017/11/10/docker/Docker%E5%AE%89%E8%A3%85/"/>
    <id>https://dongcarzy.github.io/2017/11/10/docker/Docker安装/</id>
    <published>2017-11-10T08:13:57.000Z</published>
    <updated>2018-11-16T02:28:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="Ubuntu-14-04-16-04-使用apt-get进行安装"><a href="#Ubuntu-14-04-16-04-使用apt-get进行安装" class="headerlink" title="Ubuntu 14.04 16.04 (使用apt-get进行安装)"></a>Ubuntu 14.04 16.04 (使用apt-get进行安装)</h2><ul><li>Step 1: 安装必要的一些系统工具</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates</span><br><span class="line">curl software-properties-common</span><br></pre></td></tr></table></figure><ul><li>Step 2: 安装GPG证书</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><ul><li>Step 3: 写入软件源信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"</span><br></pre></td></tr></table></figure><ul><li>Step 4: 更新并安装Docker-CE</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><h3 id="安装指定版本的Docker-CE"><a href="#安装指定版本的Docker-CE" class="headerlink" title="安装指定版本的Docker-CE:"></a>安装指定版本的Docker-CE:</h3><ul><li>Step 1: 查找Docker-CE的版本:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-cache madison docker-ce # docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><br><span class="line">docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><br></pre></td></tr></table></figure><ul><li>Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install docker-ce=[VERSION]</span><br></pre></td></tr></table></figure><ul><li>Step 3: 安装最新版本的Docker-CE:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><h2 id="CentOS-7-使用yum进行安装"><a href="#CentOS-7-使用yum进行安装" class="headerlink" title="CentOS 7 (使用yum进行安装)"></a>CentOS 7 (使用yum进行安装)</h2><ul><li>step 1: 安装必要的一些系统工具</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ul><li>Step 2: 添加软件源信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ul><li>Step 3: 更新并安装 Docker-CE</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure><ul><li>Step 4: 开启Docker服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><h3 id="安装指定版本的Docker-CE-1"><a href="#安装指定版本的Docker-CE-1" class="headerlink" title="安装指定版本的Docker-CE"></a>安装指定版本的Docker-CE</h3><ul><li>Step 1: 查找Docker-CE的版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugins: branch, fastestmirror, langpacks</span><br><span class="line">docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable</span><br><span class="line">docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable</span><br><span class="line">docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable</span><br><span class="line">Available Packages</span><br></pre></td></tr></table></figure><ul><li>Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce-[VERSION]</span><br></pre></td></tr></table></figure><ul><li>安装校验 查看docker信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><ul><li>运行一个简单的  docker image。  会输出一个 hello world!</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 'hello-world'</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h1&gt;&lt;h2 id=&quot;Ubuntu-14-04-16-04-使用apt-get进行安装&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="docker" scheme="https://dongcarzy.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://dongcarzy.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker简述</title>
    <link href="https://dongcarzy.github.io/2017/10/09/docker/docker%E7%AE%80%E8%BF%B0/"/>
    <id>https://dongcarzy.github.io/2017/10/09/docker/docker简述/</id>
    <published>2017-10-09T08:45:57.000Z</published>
    <updated>2018-11-16T03:21:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker简述"><a href="#docker简述" class="headerlink" title="docker简述"></a>docker简述</h1><h2 id="VM-amp-Docker"><a href="#VM-amp-Docker" class="headerlink" title="VM &amp; Docker"></a>VM &amp; Docker</h2><blockquote><p>一般都拿VM与docker做比较，但两者的两个不同的东西，从使用者的角度上看，感觉是一样</p></blockquote><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p><img src="docker简述/docker.jpg" alt="docker"></p><h3 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h3><p><img src="docker简述/docker_VM.jpg" alt="docker_VM"></p><h2 id="docker-engine"><a href="#docker-engine" class="headerlink" title="docker engine"></a>docker engine</h2><p><img src="docker简述/docker engine.png" alt="docker engine"></p><h2 id="Docker守护进程"><a href="#Docker守护进程" class="headerlink" title="Docker守护进程"></a>Docker守护进程</h2><p>Docker守护程序（dockerd）监听Docker API请求并管理Docker对象，如图像，容器，网络和卷。守护进程还可以与其他守护进程通信以管理Docker服务</p><h2 id="Docker客户端"><a href="#Docker客户端" class="headerlink" title="Docker客户端"></a>Docker客户端</h2><p>Docker client（docker）是许多Docker用户与Docker进行交互的主要方式。当您使用诸如docker run客户端之类的命令时dockerd，会发送这些命令。该docker命令使用Docker API。Docker客户端可以与多个守护进程通信。</p><h2 id="Docker对象"><a href="#Docker对象" class="headerlink" title="Docker对象"></a>Docker对象</h2><p>当您使用Docker时，您正在创建和使用图像，容器，网络，卷，插件和其他对象。本节简要介绍一些这些对象。</p><h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>一个图像是一个只读用于创建一个泊坞容器的指令模板。通常，图像是基于另一个图像，还有一些额外的定制.要创建自己的映像，您将创建一个 具有简单语法的Docker文件，用于定义创建映像所需的步骤并运行它。Dockerfile中的每条指令在图像中创建一个图层。当您更改Dockerfile并重建图像时，只有那些已更改的图层被重建。</p><h2 id="集装箱"><a href="#集装箱" class="headerlink" title="集装箱"></a>集装箱</h2><p>容器是图像的可运行实例。您可以使用Docker API或CLI创建，运行，停止，移动或删除容器。您可以将容器连接到一个或多个网络，将存储器连接到该网络，或者甚至根据其当前状态创建新映像。<br>默认情况下，容器与其他容器及其主机相对较好地隔离。您可以控制容器的网络，存储或其他底层子系统与其他容器或主机之间的隔离。<br>容器由其图像定义，以及您在创建或运行时提供的任何配置选项。当一个容器被移除时，对其中不存储在永久存储器中的状态的任何更改消失。</p><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>服务允许你扩展在多个码头工人守护进程，而这一切的共同努力容器群有多个经理和工人。群集的每个成员都是Docker守护进程，守护进程使用Docker API进行通信。服务允许您定义所需的状态，例如在任何给定时间必须可用的服务的副本数。默认情况下，服务在所有工作节点之间进行负载平衡。对消费者来说，Docker服务似乎是一个单一的应用程序。Docker Engine支持Docker 1.12及更高版本的群集模式。</p><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>Docker使用一种被称为namespaces提供称为容器的隔离工作空间的技术。运行容器时，Docker会为该容器创建一组 命名空间。<br>这些命名空间提供了一个隔离层。容器的每个方面都在一个单独的命名空间中运行，其访问仅限于该命名空间。<br>Docker Engine在Linux上使用以下命名空间：</p><ul><li>的pid命名空间：进程隔离（PID：进程ID）。</li><li>该net命名空间：管理网络接口（NET：网络）。</li><li>该ipc命名空间：管理访问IPC资源（IPC：进程间通信）。</li><li>该mnt命名空间：管理文件系统挂载点（MNT：摩）。</li><li>该uts命名空间：隔离内核和版本标识符。（UTS：Unix分时系统）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker简述&quot;&gt;&lt;a href=&quot;#docker简述&quot; class=&quot;headerlink&quot; title=&quot;docker简述&quot;&gt;&lt;/a&gt;docker简述&lt;/h1&gt;&lt;h2 id=&quot;VM-amp-Docker&quot;&gt;&lt;a href=&quot;#VM-amp-Docker&quot; c
      
    
    </summary>
    
      <category term="docker" scheme="https://dongcarzy.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://dongcarzy.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>锁表与解锁</title>
    <link href="https://dongcarzy.github.io/2017/06/14/DB/DB%E9%94%81/"/>
    <id>https://dongcarzy.github.io/2017/06/14/DB/DB锁/</id>
    <published>2017-06-14T08:13:57.000Z</published>
    <updated>2018-11-21T03:37:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="锁表与解锁"><a href="#锁表与解锁" class="headerlink" title="锁表与解锁"></a>锁表与解锁</h1><h2 id="ORACLE"><a href="#ORACLE" class="headerlink" title="ORACLE"></a>ORACLE</h2><h3 id="查询锁表情况"><a href="#查询锁表情况" class="headerlink" title="查询锁表情况"></a>查询锁表情况</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> object_name, machine, s.sid, s.serial<span class="comment">#</span></span><br><span class="line"><span class="keyword">FROM</span> gv$locked_object l, dba_objects o, gv$<span class="keyword">session</span> s</span><br><span class="line"><span class="keyword">WHERE</span> l.object_id = o.object_id</span><br><span class="line"><span class="keyword">AND</span> l.session_id = s.sid</span><br></pre></td></tr></table></figure><h3 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> CAM_ACCOUNT_MST <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span> ;</span><br></pre></td></tr></table></figure><h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">kill</span> <span class="keyword">session</span> <span class="string">'sid, serial#'</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">system</span> <span class="keyword">kill</span> <span class="keyword">session</span> <span class="string">'17, 23019'</span></span><br></pre></td></tr></table></figure><h3 id="查询锁表情况2"><a href="#查询锁表情况2" class="headerlink" title="查询锁表情况2"></a>查询锁表情况2</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> l.session_id <span class="keyword">sid</span>,</span><br><span class="line">  s.serial<span class="comment">#,</span></span><br><span class="line">       l.locked_mode 锁模式,</span><br><span class="line">       l.oracle_username 登录用户,</span><br><span class="line">       l.os_user_name 登录机器用户名,</span><br><span class="line">       s.machine 机器名,</span><br><span class="line">       s.terminal 终端用户名,</span><br><span class="line">       o.object_name 被锁对象名,</span><br><span class="line">       s.logon_time 登录数据库时间</span><br><span class="line"><span class="keyword">FROM</span> v$locked_object l, all_objects o, v$<span class="keyword">session</span> s</span><br><span class="line"><span class="keyword">WHERE</span> l.object_id = o.object_id</span><br><span class="line">      <span class="keyword">AND</span> l.session_id = s.sid</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">sid</span>, s.serial<span class="comment">#;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;锁表与解锁&quot;&gt;&lt;a href=&quot;#锁表与解锁&quot; class=&quot;headerlink&quot; title=&quot;锁表与解锁&quot;&gt;&lt;/a&gt;锁表与解锁&lt;/h1&gt;&lt;h2 id=&quot;ORACLE&quot;&gt;&lt;a href=&quot;#ORACLE&quot; class=&quot;headerlink&quot; title=&quot;O
      
    
    </summary>
    
      <category term="数据库" scheme="https://dongcarzy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="锁表与解锁" scheme="https://dongcarzy.github.io/tags/%E9%94%81%E8%A1%A8%E4%B8%8E%E8%A7%A3%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>PL/SQL developer 12.0 注册码</title>
    <link href="https://dongcarzy.github.io/2017/03/16/DB/PL_SQL/"/>
    <id>https://dongcarzy.github.io/2017/03/16/DB/PL_SQL/</id>
    <published>2017-03-16T10:13:57.000Z</published>
    <updated>2018-11-21T03:37:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库工具"><a href="#数据库工具" class="headerlink" title="数据库工具"></a>数据库工具</h1><h2 id="PL-SQL-developer-12-0-注册码"><a href="#PL-SQL-developer-12-0-注册码" class="headerlink" title="PL/SQL developer 12.0 注册码"></a>PL/SQL developer 12.0 注册码</h2><ul><li>LicenseNumber : 999</li><li>productCode ： 46jvnzf74ysf3mqm4hx4tvhcamh8gpe3v5</li><li>SeriesNumber：706090</li><li>password：xs374ca</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库工具&quot;&gt;&lt;a href=&quot;#数据库工具&quot; class=&quot;headerlink&quot; title=&quot;数据库工具&quot;&gt;&lt;/a&gt;数据库工具&lt;/h1&gt;&lt;h2 id=&quot;PL-SQL-developer-12-0-注册码&quot;&gt;&lt;a href=&quot;#PL-SQL-developer
      
    
    </summary>
    
      <category term="数据库" scheme="https://dongcarzy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="db" scheme="https://dongcarzy.github.io/tags/db/"/>
    
      <category term="数据库工具" scheme="https://dongcarzy.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>jedis config 配置说明</title>
    <link href="https://dongcarzy.github.io/2016/12/14/DB/redis-jedis/"/>
    <id>https://dongcarzy.github.io/2016/12/14/DB/redis-jedis/</id>
    <published>2016-12-14T10:13:57.000Z</published>
    <updated>2018-11-21T03:37:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JEDIS-2-4-2"><a href="#JEDIS-2-4-2" class="headerlink" title="JEDIS-2.4.2"></a>JEDIS-2.4.2</h1><h2 id="jedis-config-配置说明"><a href="#jedis-config-配置说明" class="headerlink" title="jedis config 配置说明"></a>jedis config 配置说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true</span></span><br><span class="line">config.setBlockWhenExhausted(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置的逐出策略类名, 默认DefaultEvictionPolicy(当连接超过最大空闲时间,或连接数超过最大空闲连接数)</span></span><br><span class="line">config.setEvictionPolicyClassName(<span class="string">"org.apache.commons.pool2.impl.DefaultEvictionPolicy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否启用pool的jmx管理功能, 默认true</span></span><br><span class="line">config.setJmxEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//MBean ObjectName = new ObjectName("org.apache.commons.pool2:type=GenericObjectPool,name=" + "pool" + i); 默认为"pool", JMX不熟,具体不知道是干啥的...默认就好.</span></span><br><span class="line">config.setJmxNamePrefix(<span class="string">"pool"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否启用后进先出, 默认true</span></span><br><span class="line">config.setLifo(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//最大空闲连接数, 默认8个</span></span><br><span class="line">config.setMaxIdle(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//最大连接数, 默认8个</span></span><br><span class="line">config.setMaxTotal(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1</span></span><br><span class="line">config.setMaxWaitMillis(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//逐出连接的最小空闲时间 默认1800000毫秒(30分钟)</span></span><br><span class="line">config.setMinEvictableIdleTimeMillis(<span class="number">1800000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//最小空闲连接数, 默认0</span></span><br><span class="line">config.setMinIdle(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3</span></span><br><span class="line">config.setNumTestsPerEvictionRun(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象空闲多久后逐出, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲数 时直接逐出,不再根据MinEvictableIdleTimeMillis判断  (默认逐出策略)   </span></span><br><span class="line">config.setSoftMinEvictableIdleTimeMillis(<span class="number">1800000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在获取连接的时候检查有效性, 默认false</span></span><br><span class="line">config.setTestOnBorrow(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在空闲时检查有效性, 默认false</span></span><br><span class="line">config.setTestWhileIdle(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1</span></span><br><span class="line">config.setTimeBetweenEvictionRunsMillis(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">JedisPool pool = <span class="keyword">new</span> JedisPool(config, <span class="string">"localhost"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JEDIS-2-4-2&quot;&gt;&lt;a href=&quot;#JEDIS-2-4-2&quot; class=&quot;headerlink&quot; title=&quot;JEDIS-2.4.2&quot;&gt;&lt;/a&gt;JEDIS-2.4.2&lt;/h1&gt;&lt;h2 id=&quot;jedis-config-配置说明&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="数据库" scheme="https://dongcarzy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="jedis" scheme="https://dongcarzy.github.io/tags/jedis/"/>
    
      <category term="redis" scheme="https://dongcarzy.github.io/tags/redis/"/>
    
      <category term="java" scheme="https://dongcarzy.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>docker创建数据库</title>
    <link href="https://dongcarzy.github.io/2016/11/14/DB/docker_create_db/"/>
    <id>https://dongcarzy.github.io/2016/11/14/DB/docker_create_db/</id>
    <published>2016-11-14T10:13:57.000Z</published>
    <updated>2018-11-21T03:37:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker创建数据库"><a href="#docker创建数据库" class="headerlink" title="docker创建数据库"></a>docker创建数据库</h1><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-mysql -v /home/dxp/mysql/data:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:5.7</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker创建数据库&quot;&gt;&lt;a href=&quot;#docker创建数据库&quot; class=&quot;headerlink&quot; title=&quot;docker创建数据库&quot;&gt;&lt;/a&gt;docker创建数据库&lt;/h1&gt;&lt;h2 id=&quot;mysql&quot;&gt;&lt;a href=&quot;#mysql&quot; class
      
    
    </summary>
    
      <category term="数据库" scheme="https://dongcarzy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="docker" scheme="https://dongcarzy.github.io/tags/docker/"/>
    
      <category term="mysql" scheme="https://dongcarzy.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
